<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "7.0_9";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Guide To Primitives And Vertex Building</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css">
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers">
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building">
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats">
<meta name="brsnext" value="Additional_Information/Guide_To_Using_Blendmodes.htm"><meta name="brsprev" value="Additional_Information/Guide_To_Using_Shaders.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Guide To Primitives And Vertex Building">
        <span>Guide To Primitives And Vertex Building</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>图元和顶点构建指南</h1>
  <p>本指南简要介绍了如何使用自定义<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">顶点格式</a>和<strong>顶点缓冲区</strong>构建和使用<strong>图元</strong>。</p>
  <p>一般来说，当您开始使用 3D、特效、复杂的绘制过程或着色器时，您不必太担心所使用的顶点格式，因为 <span data-keyref="GameMaker Name">GameMaker</span> 会自动设置并通过<a class="tooltip" title="顶点是一个多边形的单点的名称，它包含了定义它的位置、颜色和纹理的各种特征。在计算机图形学中，这通常指用于创建原语的三角形的一个角，而这些原语的组合构成了屏幕上的图形。">顶点 </a> 数据。 然而，有时需要创建您自己的顶点数据并对其进行格式化以适应，尤其是当您需要提高速度或希望传递额外信息时。 例如，标准顶点格式包括 x、y、z 3D 位置、颜色（带 alpha）和 UV 纹理坐标，如果您自己创建它，将类似于：</p>
  <p class="code">vertex_format_begin();<br>
    vertex_format_add_position_3d();<br>
    vertex_format_add_colour();<br>
    vertex_format_add_textcoord();<br>
    my_format = vertex_format_end();</p>
  <p>然而，如果你只是使用(例如)着色器来操作顶点的位置，那么就不需要传递颜色或纹理数据了。在这种情况下，你将创建自己的格式如下:</p>
  <p class="code">vertex_format_begin();<br>
    vertex_format_add_position_3d();<br>
    my_format = vertex_format_end();</p>
  <p>在定义顶点格式时，总共可以使用五种不同的顶点属性:</p>
  <ul class="colour">
    <li>Colour 颜色</li>
    <li>Normal 法线</li>
    <li>Position 位置</li>
    <li>3D Position 3D位置</li>
    <li>Texture coordinate 纹理坐标</li>
  </ul>
  <p>通常情况下，您必须<em> 始终 </em>提供位置或3D位置作为格式的一部分，但其他所有都是可选的。</p>
  <p>您应该注意，一旦创建了顶点格式，在构建<strong>图元</strong>时，<i>必须遵守</i>定义顶点属性的顺序。所以，如果你已经定义了一个顶点格式作为位置，颜色和纹理坐标，那么<b>你<i>必须</i>以相同的顺序将这些属性添加到原语中，否则你将得到一个错误</b>。还要注意，像任何其他动态资源一样，顶点格式需要内存，因此在不需要时应该使用函数<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><span class="inline">vertex_format_delete()</span></a>删除顶点格式。</p>
  <p>你构建的任何图元都保存在<b>顶点缓冲区</b>中。这必须事先创建，然后由用于构建图元的函数引用。顶点缓冲区可以根据需要多次重用以创建不同的图元，或者它可以“冻结”以在你的游戏或关卡期间保持特定的图元类型(这是最快的方法，所以如果你知道你所构建的图元不会改变，那么你应该总是使用这个选项)。</p>
  <p>下面的代码显示了构建单个三角形图元的示例:</p>
  <p class="code">// CREATE EVENT<br>
    v_buff = vertex_create_buffer();<br>
    vertex_begin(v_buff, global.my_format);<br>
    vertex_position(v_buff, 10, 10);<br>
    vertex_colour(v_buff, c_white, 1);<br>
    vertex_texcoord(v_buff, 0, 0);<br>
    vertex_position(v_buff, 110, 10);<br>
    vertex_colour(v_buff, c_white, 1);<br>
    vertex_texcoord(v_buff, 1, 0);<br>
    vertex_position(v_buff, 110, 110);<br>
    vertex_colour(v_buff, c_white, 1);<br>
    vertex_texcoord(v_buff, 1, 1);<br>
    vertex_end(v_buff);<br>
    <br>
    // DRAW EVENT<br>
    var tex = sprite_get_texture(spr_Background, 0);<br>
    shader_set(shd_shimmer);<br>
    vertex_submit(v_buff, pr_trianglelist, tex);<br>
    shader_reset();
  </p>
  <p>在这里，我们首先在实例的创建事件中创建了我们的顶点缓冲区，然后我们开始定义组成我们的三角形图元的不同顶点，为我们想要使用的三个点中的每个点提供位置、颜色和纹理UV坐标。然后结束顶点定义，我们知道包含这个顶点数据的顶点缓冲区存储在变量"v_buff"中。</p>
  <p class="note"><strong>注意</strong>：如果要不断更新缓冲区的内容，则会在给定顶点数据的情况下创建缓冲区，然后再次销毁 - 在绘制之后 - 所有这些都在同一步骤中进行。</p>
  <p>然后我们使用着色器在绘制事件中绘制顶点缓冲区的内容。这是一个非常简单的例子，基本上就是<span data-keyref="GameMaker Name">GameMaker</span>内部工作的方式，例如:当你绘制一个精灵时，GameMaker创建一个顶点缓冲区，四个顶点创建两个三角形(构成一个正方形，也称为“quad”)，并将这两个三角形与精灵图像纹理化。当我们绘制这个精灵时，我们提交了顶点缓冲区，它的内容被绘制到屏幕上。</p>
  <p>你会注意到，当我们提交绘制的顶点缓冲区时，我们提供了一个图元类型。你使用的图元类型可以是一个点，一个行列表或条，或一个三角形列表或条(point,line list or strip,triangle list or strip)，但是<i> 不 </i>允许使用三角扇形(triangle fans)，因为大量移动硬件不接受这种图元类型。不要忘记为将要用来绘制它的图元类型正确地格式化你的顶点缓冲区。例如，将两个三角形图元绘制为一个三角形列表需要6个点，但作为一个三角扇(triangle strip)只需要4个点。你使用哪种类型是由你自己决定的，这取决于你想要画什么和你想要达到的效果。</p>
  <p>以这种方式使用您自己的顶点缓冲区时要注意的最后一点是它如何影响发送到 GPU 的顶点批次。 创建顶点缓冲区时，您创建的是最低级别的图形数据，因此当您绘制时，<span data-keyref="GameMaker Name">GameMaker</span> 会将您的缓冲区直接发送到显卡。 因此，如果你想要更好的批处理，你必须自己解决并将你想要批处理的东西存储在同一个缓冲区中。</p>
  <p>正如我们在上面已经提到的，顶点格式是通过同时使用以下 5 种属性类型构建的（通过适当的 <span class="inline">vertex_format_add_*</span> 函数添加）：</p>
  <ul class="colour">
    <li>Colour 颜色</li>
    <li>Normal 法线</li>
    <li>Position 位置</li>
    <li>3D Position 3D位置</li>
    <li>Texture coordinate 纹理坐标</li>
  </ul>
  <p>在 GLSL ES 着色器中，使用以下4个属性可以识别这些类型:</p>
  <ul class="colour">
    <li>Colour 颜色</li>
    <li>Normal 法线</li>
    <li>Position 位置</li>
    <li>Texture coordinate 纹理坐标</li>
  </ul>
  <p>现在，这可能看起来很奇怪，因为我们似乎可以在顶点格式中指定比在顶点着色器中更多的属性种类。 但是，在着色器中，<i>Position</i> 和 <i>3D Position</i> 被视为<em>相同的</em>属性，除了 <i>Position</i> 预计只有“x”和“y”坐标，而 <i>3D 位置</i>具有“x”、“y”和“z”坐标。 那么如何将顶点格式中的内容映射到着色器中定义属性的方式呢？ 让我们从默认着色器的一组典型属性开始：</p>
  <p>&nbsp;</p>
  <p class="code">attribute vec3 in_Position;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (x,y,z)<br>
    //attribute vec3 in_Normal;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (x,y,z) unused in this shader.<br>
    attribute vec4 in_Colour;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (r,g,b,a)<br>
    attribute vec2 in_TextureCoord;&nbsp;&nbsp;&nbsp;&nbsp;// (u,v)</p>
  <p>下面是一段代码，它建立了与这个着色器兼容的顶点格式:</p>
  <p class="code">vertex_format_begin();<br>
    vertex_format_add_position_3d();<br>
    vertex_format_add_colour();<br>
    vertex_format_add_textcoord();<br>
    my_format = vertex_format_end();</p>
  <p>现在，shader 属性是如何与顶点格式类型匹配的? 它只是基于变数命名原则:</p>
  <ul class="colour">
    <li><span class="inline">"in_Position"</span> 映射到 <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm">vertex_format_add_position</a>/<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm">_3d()</a></span></li>
    <li><span class="inline">"in_Colour"</span> 映射到 <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"><span class="inline">vertex_format_add_colour()</span></a></li>
    <li><span class="inline">"in_TextureCoord"</span> 映射到 <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"><span class="inline">vertex_format_add_texcoord()</span></a></li>
  </ul>
  <p><span class="inline"><span class="inline"><span class="inline"></span></span> </span>现在，当您拥有多个同类属性时，事情会变得更加棘手，但事情仍然基于相同的命名约定。 我们现在将考虑提供额外的<b>颜色</b>和<b>纹理坐标</b>，因为在着色器或顶点格式中只能有<b>一个</b>位置和<b>一个</b>法线属性，但有&nbsp; <em>可以</em>&nbsp;是多个颜色或纹理属性。</p>
  <p>向着色器添加其他颜色属性时，需要在着色器属性的末尾添加一个数字，以指示该属性映射到顶点格式中的哪个特定条目。 这是一个示例 - 首先是顶点格式：</p>
  <p class="code">vertex_format_begin();<br>
    vertex_format_add_position_3d();<br>
    vertex_format_add_colour();<br>
    vertex_format_add_colour();<br>
    vertex_format_add_textcoord();<br>
    my_format = vertex_format_end();</p>
  <p>现在是相关的着色器属性:</p>
  <p class="code">attribute vec3 in_Position;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (x,y,z)<br>
    attribute vec4 in_Colour0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (r,g,b,a)<br>
    attribute vec4 in_Colour1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (r,g,b,a)<br>
    attribute vec2 in_TextureCoord;&nbsp;&nbsp;// (u,v)</p>
  <p>在这种情况下，<span class="inline">in_Colour0</span> 映射到第一个 <span class="inline">vertex_format_add_colour()</span>，<span class="inline">in_Colour1</span> 映射到第二个。</p>
  <p>纹理坐标的处理方式与颜色略有不同。 基本上，任何未称为 <span class="inline">in_Position</span>、<span class="inline">in_Normal</span> 或 <span class="inline">in_Colour[0 ... ]</span> 属性之一的都被视为纹理坐标。 它们在着色器的属性列表中定义的顺序表示它们映射到顶点格式中的哪个属性。 请参阅以下 GML 示例：</p>
  <p class="code">vertex_format_begin();<br>
    vertex_format_add_position_3d();<br>
    vertex_format_add_colour();<br>
    vertex_format_add_textcoord();<br>
    vertex_format_add_textcoord();<br>
    vertex_format_add_textcoord();<br>
    my_format = vertex_format_end();</p>
  <p>着色器代码应该是这样的:</p>
  <p class="code">attribute vec3 in_Position;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (x,y,z)<br>
    attribute vec4 in_Colour;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (r,g,b,a)<br>
    attribute vec2 in_myTexcoord;&nbsp;&nbsp;&nbsp;&nbsp;// (u,v)<br>
    attribute vec2 in_TextureCoord;&nbsp;&nbsp;// (u,v)<br>
    attribute vec2 in_Something;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (u,v)</p>
  <p>在此示例中，<span class="inline">in_myTexcoord</span>、<span class="inline">in_TextureCoord</span> 和 <span class="inline">in_Something</span> 映射到顶点格式中定义的三个连续纹理坐标属性。</p>
  <p>您可以从以下页面找到创建顶点格式、顶点缓冲区和图元所需的所有函数的完整列表：</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">图元和顶点格式</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">额外的信息</a></div>
        <div style="float:right">Next: <a href="Guide_To_Using_Blendmodes.htm">混合模式使用指南</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->

</body></html>