<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.6.7.0_14";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>vertex_format_add_custom</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Reference for vertex_format_add_custom">
  <meta name="rh-index-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample">
  <meta name="search-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_end.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_normal.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="vertex_format_add_custom">
        <span>vertex_format_add_custom</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">vertex_format_add_custom</span></h1>
  <p>此函数为特定顶点格式属性添加自定义数据类型，作为创建的新顶点格式的一部分。</p>
  <p>要使用的可用值由您选择的数据类型常量定义，如下所示：</p>
  <table>
    <colgroup>
      <col>
      <col>
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Draw_Vertex_Data_Type"><a target="_blank" href="vertex_format_add_custom.htm">顶点数据类型常量</a></span></th>
      </tr>
      <tr>
        <th>常量</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">vertex_type_float1</span></td>
        <td>A single floating point value</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_type_float2</span></td>
        <td>Two floating point values</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_type_float3</span></td>
        <td>Three floating point values</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_type_float4</span></td>
        <td>Four floating point values</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_type_colour</span></td>
        <td>Four component values (r, g, b, a)</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_type_ubyte4</span></td>
        <td>Four component unsigned byte values (from 0 to 255)</td>
      </tr>
    </tbody>
  </table>
  <p><br> 还需要定义这些常量的用途，以便可以在所创建的着色器中正确 " 绑定 " 这些值。这是必要的，因为 DirectX 和 OpenGL 有不同的要求，因此如果您没有正确绑定它们，它们将无法在着色器中正确通过。下面列出了您可以选择的可用使用常量，您使用的常量取决于所创建的着色器的具体情况：</p>
  <table>
    <colgroup>
      <col>
      <col>
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Draw_Vertex_Usage"><a target="_blank" href="vertex_format_add_custom.htm">顶点使用类型常量</a></span></th>
      </tr>
      <tr>
        <th>常量</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_position</span></td>
        <td>position values (x, y, z)</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_colour</span></td>
        <td>colour values (r, g, b, a)</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_normal</span></td>
        <td>vertex normal values (nx, ny, nz)</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_textcoord</span></td>
        <td>UV coordinates (u, v)</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_blendweight</span></td>
        <td>the blendweight of the input matrix (for skeletal animation, for example)</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_blendindices</span></td>
        <td>the indices of the matrices to use (for skeletal animation, for example)</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_depth</span></td>
        <td>vertex depth buffer value</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_tangent</span></td>
        <td>tangent values</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_binormal</span></td>
        <td>binormal values</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_fog</span></td>
        <td>fog values</td>
      </tr>
      <tr>
        <td><span class="inline">vertex_usage_sample</span></td>
        <td>sampler index</td>
      </tr>
    </tbody>
  </table>
  <p><br>在使用这些自定义格式时，需要注意一些重要事项：</p>
  <ul class="colour">
    <li>使用 GLSL 着色器时，<span class="inline">vertex_format_add_custom()</span> 函数仅支持 <span class="inline">vertex_usage_position</span>、<span class="inline">vertex_usage_colour</span>、<span class="inline">vertex_usage_normal</span> 和 <span class="inline">vertex_usage_textcoord</span>。这些将分别映射到着色器属性 <span class="inline">in_Position</span>、<span class="inline">in_Colour[0 - ...]</span>、<span class="inline">in_Normal</span>( 任何不是这三个属性之一的属性 - 例如：纹理坐标 - 都可以是映射到您定义的任何属性)。</li>
    <li>通常，应尽可能对所有额外参数使用<span class="inline">vertex_usage_textcoord</span>，因为在大多数着色器语言中，类型(如<span class="inline">vertex_usage_blendweight</span>和<span class="inline">vertex_usage_tangent</span>)接近不推荐使用的类型，并且可能无法正确转换。而是使用<span class="inline">向量</span>、<span class="inline">vec 2</span>、<span class="inline">vec 3</span>或<span class="inline">vec 4</span>类型<span class="inline">vertex_usage_textcoord</span>，一切都应该正常。</li>
    <li>GLSL ES <i></i>不支持整数属性，因此传入<span class="inline">ivec 4</span>不起作用(通常在传入<span class="inline">vertex_usage_blendindices</span>时使用此类型)。需要做的是传入纹理坐标，然后在着色器中，将它们转换为<span class="inline">ivec 4</span>，如下所示：</li>
  </ul>
  <p>&nbsp;</p>
  <p class="code">attribute vec3 in_Position;<br>
    attribute vec4 in_BlendIndices;<br>
    attribute vec4 in_BlendWeights;<br>
    <br>
    varying vec4 v_vColour;<br>
    varying mat4 v_mat;<br>
    <br>
    void main()<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;v_vColour = in_BlendWeights;<br>
    &nbsp;&nbsp;&nbsp;&nbsp; ivec4 t = ivec4(in_BlendIndices);<br>
    &nbsp;&nbsp;&nbsp;&nbsp; v_mat = gm_Matrices[ t.x ];<br>
    }
  </p>
  <ul class="colour">
    <li>混合权重通常存储在数组中，然后使用混合索引进行访问，但您可以在此看到，它不是将<span class="inline">in_BlendIndices</span>定义为<span class="inline">ivec 4</span>属性，而是将其转换为代码中的<span class="inline">ivec 4</span>。然后，这将用于为使用<span class="inline">gm_Matrix</span>创建的数组编制索引(您只能使用<span class="inline">Int</span>值而不能使用浮点数访问数组)。</li>
  </ul>
  <p>&nbsp;</p>
  <ul class="colour"><br>
    &nbsp;
  </ul>
  <h4>语法:</h4>
  <p class="code"><span data-field="title" data-format="default">vertex_format_add_custom</span>(type, usage);</p>
  <table>
    <tbody>
      <tr>
        <th>参数</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>type</td>
        <td><span data-keyref="Type_Constant_Draw_Vertex_Data_Type"><a target="_blank" href="vertex_format_add_custom.htm">顶点数据类型常量</a></span></td>
        <td>此自定义顶点数据将保留的数据类型(请参阅上面列出的<b><i>类型常量</i></b>)。</td>
      </tr>
      <tr>
        <td>usage</td>
        <td><span data-keyref="Type_Constant_Draw_Vertex_Usage"><a target="_blank" href="vertex_format_add_custom.htm">顶点使用类型常量</a></span></td>
        <td>数据将获得的用途 (请参阅上面列出的 <b><i> 使用常量 </i></b>)。</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <h4>返回:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p>&nbsp;</p>
  <h4>例子:</h4>
  <p class="code">vertex_format_begin();<br>
    vertex_format_add_texcoord();<br>
    vertex_format_add_custom(vertex_type_float3, vertex_usage_position);<br>
    my_format = vertex_format_end();</p>
  <p>上面的代码创建了一个新的顶点格式，仅包含纹理和 3 个自定义浮点值的位置。然后，它将格式存储在变量 <span class="inline2">my_format</span> 中。</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:&nbsp;<a href="Primitives_And_Vertex_Formats.htm">基元和顶点格式</a></div>
        <div style="float:right">Next:&nbsp;<a href="vertex_format_end.htm">vertex_format_end</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
vertex_format_add_custom
vertex_type_float1
vertex_type_float2
vertex_type_float3
vertex_type_float4
vertex_type_colour
vertex_type_ubyte4
vertex_usage_position
vertex_usage_colour
vertex_usage_normal
vertex_usage_textcoord
vertex_usage_blendweight
vertex_usage_blendindices
vertex_usage_depth
vertex_usage_tangent
vertex_usage_binormal
vertex_usage_fog
vertex_usage_sample
-->
  <!-- TAGS
vertex_format_add_custom
-->

</body></html>