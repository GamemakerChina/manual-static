<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.13.4.0_2";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>physics_joint_distance_create</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Reference page for physics_joint_distance_create">
  <meta name="rh-index-keywords" content="physics_joint_distance_create">
  <meta name="search-keywords" content="physics_joint_distance_create">
  <meta name="is_pure" content="true">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Physics/Joints/physics_joint_revolute_create.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Physics/Joints/Physics_Joint_Constants.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="physics_joint_distance_create">
        <span>physics_joint_distance_create</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>physics_joint_distance_create</h1>
  <p>最简单的关节之一是距离关节，它说明两个实例上两个点之间的距离必须是恒定的。指定距离关节时，应已创建两个实例并指定了装置，然后在房间坐标中定义两个锚点。第一个锚点连接到实例 1，第二个锚点连接到实例 2，这些点之间的距离表示距离约束的长度。下图显示了此函数的工作原理：</p>
  <p><img alt="Distance joint illustration" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Physics/direction_joint_image.png">如您所见，锚点被指定为房间坐标，因此在定义它们时必须小心，尤其是如果实例与关节同时创建，而不是通过房间编辑器放置在房间中。您还应该意识到，关节的创建与实例的精灵大小或它们附着的装置的大小无关。因此，如果在实例原点以外的位置创建距离关节，则该距离关节仍然有效，并将相对于创建该距离关节的位置约束两个实例。如果将 "col" 值设置为 <span class="inline">true</span>，则两个实例可以相互作用并发生碰撞，但如果它们发生碰撞事件，则<i>只能</i>发生碰撞，但如果设置为 <span class="inline">false</span>，则无论发生什么情况，它们都不会发生碰撞。</p>
  <p>&nbsp;</p>
  <h4>语法:</h4>
  <p class="code">physics_joint_distance_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, col)</p>
  <table>
    <tbody>
      <tr>
        <th>参数</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>inst1</td>
        <td><span data-keyref="Type_ID_Instance"><a target="_blank" href="../../Asset_Management/Instances/Instance_Variables/id.htm">Object Instance</a></span></td>
        <td>与关节连接的第一个实例</td>
      </tr>
      <tr>
        <td>inst2</td>
        <td><span data-keyref="Type_ID_Instance"><a target="_blank" href="../../Asset_Management/Instances/Instance_Variables/id.htm">Object Instance</a></span></td>
        <td>与关节连接的第二个实例</td>
      </tr>
      <tr>
        <td>w_anchor1_x</td>
        <td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td>
        <td>游戏世界中关节的第一个 X 坐标</td>
      </tr>
      <tr>
        <td>w_anchor1_y</td>
        <td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td>
        <td>游戏世界中关节的第一个 Y 坐标</td>
      </tr>
      <tr>
        <td>w_anchor2_x</td>
        <td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td>
        <td>游戏世界中关节的第二个 X 坐标</td>
      </tr>
      <tr>
        <td>w_anchor2_y</td>
        <td><span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span></td>
        <td>游戏世界中关节的第二个 Y 坐标</td>
      </tr>
      <tr>
        <td>col</td>
        <td><span data-keyref="Type_Bool"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Boolean</a></span></td>
        <td>这两个实例是否可以碰撞 (true) 或不碰撞 (false)</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <h4>返回:</h4>
  <p class="code"><span data-keyref="Type_ID_Physics_Joint"><a target="_blank" href="Joints.htm">Physics Joint ID</a></span></p>
  <p>&nbsp;</p>
  <h4>例子:</h4>
  <p class="code">var mainFixture, o_id;<br>
    mainFixture = physics_fixture_create();<br>
    physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br>
    o_id=instance_create_layer(x+300, y, "Instances", obj_Rudder);<br>
    physics_fixture_bind(mainFixture, id);<br>
    physics_fixture_bind(mainFixture, o_id);<br>
    physics_joint_distance_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 0);<br>
    physics_fixture_delete(mainFixture);</p>
  <p>上述代码创建并定义了一个新的装置，然后创建了一个 "obj_Rudder" 的实例。然后将装置指定给运行代码的实例以及新创建的实例，并在它们之间创建一个关节。最后，由于不再需要该装置，因此将其删除。</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Joints.htm">关节</a></div>
        <div style="float:right">Next:&nbsp;<a href="physics_joint_revolute_create.htm">physics_joint_revolute_create</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_distance_create
-->
  <!-- TAGS
physics_joint_distance_create
-->

</body></html>