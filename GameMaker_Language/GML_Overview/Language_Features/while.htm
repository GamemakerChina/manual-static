<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../..";
    gCommonRootRelPath = "../../..";
    gTopicId = "8.2.1.3.0_2";
  
//]]></script>

  <script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>while</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css">
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining the while function">
  <meta name="rh-index-keywords" content="while">
  <meta name="search-keywords" content="while">
<meta name="brsnext" value="GameMaker_Language/GML_Overview/Language_Features/do___until.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Language_Features/repeat.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="while">
        <span>while</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>while</h1>
  <p>GameMaker语言有许多方法可以进行<i>循环</i>，其中最重要的是<span class="inline">while</span>循环。这个循环函数的形式是:</p>
  <p class="code">while (&lt;expression&gt;)<br>
    {<br>
    &nbsp; &nbsp; &lt;statement&gt;;<br>
    &nbsp; &nbsp; &lt;statement&gt;;<br>
    &nbsp; &nbsp; ...<br>
    }</p>
  <p>这里有一个<a class="tooltip" title="在编程中，语句是用编程语言合法编写的单行代码，表示要执行的操作。语句可能具有自己的内部组件，包括表达式，运算符和函数。语句的一个示例是A = B +5。GameMakerStudio 2程序不过是一系列一起执行任务（如移动玩家）的一个或多个语句的序列。">语句</a>，它根据<a class="tooltip" title="表达式是一个或多个常量，变量，运算符和/或函数的组合，这些常量根据特定的优先级和关联规则进行解释以返回另一个值。一个简单的表达式是（5 + 5），它返回10。">表达式</a>的求值结果反复迭代，即：使用<span class="inline">while</span>循环，只要表达式的计算结果为<span class="inline">true</span>，就会执行该语句(也可以是带有大括号<span class="inline"></span>{}的多个语句的代码块)。以下是使用 "while" 的典型方法示例：</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br>
    {<br>
    &nbsp; &nbsp; x -= 1;<br>
    }</p>
  <p>上述代码正在检查调用的实例和 "墙 "的实例之间是否发生碰撞，当发生碰撞时，它将执行多次<a class="tooltip" title="迭代是对项目代码中的一组操作的一次遍历。计算机编程中一种迭代形式是通过循环。循环将重复一段代码，直到满足条件为止，然后循环可以继续进行。每次计算机运行一个循环，就称为迭代。简单来说，迭代是一遍又一遍地重复执行特定代码段以执行特定操作的过程。">迭代</a><span class="glossextra"> </span> --将实例向左移动一个像素，直到实例不再发生碰撞。</p>
  <p><strong>什么时候应该使用<span class="inline">while</span>循环？</strong>当您想重复一个或多个语句时，应该使用该循环，但实际上不知道或不关心它必须重复多少次，请记住，如果初始评估为<span class="inline">false</span>，则可能无法运行这些语句。</p>
  <p>请注意你应该<strong>在<span class="inline">循环</span>时非常小心你的</strong>！你可以轻松地进行<i>infinite</i>循环，在这种情况下，你的游戏将挂起并且不再对任何用户的输入做出反应，需要强制关闭。例如：</p>
  <p class="code">while (!place_free(x, y))<br>
    {<br>
    &nbsp; &nbsp; x = random(room_width);<br>
    &nbsp; &nbsp; y = random(room_height);<br>
    }</p>
  <p>现在，上面的代码可能工作正常，但是如果实例无法找到要移动到的空位置，也可能导致无限循环，这将导致游戏挂起。如果您发现自己处于这种可能性的位置，那么您应该使用不同的非阻塞循环类型，或者在表达式中使用额外的变量检查(可以与<a href="../Expressions_And_Operators.htm"><span class="inline">and</span>(&amp;<span class="inline">&amp;</span>)</a>,<a href="../Expressions_And_Operators.htm"><span class="inline">or</span>(<span class="inline">||</span>)</a>和<a href="../Expressions_And_Operators.htm"><span class="inline">xor</span>(<span class="inline">^^</span>)</a><a class="tooltip" title="An operator is a term used to denote something which can manipulate different operands. In the expression A + B - C, + and - are the operators. Examples of different operators are + (addition), - (subtrtaction), = (equals), != (not equal) and >=(大于或等于)，但还有很多。"> 运算符</a><span class="glossextra"> </span>用于检查):</p>
  <p class="code">var _check = 0;<br>
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br>
    {<br>
    &nbsp; &nbsp; x = random(room_width);<br>
    &nbsp; &nbsp; y = random(room_height);<br>
    &nbsp; &nbsp; _check += 1;<br>
    }<br>
    if _check &gt;= 100<br>
    {<br>
    &nbsp; &nbsp; // code failed, so deal with it<br>
    }</p>
  <p>或者，您也可以使用<span class="inline"><a href="break.htm">break</a></span>语句打破循环，例如，以下代码将生成100个随机数，然后继续，即使<span class="inline">计算结果总是</span>为true<em>：</em></p>
  <p class="code">var i = 0;<br>
    while (true)<br>
    {<br>
    &nbsp; &nbsp; x[i]&nbsp;= random(room_width);<br>
    &nbsp; &nbsp; y[i] = random(room_height);<br>
    &nbsp; &nbsp; if ((i++) &gt;= 100)<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; break;<br>
    &nbsp; &nbsp; }<br>
    }</p>
  <p>你也可以在一个<a href="continue.htm">while</a>循环中使用<span class="inline">continue</span>语句。例如，使用它将结束当前的循环迭代，并在新的迭代中再次重启循环。</p>
  <p class="code">var file = file_text_open_read("Game_Data.txt");<br>
    var _num = 0;<br>
    while (!file_text_eof(file))<br>
    {<br>
    &nbsp; &nbsp; var _s =&nbsp;file_text_readln(file);<br>
    <br>
    &nbsp; &nbsp; if (_s == "")<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; continue;<br>
    &nbsp; &nbsp; }<br>
    <br>
    &nbsp; &nbsp;&nbsp;str[num++] = _s;<br>
    }<br>
    <br>
    file_text_close(file);
  </p>
  <p>上面这段代码将打开一个文件，并在每次循环迭代中从其中读取一行，直到达到文件内容的末尾。如果被读取的行是一个空字符串，则使用<span class="inline">continue</span>语句结束当前的循环迭代，并开始新的迭代，否则该字符串将被添加到<a href="../Arrays.htm">数组</a>中，数组的位置将被增加。</p>
  <p>关于循环函数的更多例子，请参见<a href="repeat.htm"><span class="inline">repeat</span></a>、<a href="do___until.htm"><span class="inline">do... until</span></a>和<a href="for.htm"><span class="inline">for</span></a>部分。</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Language_Features.htm">Language&nbsp;Features</a></div>
        <div style="float:right">Next: <a href="do___until.htm">do / until</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->

</body></html>