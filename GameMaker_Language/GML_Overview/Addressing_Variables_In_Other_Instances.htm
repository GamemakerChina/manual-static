<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "8.2.1.1_3";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Addressing Variables In Other Instances</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css">
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances">
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances">
  <meta name="search-keywords" content="">
<meta name="brsnext" value="GameMaker_Language/GML_Overview/Expressions_And_Operators.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Addressing Variables In Other Instances">
        <span>Addressing Variables In Other Instances</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>在其他实例中处理变量</h1>
  <p>在专门讨论<a href="Variables_And_Variable_Scope.htm">变量</a>的章节中，你发现了如何在单个实例中或在全局范围内创建和使用变量，但如果你想让一个实例访问另一个不同实例中的变量，会发生什么？有很多情况下你可能想这样做，例如在与子弹物体的碰撞中，你可能想通过访问子弹中的一个变量来了解子弹的伤害程度，或者你可能想在一个谜题中停止所有球的运动，或者你可能想把主角移动到一个特定的位置，或者你在任何游戏中通常遇到的任何其他情况。值得庆幸的是，GameMaker语言配备了实现这一目的的机制。</p>
  <p>在<em>另一个</em>实例中访问或更改变量的最常见方法之一是使用其对象名称作为标识符，然后使用点<span class="inline2">.</span>告诉<span data-keyref="GameMaker Name">GameMaker</span>该变量是引用应该在该特定对象的实例中分配或更改。这称为"点表示法"，其语法如下：</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;;&nbsp;</p>
  <p>在实践中，它看起来像这样。</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>通过上述代码，您可以设置<span class="inline2">obj_ball</span>实例的速度。不过，如果房间中有多个给定对象的实例，<em>那么它将同等地应用于所有实例</em>- 除非您使用<b>HTML5</b>，在这种情况下，它将仅影响<em>一个</em>，但您无法知道它会影响哪一个 - 因此，如果您需要访问某个对象的所有实例，您应该使用<span class="inline2"><a href="Language_Features/with.htm">with</a></span>，因为这是 100% 跨平台的兼容的。一般来说，只有当您在房间中只有一个对象实例时，或者(正如您将在下一部分中看到的)当您有特定的<i>实例<b>ID</b></i>时，才应使用此格式。</p>
  <p>当房间内有多个实例时，您还可以使用唯一的<b>实例名称</b>来访问对象的单个实例，以准确告知<span data-keyref="GameMaker Name">GameMaker</span>我们希望访问哪个实例。<b>实例名称常量</b>是为添加到游戏房间中的每个实例指定的唯一标识常量。您可以通过双击<a href="../../The_Asset_Editors/Rooms.htm">房间编辑器</a>中的实例来找到该常量：</p>
  <p><img alt="The instance constant in the room editor" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Instance_Constant.png">请注意，可以编辑此名称并赋予更描述性的名称-尽管名称<em>必须</em>对于整个游戏而言是唯一的-并且可以用作点的左侧:</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <div data-conref="../../assets/snippets/Note_Instance_Name_Stores_Handle_InGame.hts">
  <p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">注意</span></span>在游戏中，此名称是实例的句柄。请参阅<a href="Data_Types.htm">数据类型</a>了解更多信息。</p>

</div>
  <p>然而，到目前为止，最常见和实用的方法是在点左侧使用<i>变量</i>，只要有问题的变量<i>存储了有效的<b>实例id</b></i>。下面的例子说明了这一点。</p>
  <p class="code">// Example 1<br>
    var _inst = instance_position(mouse_x, mouse_y, all);<br>
    if (instance_exists(_inst)) <br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;_inst.speed = 0;<br>
    }<br>
    <br>
    // Example 2<br>
    var _inst = instance_create_layer(mouse_x, mouse_y, "Enemies", obj_E_Parent);<br>
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br>
    _inst.target = id;
  </p>
  <p>在上面示例 1 的代码中，代码块中有一个<span class="inline3_func"><a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm">instance_exists</a></span>调用。这是因为，如果该实例不存在，使用 point 方法访问或更改另一个实例值将给出错误并导致游戏崩溃，并且该示例中可能存在这种情况。然而，在示例 2 和 3 中，我们不需要进行检查，因为我们<i>知道</i>该实例存在，因为在示例 2 中我们创建了该实例，而在示例 3 中，它是碰撞事件中的另一个实例。但是，如果在使用此方法时存在实例被销毁、停用或以其他方式从房间中移除的<i>任何</i>可能性，您应该<i>始终</i>使用<span class="inline3_func"><a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm">instance_exists</a></span>函数或<span class="inline3_func"><a href="../GML_Reference/Asset_Management/Instances/instance_number.htm">instance_number</a></span>函数。</p>
  <p>请注意，您不能在此方法中使用特殊的 <a href="Instance_Keywords.htm"> 关键字 </a><span class="inline2">all</span> 来定位所有实例 (例如：<span class="inline2">all.val = 10;</span> 会给出错误)，但您 <i> 可以 </i> 使用关键字 <span class="inline2">other</span> 和 <span class="inline2">self</span> 不会出现问题。例如，在 <span class="inline2"> 碰撞事件</span> 中使用 <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">other</a>：</p>
  <p class="code">// Example 3 other.hp -= 10;<br>
    if (other.hp &lt;= 0)<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;other.sprite_index = spr_E_Dead;<br>
    }</p>
  <p>同样重要的是要注意，你不能使用任何函数本身作为赋值的左边。例如，下面的代码会给你一个错误。</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>该代码示例中表达式的返回值是一个整数(最近实例的唯一 ID 值)，因此必须将其括在方括号<span class="inline2">( )</span>中才能以这种方式使用并正确寻址所需的实例。上面的代码可以正确写为：</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br>
    <br>
    //or<br>
    <br>
    var _inst = instance_nearest(x, y, obj);<br>
    _inst.speed = 0;
  </p>
  <p>这些都是在其他实例中读取、更改和设置变量的完全有效的方法，并且之所以有效，是因为该点实际上是一个<i>运算符</i>。它采用一个值作为左<a class="tooltip" title="是用来表示可以使用不同运算符操作的值的术语。在表达式A + B + C中，A, B和C是运算对象。">操作数</a>，一个变量作为右操作数，并返回指定对象或实例中该特定变量的地址。所有对象名称、常量、ID 等都简单地表示值，并且可以像处理任何其他值一样处理这些值。</p>
  <p>在另一个实例中引用变量的另一种方法是使用 GameMaker 语言语句<a href="Language_Features/with.htm">with</a>：</p>
  <p class="code">// This will affect all instances of the object "obj_Enemy"<br>
    with (obj_Enemy)<br>
    {<br>
    &nbsp; &nbsp; target = other.parent;<br>
    }<br>
    <br>
    // This will affect one instance of the object "obj_Enemy"<br>
    var _enemy = instance_nearest(x, y, obj_Enemy);<br>
    if (instance_exists(_enemy)) <br>
    {<br>
    &nbsp; &nbsp; with (_enemy)<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; target.x = mouse_x;<br>
    &nbsp; &nbsp; &nbsp; &nbsp; target.y = mouse_y;<br>
    &nbsp; &nbsp; }<br>
    }
  </p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div>
        <div style="float:right">Next:&nbsp;<a href="Expressions_And_Operators.htm">表达式和运算符</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->

</body></html>