<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "7.0_6";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Guide To Using Buffers</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css">
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page that explains how buffers work">
  <meta name="rh-index-keywords" content="Guide To Using Buffers">
  <meta name="search-keywords" content="Using Buffers,buffers">
<meta name="brsnext" value="Additional_Information/Guide_To_Using_Particles.htm"><meta name="brsprev" value="Additional_Information/Vectors.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Guide To Using Buffers">
        <span>Guide To Using Buffers</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>缓冲区使用指南</h1>
  <p>缓冲区(在编程中)基本上是系统内存中的一个空间，用于存储几乎任何事情的小数据包(例如:数据传输、冲突、颜色数据等)。因为它保存在系统内存中，所以访问速度非常快，而缓冲区通常用于非常短期的存储，如在处理网络信息之前接收网络信息，或用于在游戏中存储存档点(这将在后面的例子中解释)。</p>
  <p><img alt="Buffer Memory" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Memory.png">缓冲区是通过在系统内存中分配一个空间来创建的，以&nbsp;<a class="tooltip" title="字节是八位二进制数字长的数据单位，组成一个字节的每个数字都称为位，即：字节是8位，位可以是1或0。">字节</a><span class="glossextra"> </span>计算，然后在你的游戏运行期间为你的游戏保留，或者直到你使用适当的函数删除缓冲区(你可以在<a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">这里找到所有GML缓冲区函数</a>)。这意味着即使你的游戏没有焦点(例如，当你在移动设备上接听电话时，游戏将被放到后台)，缓冲区仍然存在，但如果游戏关闭或重新启动，缓冲区将丢失。</p>
  <p class="note"><strong>注意</strong>:重新启动游戏不会清除或删除缓冲区!但它将阻止任何进一步访问之前创建的缓冲区，因为ID句柄将丢失，导致内存泄漏，最终将导致你的游戏崩溃。所以，当重新开始游戏时，记得先删除所有缓冲区。</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span>允许创建四种不同的缓冲区类型。这样做的原因是缓冲区被设计成一种高度优化的临时存储介质，因此你应该创建一个适合于你希望它存储的数据类型的缓冲区，否则你可能会出错或导致你的代码瓶颈。在进一步解释之前，让我们看看四种可用的缓冲区类型(在GML中定义为<strong>常量</strong>):</p>
  <p>&nbsp;</p>
  <table>
    <tbody>
      <tr>
        <th>常量</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_fixed</span></td>
        <td><br>
          A buffer of a fixed size in bytes. The size is set when the buffer is created and cannot be changed again.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_grow</span></td>
        <td><br>
          A buffer that will <i>grow</i> dynamically as data is added. You create it with an initial size (which should be an approximation of the size of the data expected to be stored), and then it will expand to accept further data that overflows this initial size.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_wrap</span></td>
        <td><br>
          A buffer where the data will <i>wrap</i>. When the data being added reaches the limit of the buffer size, the overwrite will be placed back at the start of the buffer, and further writing will continue from that point.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_fast</span></td>
        <td><br>
          This is a special "stripped down" buffer that is extremely fast to read/write to. However it can only be used with <span class="inline"><span class="inline">buffer_u8</span></span> data types, and must be 1 byte aligned. (Information on <b>data types</b> and <b>byte alignment</b> can be found further down this page).</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <p>这些是在使用<span data-keyref="GameMaker Name">GameMaker</span>时可用的缓冲区类型，您选择哪一种很大程度上取决于您希望将其用于的用途。例如，增长(grow)缓冲区将用于存储数据的“快照”，以创建一个游戏存档，因为你不知道将放入其中的实际数据量，或快速(fast)缓冲区将用于当你知道你正在处理的值都在0到255或-128和127之间时，例如处理图像中的<a class="tooltip" title="这是Alpha，Red，Green，Blue的缩写，用于指代指定为十六进制值的颜色分量，例如：＃FF53E270，其中每两位数字代表一个分量。分解上面的ARGB示例可以得到以下分量值：Alpha（FF），Red（53），Green（E2）和Blue（70）。">ARGB</a> 数据。</p>
  <p><img alt="Buffer Types" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Types.png">创建缓冲区时，应始终尝试将其创建为适合该类型的大小，一般规则是，创建缓冲区时应容纳要存储的最大数据大小，如有疑问，应使用增长缓冲区以防止覆盖错误。</p>
  <p>创建缓冲区的实际代码如下所示:</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p><br>这将创建一个16384字节的固定缓冲区，字节对齐为2，函数返回一个唯一的 ID 值，该 ID 值存储在一个变量中，以便以后引用这个缓冲区。</p>
  <p>当读写数据到缓冲区时，你是在数据的“块”中进行的，这些“块”是由它们的“数据类型”定义的。“数据类型”&nbsp;设置为写入的值在缓冲区中分配的字节数，这一点非常重要，否则您的代码将得到一些非常奇怪的结果(甚至错误)。</p>
  <p>缓冲区按<strong>顺序</strong>写入(并从读取)，即一段数据在另一段数据之后写入，每一段数据都是一个集合类型。这意味着，在理想情况下，您应该始终知道向缓冲区写入的数据是什么。这些数据类型在GML中由以下常量定义:</p>
  <div data-conref="../assets/snippets/buffer_data_type_constants.hts">
  <table style="caption-side: top">
    <caption><span data-keyref="Type_Constant_Buffer_Data_Type"><a target="_blank" href="../../GameMaker_Language/GML_Reference/Buffers/buffer_write.htm">缓冲区数据类型常量</a></span></caption>
    <tbody>
      <tr>
        <th>常量</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>An unsigned, 8bit integer. This is a positive value from 0 to 255.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>A signed, 8bit integer. This can be a positive or negative value from -128 to 127 (0 is classed as positive).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>An unsigned, 16bit integer. This is a positive value from 0 - 65,535.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>A signed, 16bit integer. This can be a positive or negative value from -32,768 to 32,767 (0 is classed as positive).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>An unsigned, 32bit integer. This is a positive value from 0 to 4,294,967,295.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>A signed, 32bit integer. This can be a positive or negative value from -2,147,483,648 to 2,147,483,647 (0 is classed as positive).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>An unsigned 64bit integer. This is a positive value from&nbsp;0 to 18,446,744,073,709,551,615.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>A 16bit float. This can be a positive or negative value within the range of +/- 65504.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>A 32bit float. This can be a positive or negative value within the range of +/-16777216.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>A 64bit float.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>A boolean value, can only be either 1 or 0 (<span class="inline">true</span> or <span class="inline">false</span>). It is stored in a single byte (8bit)</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>A string of any size, including a final null terminating character</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_text</span></td>
        <td>A string of any size, without the final null terminating character</td>
      </tr>
    </tbody>
  </table>

</div>
  <p>所以，假设你已经创建了一个缓冲区，并且你想向它写入信息，那么你可以使用如下代码:</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br>
    buffer_write(buff, buffer_bool, global.Music);<br>
    buffer_write(buff, buffer_s16, obj_Player.x);<br>
    buffer_write(buff, buffer_s16, obj_Player.y);<br>
    buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>看看上面的例子，你会发现你可以同时向缓冲区写入不同类型的数据(当使用<em>快速</em>缓冲区类型时，你只能限制在一个特定的数据类型中) ，这些数据将被依次添加到缓冲区中(尽管它在缓冲区中的实际位置将取决于它的字节对齐，如下所述)。这对于从缓冲区读取信息也是一样的，在上面给出的例子中，您将按照写入数据的相同顺序从缓冲区读取信息，检查相同的数据类型，例如:</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br>
    global.Music = buffer_read(buff, buffer_bool);<br>
    obj_Player.x = buffer_read(buff, buffer_s16);<br>
    obj_Player.y = buffer_read(buff, buffer_s16);<br>
    global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>正如您所看到的，您以将信息读入缓冲区的相同顺序读出信息。有关如何从缓冲区中添加和删除数据的进一步信息，请参阅下面给出的示例。</p>
  <p>如果您一直在阅读这一页，您将会看到对缓冲区的<strong>字节对齐</strong>的引用。这基本上是指新数据将存储在给定缓冲区中的位置。这是如何运作的?对于一个单字节对齐的缓冲区，每个数据块都是按顺序写入缓冲区的，每个新数据块都是直接在前一个数据块之后添加的。然而，一个2字节对齐的缓冲区将把每一段数据写入2字节的间隔，所以即使你的初始写入是1字节的数据，下一次写入将被移动到对齐两个字节:</p>
  <p><img alt="Buffer Byte Alignment" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Byte_Alignment.png">因此，如果你的字节对齐设置为4个字节，并且你写了一个1字节大小的数据，然后执行缓冲区<strong>tell</strong>(一个告诉获取缓冲区读/写的当前位置)，你将得到一个字节的<strong>偏移</strong>(在这种情况下，偏移量是缓冲区开始到当前读/写位置的字节数)。</p>
  <p>然而，如果您写入另一段数据，同样是1字节大小的，<em>然后</em>执行缓冲区tell，您将得到5字节的偏移量(即使您只写入了2个字节的数据)，因为对齐已经填充了数据，使其与4字节的缓冲区对齐。</p>
  <p>基本上，这意味着对齐只会影响写入内容的<em>位置</em>，因此如果您在写入内容后执行缓冲区tell，它将返回当前写入位置，该位置紧跟在您之前写入的数据之后。 但是请注意，如果您随后写入另一段数据，在实际写入该段数据之前，缓冲区将在内部将写入位置移动到对齐大小的下一个倍数。</p>
  <p>下面我们有几个关于如何在项目中使用缓冲区的例子:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Buffer Checkpoint</span><span data-close-text="true">Buffer Checkpoint</span> 存档点缓冲区</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">关于如何在任何平台的任何<span data-keyref="GameMaker Name">GameMaker</span>游戏中使用缓冲区的一个简单例子是函数<a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>。该函数将获取当前游戏状态的“快照”，并将其保存到预定义的缓冲区中，然后可以从中读取并再次加载游戏。</p>
    <p class="note"><strong>注</strong>:这个函数非常有限，它是为初学者设计的，目的是让检查点系统快速启动和运行，但更高级的用户可能更喜欢使用File函数编写自己的系统，因为游戏不会保存任何你可以在运行时创建的动态资源，如数据结构、表面、添加的精灵等……</p>
    <p class="dropspot">我们需要做的第一件事是创建一个新对象来控制保存和加载，因此您需要创建一个对象并赋予它一个<strong> 创建事件 </strong>。在这种情况下，您可以放置以下代码:</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br>
      StateSaved = false;</p>
    <p class="dropspot">第一行创建1024字节的增长缓冲区(因为我们不知道保存的数据的最终大小)，并对齐为1字节。然后创建一个变量来检查游戏是否被保存(这将用于加载)。</p>
    <p class="dropspot">接下来，我们将添加一个<strong> 按键事件 </strong>(例如) ，其中我们将把当前游戏状态保存到创建的缓冲区:</p>
    <p class="code">StateSaved = true;<br>
      buffer_seek(SaveBuffer, buffer_seek_start, 0);<br>
      game_save_buffer(SaveBuffer);</p>
    <p class="dropspot">上述方法将首先将控制变量设置为<span class="inline">true</span>(这样当我们将游戏保存到缓冲区时就会保存它)，然后在将当前保存状态写入缓冲区之前查找缓冲区的起点。为什么使用<a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>?正如在本页中已经提到的，从数据被添加到缓冲区的最后一个位置读取和写入缓冲区。这意味着，如果你不设置 buffer tell 回到开始位置，那么当你保存时，你将在缓冲区当前读/写位置添加数据到缓冲区。因此，我们使用函数<span class="inline">buffer_seek()</span>将告诉移动到缓冲区开始。</p>
    <p class="dropspot">我们现在已经将当前游戏状态保存到缓冲区中。 下一步是编码如何加载它，可能是在另一个<strong>按键事件</strong>中：</p>
    <p class="code">if StateSaved<br>
      {<br>
      &nbsp; &nbsp; buffer_seek(SaveBuffer, buffer_seek_start, 0);<br>
      &nbsp; &nbsp; game_load_buffer(SaveBuffer);<br>
      }</p>
    <p class="dropspot">然后，游戏将在您放置上述代码的事件结束时加载。</p>
    <p class="note"><strong>注意</strong> : 这仅用于在同一个房间中使用，而不用于在游戏关闭或重新启动后生成完整的保存游戏！</p>
    <p class="dropspot">添加到控制器对象的最后一件事是一些“清理”代码。 缓冲区存储在内存中，因此，如果您在使用完缓冲区后不进行清理，则可能会出现内存泄漏，最终导致游戏滞后和崩溃。 因此，您可能会添加一个 <strong>房间结束事件</strong>（来自 <strong>其它</strong> 事件类别）：</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">现在可以将此对象放置到房间中，并在按键时从缓冲区保存和加载房间状态。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">Network Buffers</span><span data-close-text="true">Network Buffers</span> 网络缓冲区</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">在使用<span data-keyref="GameMaker Name">GameMaker</span><a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">网络函数</a>时，必须使用缓冲区来创建通过网络连接发送的数据包。本例旨在演示如何实现这一点，但由于网络可能性的范围，它仅设计为演示如何使用缓冲区本身，而不是完整的网络系统。</p>
    <p class="dropspot">我们将展示的第一件事是为网络连接的客户端创建和使用缓冲区。这个缓冲区将被用来创建小的数据包，然后发送到服务器，所以在实例的<strong>创建事件</strong>中，我们将像这样分配一个缓冲区:</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">我们使缓冲区很小(256字节)——因为它不打算保存大量的数据——然后我们使它成为一个增长缓冲区，以确保在任何时候需要添加更多的数据发送时不会出错，并将对齐设置为一是为了方便。</p>
    <p class="dropspot">现在，假设我们希望客户机向服务器发送数据。为此，我们需要创建一个缓冲 "包(packet)" ，在本例中，我们将发送一个<strong>按键事件</strong>，就像当玩家按<em>左箭头</em>在游戏中移动时。为此，我们先将必要的数据写入缓冲区，然后将其发送出去:</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br>
      buffer_write(buff, buffer_u8, 1);<br>
      buffer_write(buff, buffer_s16, vk_left);<br>
      buffer_write(buff, buffer_bool, true);<br>
      network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">在写入缓冲区之前，我们将“tell”设置为缓冲区的起点，因为网络总是从缓冲区的起点获取数据。然后写入检查值(服务器将使用该值来确定要处理的事件的类型)，然后写入正在使用的键，然后写入键的状态(在本例中，按下时为true)。这个缓冲区然后作为数据包由网络函数发送。注意，我们没有发送整个缓冲区!我们只发送写入的数据，使用buffer_tell函数返回缓冲区的当前读/写位置(记住，写入缓冲区将“tell”移动到已写入内容的末尾)。这只是为了避免发送多余的字节。</p>
    <p class="dropspot">如何接收服务器上的数据?接收到的数据包必须写入服务器上的缓冲区，然后用于更新游戏。为此，我们将在服务器的网络控制器对象中使用<a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">网络异步事件</a>，如下面的简化代码所示:</p>
    <p class="code">var buff = ds_map_find_value(async_load, "buffer");<br>
      if cmd == buffer_read(buff, buffer_u8);<br>
      {<br>
      &nbsp; &nbsp; key = buffer_read(buff, buffer_s16);<br>
      &nbsp; &nbsp; key_state = buffer_read(buff, buffer_bool);<br>
      }</p>
    <p class="dropspot">异步事件将包含一个特殊的临时DS map <span class="inline"> async_load</span>(它在事件结束时自动从内存中删除)，该映射包含不同的信息，具体取决于来自网络的传入数据的类型。在本例中，我们假设已经检查了映射并发现它是客户机发送的缓冲区数据包。现在，我们检查缓冲区中的第一块数据，看看发送了什么类型的事件 --在这种情况下，值“1”表示一个键事件，然而，当对这些事情进行编码时，您应该定义常量来保存这些值以简化事情 --然后存储被按下的键及其状态(<span class="inline">true</span> = 按下， <span class="inline">false</span> = 释放)。然后，此信息将用于使用发送客户端玩家的新状态更新所有客户端。</p>
    <p class="note"><strong>注意</strong>：从 DS map 创建的缓冲区会在网络异步事件结束时自动删除，因此无需在此处使用 <span class="inline" style="font-size: 14px">buffer_delete()</span>。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">额外的信息</a></div>
        <div style="float:right">Next: <a href="Bitwise_Operators.htm">位运算和二进制</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->

</body></html>