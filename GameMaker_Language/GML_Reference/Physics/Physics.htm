<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../..";
    gCommonRootRelPath = "../../..";
    gTopicId = "8.2.2.13";
  
//]]></script>

  <script type="text/javascript" src="../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Physics</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css">
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Reference section for physics functions">
  <meta name="rh-index-keywords" content="">
  <meta name="search-keywords" content="Physics">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Physics/The_Physics_World/The_Physics_World.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Time_Sources/call_cancel.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Physics">
        <span>Physics</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理</h1>
  <p><span data-keyref="GameMaker Name">GameMaker</span> 集成了专用的物理库，这意味着您现在可以控制游戏世界中对象物理行为的所有方面，尤其是碰撞和对象交互。"传统"碰撞系统(<span data-keyref="GameMaker Name">GameMaker</span> 默认为该系统)是"被动"系统，您可以在其中检查碰撞，<i>然后</i>对碰撞做出反应，并将代码放入各个对象中。这对于简单的游戏来说是可以的，但当你拥有大量的对象，并且必须对它们如何对游戏世界中的不同情况做出反应进行编码时，很快就会发现，这个系统只是不够。那时你必须求助于 <span data-keyref="GameMaker Name">GameMaker</span> 物理系统。</p>
  <p>物理系统的工作方式与普通碰撞完全不同。它更像是一个"被动"的系统，在游戏世界中，在发生任何碰撞或交互之前，您会为您的对象定义一系列属性，以及游戏世界本身的属性。然后，这些代码化的"规则"将控制游戏世界中的一切相互作用的方式。通过这种方式，使用几个简单的代码和正确的房间设置，您可以在对象和世界之间创建非常复杂的交互并解决，而<i>无需</i>为每个可能的结果编码。</p>
  <p>使用 <span data-keyref="GameMaker Name">GameMaker</span> 物理世界时，应注意以下几点：</p>
  <ul class="colour">
    <li><span data-keyref="GameMaker Name">GameMaker</span> 的物理系统与基本房间和实例结构"分开"，这意味着它的时间和函数不一定像其他任何东西那样与房间速度和步进顺序相关。</li>
    <li>物理系统取代了许多正常的实例函数。。。。。。例如，不是为某个实例设置速度和方向，如果它已被声明为完全模拟的物理身体，您将使用<i>力</i>或<i>脉冲</i>使其在游戏世界中移动，或者如果它未启用物理函数，则需要自己设置 X 和 Y 位置。这需要一点时间来适应，所以在尝试将它们集成到项目中之前，先试验一下物理函数并了解一切是如何工作的。</li>
    <li>您应该限制创建的实例数，以及物理世界必须处理的碰撞和碰撞组的数量。<i>不能</i>有成千上万的实例，所有这些实例都具有物理属性和碰撞，并且由于物理需要一些非常密集的计算，因此，请尽可能限制自己并进行优化。</li>
    <li>在设置碰撞时，尽量使用父对象，因为碰撞系统有有限的<i>碰撞位</i>可以分配给 Box2D 的实例来检测碰撞。例如，如果你有五个不同的墙体对象，不要检查五个碰撞，而是创建一个父对象，并将其分配给五个墙体，然后让一个碰撞检查与父对象进行碰撞。对象的物理属性<i>不会被继承</i>，只有碰撞会被继承。通过这种方式，你可以保持游戏的优化和解决错误。</li>
    <li>除了使用物理函数，尽量不要以任何方式将实例从房间的一个点移动到另一个点(即：不要手动设置 X/Y 坐标)。尽管可以这样做，而且在某些情况下可能是必要的，但由于它可能对物理引擎产生不可预测的结果，特别是在试图解决碰撞的时候，一般要避免这样做。</li>
    <li>绑定装置时应该小心，因为它们可以独立地绑定到对象和实例上。这意味着，如果你将一个装置绑定到(例如) "o_Wall"，<b>该对象的所有</b>实例都将获得该装置。如果你只想把装置绑定到一个实例上，那么在适当的函数中使用该实例的ID。</li>
    <li>请注意，由于浮点精度的差异，您可能会发现不同目标平台的游戏版本可能会表现出与标准 Windows 版本微妙不同的行为，尽管每个版本在后续执行过程中都会保持自我一致。</li>
    <li>为了防止物理模拟中的不稳定性，Box2D 对一个物体在一次更新中的旋转和平移量进行了上限限制。明显的限制将根据物理模拟的精度，按照物理世界的更新次数和更新速度，以及物理世界的缩放比例而变化。这意味着(例如)如果你有一个 60 的世界更新速度，最大的移动速度将是 20。</li>
  </ul>
  <p>有关物理函数的信息，请参阅以下页面：</p>
  <ul class="colour">
    <li><a href="The_Physics_World/The_Physics_World.htm">物理世界</a></li>
    <li><a href="Forces/Forces.htm">力</a></li>
    <li><a href="Fixtures/Fixtures.htm">装置</a></li>
    <li><a href="Joints/Joints.htm">关节</a></li>
    <li><a href="Soft_Body_Particles/Soft_Body_Particles.htm">柔体粒子</a></li>
    <li><a href="Physics_Variables/Physics_Variables.htm">物理变量</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>最后，有几个特殊的物理函数可能对更高级的物理模拟有用。第一个用于测试房间中特定点上的可能碰撞，第二个用于在实例中生成自定义质量和惯性属性：</p>
  <ul class="colour">
    <li><a href="physics_test_overlap.htm">physics_test_overlap</a></li>
    <li><a href="physics_mass_properties.htm">physics_mass_properties</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../GML_Reference.htm">GML Reference</a></div>
        <div style="float:right">Next: <a href="../In_App_Purchases/In_App_Purchases.htm">应用内购买</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Physics
Physics Functions
-->
  <!-- TAGS
physics_functions
-->

</body></html>