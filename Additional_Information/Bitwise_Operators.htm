<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "7.0_3";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Bitwise Operators</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css">
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page that explains how bitwise operators work">
  <meta name="rh-index-keywords" content="Bitwise Operators">
  <meta name="search-keywords" content="bitwise,bitwise operators">
<meta name="brsnext" value="Additional_Information/Type_Tables.htm"><meta name="brsprev" value="Additional_Information/The_File_System.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Bitwise Operators">
        <span>Bitwise Operators</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>位运算和二进制</h1>
  <p>在计算机时代初期，<strong>binary</strong>(二进制) 和 <strong>hex</strong>（十六进制）是一种生活方式，可能是因为高级语言（例如 BASIC）运行速度太慢。 例如，使用 BASIC 乘以 32 x 32 可能需要多个 CPU 周期才能实现，但对于二进制，它是在单个 CPU 周期中作为单个操作完成的。</p>
  <p>然而，如今，即使是基本 PC 的能力，您也不必再担心这一点，您可以“长途跋涉”，因为机器的速度及其更复杂的 CPU 结构将弥补这种方法的任何缺点。 这当然是个好消息，因为这意味着您不再需要优化您编写的每一行代码，但如果是这样的话 --您真的应该关心二进制吗？</p>
  <p>答案肯定是“是的，你应该”。虽然这是真的，你仍然可以得到一些速度 -有时可能是显著的 -使用二进制和十六进制可以更好地理解CPU如何运行，也可以写更好的代码，能够更好地打包数据，并使一些任务更简单。本文将解释什么是二进制文件，以及如何在制作游戏时使用它。</p>
  <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">注意</span></span> 要用 GML 编写二进制文字，请在它们前面加上 <span class="inline2">0b</span>( 例如，<span class="inline2">0b0010</span>)。有关详细信息，请参阅<a href="../GameMaker_Language/GML_Overview/Data_Types.htm">数据类型</a>。</p>
  <p>让我们先来看看最基本的二进制理论 - 数字是如何产生的。看看这张表：</p>
  <p class="code">000 = 0<br>
    001 = 1<br>
    010 = 2<br>
    100 = 4</p>
  <p>每个1或0代表一<a class="tooltip" title="单个数据值，可以是1或0（是或否）。将位组合为8个块以创建一个字节。">位(bit)</a>的数据，正如您所看到的，这意味着在二进制中，10等于2! 每个位是前一个值的2倍，第一个位等于1。所以 比特 2 = 2， 比特 3 = 4，比特 4 = 8，以此类推(如下面的<a class="tooltip" title="字节是八位二进制数字长的数据单位，组成一个字节的每个数字都称为位，即：字节是8位，位可以是1或0。">字节(byte)</a>表所示):</p>
  <p class="code">00000001 = 1<br>
    00000010 = 2<br>
    00000100 = 4<br>
    00001000 = 8<br>
    00010000 = 16<br>
    00100000 = 32<br>
    01000000 = 64<br>
    10000000 = 128</p>
  <p>如果你想要的是2的幂，这没问题，但是我们如何创造更复杂的数呢?一个二进制数只能存储0或1，就是这样，所以对于更复杂的数，我们需要将位相加。例如，如果我们想要6，我们就像这样把4和2相加。</p>
  <p class="code">00000010 = 2<br>
    00000100 = 4<br>
    00000110 = 6</p>
  <p><strong>所有</strong>二进制数都是如此，计算机如何在内部组成任何数字也是如此。让我们举一个稍微复杂一点的数字作为进一步的例子:23。数字23实际上是由<span class="inline">1+2+4+16</span>或<span class="inline">00010111</span>组成的。再举一个更复杂的例子:196?这是由<span class="inline">128+64+4</span>或<span class="inline">11000100</span>组成的。所以实际上它没有那么复杂!</p>
  <p>但是，如果我们开始处理字节范围之外的值(可以存储从0到255的数字)，跟踪就会变得有点困难。例如，217,361的二进制格式是<span class="inline">1101010001000100010001</span>。或者,<span class="inline">1 + 16 + 256 +等等……</span>无论要表示的值是什么，规则都是一样的 --每个数字都是由多个位相加而成。</p>
  <p>现在，我们如何对这些值执行数学运算呢?假设您想将<span class="inline">true</span>或<span class="inline">false</span>存储为值。通常编译器会使用<span class="inline">INT</span> (<span class="inline">INT</span>通常被定义为有符号的32位数 --有符号仅仅意味着它可以是正的或负的值，而无符号意味着它只能是正的)，然后简单地将它赋值给<span class="inline">0</span>或<span class="inline">1</span>。由于只有2个状态，<span class="inline">true</span> / <span class="inline">false</span>值理想地存储在一个位中，如果我们这样做，我们可以为每个<span class="inline">INT</span>存储32个 <span class="inline">true</span> / <span class="inline">false</span> 位，而不是只有一个，因为<span class="inline">INT</span>由32个位组成。</p>
  <p>我们该怎么做呢? 很容易就会发现:</p>
  <p class="code">flags = flags | 1;</p>
  <p>“<span class="inline">|</span>” 运算符是按位<span class="inline">或(OR)</span>，这意味着上述指令将 1 与变量<span class="inline">flags</span>中保存的值进行<span class="inline"> or </span>运算。 如果您还记得之前的内容，使用 1 将设置第一位。 如果我们想设置第二位，我们会这样做：</p>
  <p class="code">flags = flags | 2;</p>
  <p>我们在 2 中进行 <span class="inline">OR</span>，因为位模式 <span class="inline">00000010</span> 等于 2。那么二进制 <span class="inline">OR</span> 运算符到底做了什么？ 好吧，它将所有位合并为一个值，如下所示：</p>
  <p class="code">010110100 // Value 1<br>
    110011001 // value 2<br>
    110111101 // Value 1 OR Value 2</p>
  <p>以下是 OR 运算符的<a class="tooltip" title="真值表是在逻辑中使用的数学表-特别是与布尔代数和布尔函数结合使用的表-列出逻辑表达式在每个函数自变量上的函数值，即针对其逻辑变量取值的每种组合。">真值表</a>：</p>
  <p class="code">00 | 00 = 00<br>
    00 | 01 = 01<br>
    01 | 01 = 01<br>
    01 | 00 = 01</p>
  <p>所以当一个值有两个0时，它将保持为0。使用这样的位作为<span class="inline">true</span>/<span class="inline">false</span>状态的好处是，你可以在一个操作中设置多个位作为“flags”，这是用普通布尔值无法做到的。例如，我们假设位1是一个“active”标志，位3是一个“visible”标志。我们可以通过这样做来设置两者:</p>
  <p class="code">flags = flags | 5<span class="inline"></span>;</p>
  <p>这是因为5在二进制中是<span class="inline">00000101</span>，按照上面的规则，变量“flags”将得到这两个位与其自己的位合并。因此，即使位1已经被设置，操作仍然有效，位3现在也将被设置。</p>
  <p>清除标志呢?这就是 位 和 "<span class="inline">&amp;</span>"&nbsp;<span class="inline">AND</span> 运算出现的地方。当你<span class="inline"> AND </span>某物时，掩码中设置的位将被保留，而掩码中明确的位将被删除——像这样:</p>
  <p class="code">01110010101 // Value 1<br>
    00110000100 // Value 2<br>
    00110000100 // Value 1 AND value 2</p>
  <p>如您所见，如果每个值中有一个 1，则保留 1，如果有 0 和 1 的混合，这些值将重置为 0。以下是 <span class="inline">AND</span> 的真值表：</p>
  <p class="code">00 &amp; 00 = 00<br>
    01 &amp; 00 = 00<br>
    00 &amp; 01 = 00<br>
    01 &amp; 01 = 01</p>
  <p>所以，只有当每个地方都有一个比特时，它才会被保留。 这意味着，就像您可以一次设置多个标志一样，您也可以一次清除多个标志。 例如，让我们以上面的案例为例，但这次清除它们。 我们想清除位 1 和位 3（给我们值 5），但记住上面的真值表，我们要做的是保留所有其他位，并清除位 1 和位 3。这将是一个二进制“掩码” " 的 1111111111111111111111111111010（32 位）。 此掩码保留当前设置的所有位，但清除我们实际要清除的两个位。 因此，如果值为 1000111011 并且我想使用上面的掩码清除位 1 和位 3，它最终会变成这样......</p>
  <p class="code">00000000000000000000001000111011 // Value<br>
    11111111111111111111111111111010 // Mask<br>
    00000000000000000000001000111010 // Value AND Mask</p>
  <p>这很好，但如果我们每次需要清除标志时都必须解决这个问题，那将变得很烦人。 我们需要的是一种轻松翻转位的方法（最好是没有 CPU 成本）。 幸运的是，通过使用“<span class="inline">~</span>”<span class="inline">NOT</span> 运算符，有一种简单的方法可以做到这一点。</p>
  <p>位反 <span class="inline">NOT</span> 运算符正如它所说的那样 -<em>取反</em> 这些位。 这是 <span class="inline">NOT</span> 的真值表。</p>
  <p class="code">~00 = 11<br>
    ~01 = 10<br>
    ~10 = 01<br>
    ~11 = 00</p>
  <p>这个运算符使删除标志变得非常简单，而且更好的是，它通常是编译时优化，这意味着如果您使用常量（即不是变量），那么编译器会自动为您翻转这些位。 在我们要再次清除位 1 和位 3 的地方使用此语句：</p>
  <p class="code">a = a &amp; ~5;</p>
  <p>这实际上将编译为“<span class="inline">11111111111111111111111111111010</span>”。 就清除标志而言，这使生活变得非常简单。</p>
  <p>我们要查看的最后一个运算符是“<span class="inline">^</span>”<span class="inline">EOR</span>（<span class="inline">异或</span>，有时称为 <span class="inline">XOR</span>），此运算符翻转两个值中设置的位。 这是 <span class="inline">EOR</span> 真值表：</p>
  <p class="code">0 ^ 0 = 0<br>
    0 ^ 1 = 1<br>
    1 ^ 0 = 1<br>
    1 ^ 1 = 0</p>
  <p>这是一个奇怪的，但非常有用。 例如，假设我们想要一个简单地从 0 计数到 1 再计数到 0（在 0 和 1 之间切换）的计数器，我们可以加一个并执行 <span class="inline">IF</span> 以查看它是否达到 2，然后 将其重置回 1。或者...我们可以加 1，然后将其与 1 <span class="inline">AND</span>（因为 <span class="inline">01+01 = 10</span>，并且 <span class="inline">10 &amp; 01 = 0</span>）或者我们 可以这样做：</p>
  <p class="code">a = a ^ 1;</p>
  <p>它第一次运行时的作用是 <span class="inline">0 ^ 1 = 1</span>，第二次运行时是 <span class="inline">1 ^ 1 = 0</span>，从而在 0 和 1 之间来回切换。</p>
  <p>所以 - <span class="inline">OR</span> (<span class="inline">|</span>)、<span class="inline">AND</span>(<span class="inline">&amp;</span>)、<span class="inline">NOT</span>(<span class="inline">~</span>) 和 <span class="inline">EOR</span>(<span class="inline"> ^</span>) 让我们相对轻松地操作位，允许我们在最简单的级别上一次控制多个位。 在开发游戏时，我们显然可以将这些操作用于其他事情，例如精灵遮罩、执行整数 <span class="inline">MOD</span> 操作（使用 <span class="inline">AND</span>）或执行漂亮的循环计数器。</p>
  <p>所以，我们可以做简单的位运算，但让我们看看更复杂的东西，从这个问题开始，计算机如何加？ 我们来看一个非常简单的示例：<span class="inline">1+1</span>。</p>
  <p class="code">00000001<br>
    00000001<br>
    00000010</p>
  <p>就像普通的加法一样，我们将数字加在一起然后溢出到下一列，但与普通的十进制加法不同的是，我们只能从 0&nbsp;到 1，而不是 0 到 9。因此添加 <span class="inline">1+1</span> 意味着我们溢出到 <span class="inline">10</span>。 那么让我们看一个更复杂的例子。</p>
  <p class="code">01011011 = 91<br>
    00101101 = 45<br>
    10001000 = 136</p>
  <p>此处显然更难看到，但溢出会一直波动，直到列中没有任何数字。值得注意的是，计算机一次只能加（或减、乘或除）2 个数字。以 <span class="inline"> 19 + 19 + 19</span>为例，作为人类，我们可以将所有 9 加在一起，带着 2，然后继续！ 但计算机无法做到这一点 - 它们可以做到的是：<span class="inline"> (19 + 19) + 19</span>。 所以他们将以 2 个为一组进行每个计算。</p>
  <p>作为程序员，我们最感兴趣的二进制计算是乘法和除法。计算机只能乘2次幂，如果要做更多，它会把一个数字拆开，然后把所有结果加在一起。让我们先看一些非常简单的例子。<span class="inline">4 * 2 = 8</span>。现在要在二进制中乘以2，我们<em>将</em>的所有位左移1。是这样的:</p>
  <p class="code">00000100 * 2 = 00001000 = 8</p>
  <p>在这种情况下，所有位都向左移动了一个位，使其从第3位移动到第4位，并将值从4改为8。要不要更大的数字？</p>
  <p class="code">101 = 01100101 * 2 = 11001010 = 202</p>
  <p>同样，所有的位都移动到1，然后乘以2。那么乘以4呢?很简单，所有东西向左移2，而不是1。那么16或128呢?这将需要分别左移4位或7位。这是非常有用的;这意味着我们可以通过移动位元来做简单的乘法。为此，我们使用<strong>左移</strong>&nbsp;操作符<span class="inline">&lt;&lt;</span>。下面是一些例子:</p>
  <p class="code">00000001 &lt;&lt; 1 = 000000010 = 2<br>
    00000001 &lt;&lt; 2 = 000000100 = 4<br>
    00000001 &lt;&lt; 3 = 000001000 = 8<br>
    00000001 &lt;&lt; 4 = 000010000 = 16<br>
    00000001 &lt;&lt; 5 = 000100000 = 32<br>
    00000001 &lt;&lt; 6 = 001000000 = 64<br>
    00000001 &lt;&lt; 7 = 010000000 = 128<br>
    00000001 &lt;&lt; 8 = 100000000 = 256</p>
  <p>现在，除了对于快速/简单的乘法非常有用之外，它对于设置特定的位也非常有用，而不需要计算位值。假设我们要设置位27，那是多少?(顺便说一下，67108864 !)，我们可以使用上面的语法像这样轻松地设置标志:</p>
  <p class="code">a = a&nbsp;| (1 &lt;&lt; 27)</p>
  <p>好吧……所以实际上这应该是26位，就像我们之前描述的那样(因为比特都是从1开始的)，但是实际上…位从位0开始，然后往上走，而不是位1。因此，虽然INTEGER中有32位，但位的范围从0到31，而不是1到32。这实际上是非常有用的，因为我们现在可以为位数设置常数。</p>
  <p>所以我们说第27位是一个 active 标志，第0位是一个 exploding 标志。如何同时设置两者?</p>
  <p class="code">ACTIVE = 27;<br>
    BOOM = 0;<br>
    A = A | (1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM);</p>
  <p>这看起来可能有很多代码，但是如果这些数字是常量，编译器将预先将这些操作编译为单个值，这样我们就得到了实际的代码。</p>
  <p class="code">A = A | 13421772;</p>
  <p>清除这些位(如上所述)只需使用NOT修饰符，如下所示:</p>
  <p class="code">A = A &amp; ~((1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM));</p>
  <p>这让我们可以设置和清除我们想要的任何位，也让我们可以大规模地压缩数据结构。压缩数据结构是一件好事，因为如果您使用更少的内存，缓存丢失就会更少，代码运行得更快。这么说吧，哪个更快，复制32mb数据还是4Mb数据?很明显，4是。因此，如果您可以将所有标记打包到一个内存访问中，这是很好的!</p>
  <p>现在，让我们快速看一下如何做除法，以及为什么它会这么有用。除法是通过使用<em>右移</em>&nbsp;操作符<strong>&gt;&gt;</strong>移动位<span class="inline">右移</span>&nbsp;来完成的。让我们取一个简单的数字 -64 -除以32:</p>
  <p class="code">64 / 32 = 01000000 &gt;&gt; 5 = 00000010</p>
  <p>因此，在这里，您将单个位向下移动5(这是32所需的移动数-看上面)，得到2。但是如果这里还有其他的比特呢?让我们来看看:</p>
  <p class="code">68 / 32 = 01000100 &gt;&gt; 5 = 00000010</p>
  <p>这就是....完全一样。我们向下移动的比特就这样丢失了。这其实很有用，因为在除法的时候如果我们需要余数，还有一种更简单的方法，我们马上就会讲到。但首先，让我们看一个实际的例子。我有一个X和Y的位置，我想要得到它所在的网格单元格，网格的大小是32x32。这种方法允许存储对象, 碰撞, 标志 -所有的东西，并非常快速地访问它们。所以我们开始:</p>
  <p class="code">var X_index = x &gt;&gt; 5;<br>
    var Y_index = y &gt;&gt; 5;<br>
    cell_data = mygrid[# X_index,Y_index];</p>
  <p>如果我们想要余数呢?也许这个余数被用作某种顺序标志或其他东西。无论什么原因，获得一个余数就像执行<span class="inline">AND</span>一样简单:</p>
  <p class="code">var remainder = x &amp; 31<br>
    var X_Index = x &gt;&gt; 5;</p>
  <p>现在，您可能已经注意到我们在这里使用了多行代码(这是很常见的情况)，但这仍然只是几个非常快速的指令。但为什么是31?因为第5位是32，那么下面的所有位都是31，这就是最大余数所以我们用<span class="inline">和</span>(我们也可以用<span class="inline">(1 &lt;&lt;5) - 1</span>&nbsp;使<span class="inline">32 - 1 = 31</span>)。现在，如果我在不理解二进制的情况下做这个，它会是这样的:</p>
  <p class="code">var r = x mod 32;<br>
    var X_Index = floor(x / 32);</p>
  <p>那么为什么会更糟呢？ 那么，为了除以 32，我们必须执行浮点除法 - 这显然需要时间，但为了执行 <span class="inline">mod 32</span>，您实际上必须执行另一个！ 如果我们在汇编程序中执行此操作，我们实际上会在一次除法中获得两个值，但您不会在高级语言中获得此值（好吧……不经常），因此您必须将所有工作做两次。 这会累加起来，尤其是当您正在执行一个包含大量此类计算的紧密循环时。 如上所示，使用位移位进行整数除法确实有助于优化您的游戏。</p>
  <p>由于这可能是一个非常复杂的概念，要掌握然后应用到现实世界的编程情况，您可以在下面找到一系列简短的示例，这些示例可以应用于使用 <span data-keyref="GameMaker Name">GameMaker</span> 制作的任何游戏。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Tile Alignment</span><span data-close-text="true">Tile Alignment</span> 图块对齐</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span> 开发者通常使用 <span class="inline">place_free()</span> 函数，然后在发现碰撞时尝试通过围绕 <span class="inline">x</span> 或 <span class="inline">y</span> 循环慢慢移出对象 位置，同时继续执行该函数，或使用 <span class="inline">move_outside_all()</span> 函数。</p>
    <p class="dropspot">那么，更快的方法是什么呢?如果我们使用合适的2次方图块，那么我们就有了一个非常简单的方法，而且速度非常快。如果我们向右移动，我们已经移动到一个碰撞块，那么我们知道所有东西都对齐为32，所以我们也需要将精灵对齐为32像素的边界 -最好是左边的一个 -这样精灵就会移出碰撞。这真的很简单，知道了上面我们用来求余数的规则，也知道了如何求位的取反，我们可以简单地这样做:</p>
    <p class="code">x = x &amp; ~31;</p>
    <p class="dropspot">没错，这就是对齐 32 像素边界所需的全部。 通过更改 31，我们可以对齐任何我们喜欢的东西 --只要它是 2 的幂。（这相当于除以 32，然后乘以 32，从而删除低位。）</p>
    <p class="dropspot">如果我们想要向右对齐，那么我们可以执行上面的操作，但添加32将其移动到下一个贴图。简单。所有这些都使整个碰撞代码大大加快，并让您将CPU时间花在真正需要它的地方。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">Keys And Doors</span><span data-close-text="true">Keys And Doors</span> 钥匙和门</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">假设你有一层有几扇门，每扇门都有一把钥匙。如何方便地标记特定门的钥匙?通常你只需要给钥匙和门分配一个ID。那么，如果你想要一把钥匙打开2或3扇门呢?一件容易的事。你使用一个面具。门将有一个位像这样分配:<br>,</p>
    <p class="code">door_id = 1; // 0001</p>
    <p class="dropspot">其他的应该是:<br></p>
    <p class="code">door_id=2; // 0010<br>
      door_id=4; // 0100<br>
      door_id=8; //&nbsp;1000<br>
      etc...</p>
    <p class="dropspot">如果我们想让钥匙打开门1和3，那么钥匙的蒙版值将为5(二进制值为101)。如果我们执行这个的<span class="inline">AND</span>，结果是"非零"，那么我们就知道这个钥匙可以开门。您也可以通过蒙版为0来拥有不打开任何内容的钥匙。查看下面的代码进行实际检查:</p>
    <p class="code">if ((key_id &amp; door_id) ! = 0)<br>
      {<br>
      &nbsp; &nbsp; opendoor();<br>
      }</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Looping Counters</span><span data-close-text="true">Looping Counters</span> 循环计数器</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">假设我们想要一个简单的动画计数器，从 0 到 15（因为我们有 16 帧动画）。通常你会做一个增量，然后做一个 <span class="inline">if</span> 检查来包装数字，但是 对于此示例，让我们使用 <span class="inline">AND(&amp;)</span> 运算符：</p>
    <p class="code">counter = (counter + 1) &amp; 15;</p>
    <p class="dropspot">由于 16 是 2 的幂，我们可以将该数字减 1 并将其用作掩码，然后我们可以使用它来循环我们的计数器值。 如果计数器从 15 上升到 16，我们以位模式 <span class="inline">10000</span> 结束，如果我们 <span class="inline">AND</span>&nbsp;15（位模式 <span class="inline">01111</span>），我们以 <span class="inline"> 结束 00000</span>（简单为零）。 这意味着上面的代码对于将值循环在 2 的幂范围内很有用。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">Power Of 2 Check</span><span data-close-text="true">Power Of 2 Check</span> 检查2的次方</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">如果你想检查某物是否是 2 的幂怎么办？ 好吧，这里有一个巧妙的小技巧。如果给定值是 2 的幂，这将返回 <span class="inline">true</span>：</p>
    <p class="code">function is_pow2(_val)<br>
      {<br>
      &nbsp; &nbsp; return _val &amp; (_val - 1)) == 0;<br>
      }</p>
    <p class="dropspot">那么，如果我们有数字 51 (<span class="inline">110011</span>)，它会做什么？ 好吧，我们明白了……<span class="inline">110011 &amp; 110010</span>，这显然给我们留下了 <span class="inline">false</span>，因为在 <span class="inline">AND</span> 之后还有很多位&nbsp;。 如果我们有 64 (<span class="inline">1000000</span>)，那么它就变成了这个……<span class="inline">1000000 &amp; 0111111</span> 它<em>确实</em>给我们留下了 0，所以它是<span class="inline">true</span>。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">Index Alignment</span><span data-close-text="true">Index Alignment</span> 索引对齐</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">这里有一段快速代码，用于对齐 2 的幂。 （1、2、4、8、16 等）。 这对于内存分配或确保将数据写入正确的边界非常有用。 在此示例中，<span class="inline">_val1</span>需要与 <span class="inline">_val2</span> 字节对齐，其中 <span class="inline">_val2</span> 是 2 的幂数。 这个小函数向上舍入到所需数字的下一个边界。</p>
    <p class="code">function align_pow2(_val1, _val2)<br>
      {<br>
      &nbsp; &nbsp; return _val1 + (_val2 - 1)) &amp; ~(_val2 - 1);<br>
      }</p>
    <p class="dropspot">&nbsp;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">额外的信息</a></div>
        <div style="float:right">Next: <a href="Type_Tables.htm">Type&nbsp;Tables</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Bitwise Operators
-->
  <!-- TAGS
bitwise_operators
-->

</body></html>