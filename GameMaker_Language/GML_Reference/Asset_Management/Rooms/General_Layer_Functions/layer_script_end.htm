<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../../..";
    gCommonRootRelPath = "../../../../..";
    gTopicId = "8.2.2.3.14.1.0_32";
  
//]]></script>

  <script type="text/javascript" src="../../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>layer_script_end</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css">
  <script src="../../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining the function layer_script_end">
  <meta name="rh-index-keywords" content="layer_script_end">
  <meta name="search-keywords" content="layer_script_end">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_shader.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_script_begin.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="layer_script_end">
        <span>layer_script_end</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">layer_script_end</span></h1>
  <p>使用此函数，可以将<a href="../../../../GML_Overview/Script_Functions.htm">脚本函数</a>分配给层，并在渲染该层后调用该函数。以这种方式将函数添加到层时，它将在<i>每个不同绘制事件</i>的末尾运行，因此您可能希望签入分配的函数，哪个事件当前已完成渲染，并调整代码以适应。这可以通过检查<a href="../../Objects/Object_Events/event_type.htm"><span class="inline">event_type</span></a>和/或<a href="../../Objects/Object_Events/event_number.htm"><span class="inline">event_number</span></a>(参见下面的扩展示例)来完成。请注意，函数<i>不是</i>意在在任何绘制事件或步骤事件中调用，而只是需要在<strong>房间创建代码</strong>或实例的<strong>创建事件</strong>/<strong>房间开始事件</strong>中的房间开始{}开始时调用。</p>
  <p>&nbsp;</p>
  <h4>语法:</h4>
  <p class="code"><span data-field="title" data-format="default">layer_script_end</span>(layer_id, script);</p>
  <table>
    <tbody>
      <tr>
        <th>参数</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>layer_id</td>
        <td><span data-keyref="Type_String"><a target="_blank" href="../../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">String</a></span>&nbsp;or&nbsp;<span data-keyref="Type_ID_Layer"><a target="_blank" href="../../../../../../GameMaker_Language/GML_Reference/Asset_Management/Rooms/General_Layer_Functions/layer_get_id.htm">Layer ID</a></span></td>
        <td>目标层的唯一ID值(或作为字符串的层名)</td>
      </tr>
      <tr>
        <td>script</td>
        <td><span data-keyref="Type_Function_Script"><a target="_blank" href="../../../../../../GameMaker_Language/GML_Overview/Script_Functions.htm">Script Function</a></span></td>
        <td>分配给层的脚本函数索引</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <h4>返回:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p>&nbsp;</p>
  <h4>扩展示例：</h4>
  <p>在这个扩展示例中，我们首先演示如何构造一个简单的脚本函数来设置一些着色器统一数据，这样绘制给定层时，该函数将运行，并且着色器将正常工作。在本例中，值得注意的是，我们如何检查正在调用的事件，以便函数的其余部分仅运行在本例中需要它工作的特定事件上，仅运行在主绘制事件上：</p>
  <p class="code">/// @function layer_shader_start();<br>
    function&nbsp;layer_shader_start()<br>
    {<br>
    &nbsp; &nbsp; if event_type == ev_draw<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; if event_number == ev_draw_normal<br>
    &nbsp; &nbsp; &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; colour_to_find = shader_get_uniform(sShaderDemo5, "f_Colour1");<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; colour_to_set = shader_get_uniform(sShaderDemo5, "f_Colour2");<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;shader_set(s_ColourChanger);<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;shader_set_uniform_f(colour_to_find, 1, 1, 1);<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;shader_set_uniform_f(colour_to_set, 1, 0, 0);<br>
    &nbsp; &nbsp; &nbsp; &nbsp; }<br>
    &nbsp; &nbsp; }<br>
    }</p>
  <p>然后，在完成所有绘制后，我们将使用一个配套函数重置着色器：</p>
  <p class="code">/// @function layer_shader_end();<br>
    function&nbsp;layer_shader_end()<br>
    {<br>
    &nbsp; &nbsp; if event_type == ev_draw<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; if event_number ==&nbsp;ev_draw_normal<br>
    &nbsp; &nbsp; &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;shader_reset();<br>
    &nbsp; &nbsp; &nbsp; &nbsp; }<br>
    &nbsp; &nbsp; }<br>
    }</p>
  <p>既然我们已经定义了设置着色器的脚本函数，那么我们必须将它们分配给特定层，以便层知道调用它们。这将在房间创建代码中完成，或在某些控制器对象的创建事件或房间开始事件中完成(它们不需要每个步骤都设置，而是在房间开始或最初创建层时设置一次)：</p>
  <p class="code">var lay_id = layer_get_id("Instances");<br>
    layer_script_begin(lay_id, layer_shader_start);<br>
    <span data-field="title" data-format="default">layer_script_end</span>(lay_id, layer_shader_end);
  </p>
  <p>最后一个代码块将脚本分配给层。</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="General_Layer_Functions.htm">常规图层函数</a></div>
        <div style="float:right">Next:&nbsp;<a href="layer_shader.htm">layer_shader</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
layer_script_end
-->
  <!-- TAGS
layer_script_end
-->

</body></html>