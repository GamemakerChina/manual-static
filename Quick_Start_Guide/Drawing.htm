<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="..",gTopicId="2.0_8"</script><script type="text/javascript" src="../template/scripts/rh.min.js"></script><script type="text/javascript" src="../template/scripts/common.min.js"></script><script type="text/javascript" src="../template/scripts/topic.min.js"></script><script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Drawing</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../assets/css/default.css" type="text/css"><script src="../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Some basic code to show people how things are drawn."><meta name="rh-index-keywords" content="Quick Start - Drawing"><meta name="search-keywords" content="drawing,draw event,GUI layer"><meta name="robots" content="NOODP"><meta name="brsnext" value="Quick_Start_Guide/Movement_And_Controls.htm"><meta name="brsprev" value="Quick_Start_Guide/Rooms.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Drawing"><span>Drawing</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1>绘制</h1><p>本部分 (以及下一节关于<a href="Movement_And_Controls.htm">运动和控制</a>的内容) 旨在为您提供 GML 或 GML 可视化的实用示例，使您能够尽快开始制作您的第一个游戏项目。我们不会太深入地解释事情，因为我们希望你尽快开始制作东西，所以我们鼓励你在进行过程中探索任何链接，并使用手册的 " 搜索 " 功能来寻找关于任何你不确定的东西的额外信息。</p><p>在本节中，我们将专注于将信息以文本和图像的形式简单地绘制到屏幕上，还将更多地解释不同的<strong>绘制事件</strong>，特别是主<strong>绘制</strong>&nbsp;事件和<strong>绘制图形用户界面</strong>事件(请注意，在某些示例中，您将需要添加其他事件，但我们将在介绍这些事件时对其进行解释)。</p><p><img alt="The Draw Events" class="center" height="378" src="../assets/Images/QS_Guide/QS_DrawEvents.png" width="268"></p><p>在继续之前，您可能希望从 <a href="../Introduction/The_Start_Page.htm">开始页</a> 创建一个新项目 (GML 或 GML 可视化)，并添加 (或创建) 几个精灵以及一个或两个对象，因为我们将提供一些代码，您可以使用这些代码进行测试。即使是白色正方形现在也可以作为我们的对象的精灵！</p><p>现在，正如在<a href="Objects_And_Instances.htm">对象和实例</a>一节中提到的，如果您不将绘制事件添加到对象，则<span data-keyref="GameMaker Name">GameMaker</span>将默认绘制，这意味着如果为对象指定了一个精灵，则将绘制该精灵，并完成已添加的所有变换。我们所说的变形是什么意思？嗯，每个对象都有许多内置的<a class="tooltip" title="变量是程序中的命名值，可以在需要时对其进行修改，存储和显示。例如，如果我们有一个名为XYZ的整数变量，并且它存储的值为10，则可以执行A = XYZ + 10之类的操作，这将把变量A的值设置为20，因为XYZ为10，我们正在添加10。您还可以使用运算符更改变量值，因此XYZ = XYZ + 100会将XYZ变量的值修改为等于110。变量也可以用于存储标识符和对不同资源的引用。">变量</a><span class="glossextra"></span>，它们将控制对象的实例在默认绘制时如何绘制其精灵，您可以在游戏运行时更改这些变量来更改绘制精灵的方式。</p><p class="note"><strong>注意</strong>：您可以在<a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm">此处</a>找到可用于转换实例精灵的所有内置变量的列表。GML 可视化用户有一些影响这些变量的专用操作，您可以在<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Drawing_Actions.htm">此处</a>找到这些操作，您还可以将实际变量本身与<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Variable.htm">获取实例变量</a>和<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Variable.htm">设置实例变量</a>操作一起使用。</p><p>让我们来看一些例子：</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#"><span data-open-text="true" data-skip-index="true">更改 Alpha (透明度)</span><span data-close-text="true">更改 Alpha (透明度)</span></a></p><div class="droptext" data-targetname="drop_down"><p class="dropspot"><strong>Alpha</strong> 值控制正在绘制的内容的透明度，在 <span data-keyref="GameMaker Name">GameMaker</span> 中，您可以使用内置变量 <span class="inline">image_alpha</span> 更改指定的精灵的透明度。要了解这是如何工作的，请打开 (或创建) 一个对象，为其指定一个精灵，然后为该对象指定一个 <strong>创建事件</strong> 。在创建事件中，只需添加以下 GML 可视或 GML：</p><p class="dropspot"><img alt="GML VisualDraw Example For Transparency" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_1.png"></p><p class="code">var _val = random(1);<br>image_alpha = _val;</p><p class="dropspot">图像 Alpha 的计算范围为 0 到 1 之间的值，其中 0 表示完全透明，1 表示完全不透明 (默认情况下设置为 1)。因此，在本例中，我们要做的就是将图像 Alpha 设置为从 0 到 1 的随机十进制值。将此对象的几个实例放置在房间中，然后单击 IDE 顶部的<strong>播放</strong>按钮 <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">&nbsp;。</p><p class="dropspot">您应该看到该对象的每个实例使用不同的透明度绘制其精灵，例如：</p><p class="dropspot"><img alt="Example Of Sprites Drawn With Different Alpha Values" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_1.png"></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#"><span data-open-text="true" data-skip-index="true">更改颜色混合(调色)</span><span data-close-text="true">更改颜色混合(调色)</span></a></p><div class="droptext" data-targetname="drop_down1"><p class="dropspot">当您的对象是默认绘制一个精灵时，这个精灵实际上是用一种颜色来绘制的 <strong>混合</strong> ( 或 <strong>着色</strong> )，并且该颜色值存储在 <span class="inline">image_blend</span> 内置变量中。默认情况下，此颜色为白色，这基本上意味着当精灵显示在屏幕上时，不会添加任何颜色。但是，您可以使用其他颜色来实现特殊效果，例如，使用红色来表示实例受到了一些损害。</p><p class="dropspot">在本例中，我们将在按住某个键的同时将不同的颜色与精灵混合，因此您需要打开(或创建)一个对象，为其指定一个精灵，然后为该对象指定一个<strong>按下键&lt;空格&gt;事件</strong>。</p><p class="dropspot"><img alt="Add Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png"></p><p class="dropspot">在此按下键事件中，添加以下 GML 可视或 GML：</p><p class="dropspot"><img alt="GML VisualExample Using Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_2.png"></p><p class="code">var _col = choose(c_red, c_green, c_blue, c_yellow, c_fuchsia, c_orange);<br>image_blend = _col;</p><p class="dropspot">将此对象的几个实例放置在房间中，然后单击IDE顶部的播放按钮 <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">，并测试按住并松开<em>空格</em>键。您应该会看到，按住按键的同时，每个实例都会快速更改其颜色，并在释放时停止更改：</p><p class="dropspot"><img alt="Example Showing Colour Blending" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_2.png"></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#"><span data-open-text="true" data-skip-index="true">更改比例</span><span data-close-text="true">更改比例</span></a></p><div class="droptext" data-targetname="drop_down2"><p class="dropspot">我们可以为精灵更改的另一个属性是 <strong>比例</strong> 值，允许我们随时根据需要将其绘制得更大或更小。比例是由两个独立的变量沿 X 和 Y 轴独立计算的，即 <span class="inline">image_xscale</span> 变量和 <span class="inline">image_yscale</span> 变量。默认情况下，这些值设置为 1，它们的作用类似于 <strong>倍增</strong> ，因此值 0.5 将是比例的一半，值 2 将是比例的两倍。</p><p class="note"><strong>重要！</strong> 使用这些变量更改指定的精灵比例<strong>也会更改边界框的大小以匹配</strong>，这意味着精灵的碰撞检测区域也将缩放。</p><p class="dropspot">在本例中，我们将使用一些简单的数学运算来使一个实例在循环中上下缩放精灵。首先，打开(或创建)一个对象，为其指定一个精灵，然后为该对象指定一个<strong>创建事件</strong>。在这种情况下，添加以下内容：</p><p class="dropspot"><img alt="GML VisualSet Variable Example" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_1.png"></p><p class="code">timer = 0;</p><p class="dropspot">现在向对象添加一个<strong>步事件</strong>，如下所示：</p><p class="dropspot"><img alt="GML VisualActions To Change Sprite Scale" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_2.png"></p><p class="code">timer = timer + 1;<br>var _val = dsin(timer);<br>image_xscale = 1 + _val;<br>image_yscale = 1 + _val;</p><p class="dropspot">在这里，我们使用数学函数 <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm"><span class="inline">dsin()</span></a> 通过定时器变量生成一个介于 -1 和 1 之间的值，然后将其应用于刻度变量。在将一些实例放置到房间中并按下 <strong>播放</strong> 按钮 <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png"> 后，您应该会看到这些实例是如何从 0 的比例缩放到 2 的比例，然后再缩放回来的。</p><p class="dropspot"><img class="center" src="../assets/Images/QS_Guide/QS_DrawExample_3.gif" title="Animation Showing Sprite Scaling"></p><p class="dropspot">最后一件事 ..。将 "<span class="inline">image_yscale</span>" 部分更改为 "<span class="inline">1-_val</span>"，看看会发生什么！</p><p class="dropspot">&nbsp;</p></div><p>&nbsp;</p><p>上面的例子只是说明了当 <span data-keyref="GameMaker Name">GameMaker</span> 是默认绘制时，您可以操作对象精灵的许多方法中的一部分，但是如果您想要为一个对象绘制多个东西怎么办？在这些情况下，您需要使用 <strong>绘制事件</strong> 来显式地告诉 <span data-keyref="GameMaker Name">GameMaker</span> 要绘制什么，这就是我们将在以下示例中执行的操作。</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#"><span data-open-text="true" data-skip-index="true">将两个(或更多)精灵绘制在一起</span><span data-close-text="true">将两个(或更多)精灵绘制在一起</span></a></p><div class="droptext" data-targetname="drop_down3"><p class="dropspot">在本例中，您需要两个精灵和一个对象。调用精灵 "<span class="inline">spr_One</span>" 和 "<span class="inline">spr_Two</span>"，然后将 "<span class="inline">spr_One</span>" 原点居中，对于 "<span class="inline">spr_Two</span>"，将其原点设置为左中：</p><p class="dropspot"><img alt="Show Origins For Sprites" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_1.png">将第一个精灵 ("<span class="inline">spr_one</span>"，中心原点) 分配给您创建的对象，然后添加一个 <strong>创建事件</strong> 。在创建事件中添加以下 GML 可视化或 GML：</p><p class="dropspot"><img alt="Set Draw Angle Variable In DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_1.png"></p><p class="code">draw_angle = 0;</p><p class="dropspot">我们将使用该变量随时间旋转 "<span class="inline">spr_Two</span>"，并将其绘制在分配给对象的精灵上 ("<span class="inline">spr_One</span>")。为此，我们需要向对象添加一个 <strong>绘制事件</strong> 。通过这样做，我们告诉 <span data-keyref="GameMaker Name">GameMaker</span> 我们希望接管实例绘制的内容，这意味着我们的代码将包括对 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm"><span class="inline">draw_self()</span></a> 函数或 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Self.htm"><strong>绘制自身</strong></a> 操作的调用。此操作只是复制对象在不存在绘制事件时所做的操作，并且它是默认绘制指定的精灵。然后，我们将绘制第二个精灵，我们希望将其用作旋转的叠加精灵。GML 可视和 GML 如下所示：</p><p class="dropspot"><img alt="Draw Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_2.png"></p><p class="code">draw_self();<br>draw_angle = draw_angle + 0.5;<br>draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);</p><p class="dropspot">将该对象的多个实例添加到房间编辑器中，然后按下 <a class="tooltip" title="IDE，或集成开发环境，是一个软件应用程序，为计算机程序员提供软件开发的全面设施。在这种情况下，GameMaker Studio 2的整个前端都被认为是 IDE，包括创建图形、添加声音和添加代码以制作游戏的部分。">IDE</a> 顶部的 <strong>播放</strong> 按钮 <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">。如果一切正常，您现在应该看到如下所示：</p><p class="dropspot"><img alt="Animation Drawing Two Sprites Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_2.gif"></p><p class="dropspot">在我们离开这个例子之前，让我们稍微调整一下，让它指向鼠标位置，而不是简单地旋转 "<span class="inline">spr_Two</span>"。为此，我们需要将绘制事件 GML 可视化或 GML 更改为如下所示：</p><p class="dropspot"><img alt="Edited Draw Code For Drawing Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_3.png"></p><p class="code">draw_self();<br>draw_angle = point_direction(x, y, mouse_x, mouse_y);<br>draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);</p><p class="dropspot">再次运行该项目，这一次您将看到非常不同的东西！</p><p class="dropspot"><img alt="Animation Drawing Two Sprites Pointing At Mouse" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_3.gif">精灵现在指向鼠标，无论你将它移动到哪里！正如你所看到的，分层精灵是一种很好的方法来给对象添加细节，或者让一些东西独立于指定给对象的基础精灵移动，这是一个强大的工具，你可能会在你自己的项目中大量使用。</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down4" href="#"><span data-open-text="true" data-skip-index="true">绘制精灵以外的东西</span><span data-close-text="true">绘制精灵以外的东西</span></a></p><div class="droptext" data-targetname="drop_down4"><p class="dropspot">您也可以在绘制事件中绘制精灵以外的对象，如文本或形状。在本例中，我们将使用 GML 可视化或 GML <span class="inline">draw_self()</span>&nbsp;函数来绘制对象精灵，但我们还将绘制一些其他内容，从一些 <strong>文本</strong> 开始。在本例中，您将需要一个精灵和一个对象 (为其指定了精灵)。在对象中，首先使用此 GML 可视化或 GML 添加一个 <strong>创建事件</strong> ：</p><p class="dropspot"><img alt="Setting Variables Using DnD" class="center" height="506" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1_1.png" width="317"></p><p class="code">name = choose("Fred", "Jonas", "Sharon", "Kate", "Frank", "John", "Monica", "Amanda");<br>number = irandom(100);</p><p class="dropspot">所做的只是告诉&nbsp;<span data-keyref="GameMaker Name">GameMaker</span> 从列出的名称中选择一个并将其赋给一个变量，并为该对象的每个实例生成一个从 0 到 100 的随机数。我们希望将这些值绘制到屏幕上，因此您现在需要添加一个 <strong>绘制事件</strong> ，并在其中添加以下 GML 可视或 GML：</p><p class="dropspot"><img alt="Drawing Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1.png"></p><p class="code">draw_self();<br>draw_set_halign(fa_center);<br>draw_text(x, y + 32, "My name is " + name);<br>draw_text(x, y + 48, "My number is " + string(number));</p><p class="dropspot">您会注意到，在上面的代码中，我们使用 <a href="../GameMaker_Language/GML_Reference/Strings/string.htm"><span class="inline">string()</span></a> 函数或 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Number_To_String.htm"><strong>数值转字符串</strong></a> 对要绘制的 "number" 变量进行字符串操作。这是因为所有文本都必须由 <em>字符</em> 组成，而不是值，因此我们需要使用此函数 / 操作将数值转换为我们想要绘制的字符。在本例中，我们将获取我们生成的随机数，并将其转换为可以绘制的 " 字符串"。另请注意，我们设置了文本 <strong>对齐方式</strong> 。这只是告诉 <span data-keyref="GameMaker Name">GameMaker</span> 相对于给定位置从哪里开始绘制文本，在本例中，我们希望文本沿 x 轴居中。</p><p class="dropspot">将该对象的多个实例添加到工作室编辑器中，然后按下 IDE 顶部的播放按钮 <img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">&nbsp;。您应该会看到类似这样的内容：</p><p class="dropspot"><img alt="Sprites Being Drawn Along With Text" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_1.png"></p><p class="dropspot">在到目前为止的所有示例中，我们都绘制了分配给实例的精灵，但情况并不总是如此。<strong>您可以在绘制事件中绘制任何您想要的内容</strong>，而不管指定的精灵是什么。为了说明这一点，我们将更改当前拥有的代码，方法是删除 <span class="inline">draw_self()</span> 调用，并替换为绘制彩色椭圆的函数，如下所示：</p><p class="dropspot"><img alt="Drawing Shapes Along With Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_2.png"></p><p class="code">draw_ellipse_colour(x - 50, y - 32, x + 50, y + 32, c_fuchsia, c_lime, false);<br>draw_set_halign(fa_center);<br>draw_text(x, y + 32, "My name is " + name);<br>draw_text(x, y + 48, "My number is " + string(number));</p><p class="dropspot">再次运行该项目，您应该会看到以下内容：</p><p class="dropspot"><img alt="Example Of Drawing Shapes And Text Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_2.png"></p><p class="dropspot">需要注意的一点是，即使我们没有绘制指定的精灵，<strong>它仍将用于碰撞检测</strong>。因此，虽然您可能正在绘制一件东西，但碰撞仍将基于指定的精灵计算，就像它与实例一起放置在房间中一样，即使它不可见。这实际上很方便，因为这意味着你可以绘制不同的精灵，但基于指定的精灵维护一个单一的<strong>碰撞遮罩</strong>。还请注意，您仍然可以应用不同的变换，如X/Y比例，碰撞将基于更改的大小，即使没有绘制任何内容来显示这一点。</p></div><p>&nbsp;</p><p>&nbsp;</p><h1>GUI 层</h1><p>我们在页面顶部提到，我们将讨论 <strong>绘制 GUI 事件</strong> 以及绘制事件，现在让我们来看看这一点。绘制图形用户界面事件作用于名为 <strong><a class="tooltip" title="“图形用户界面”（Graphical User Interface）的缩写，它是一个包含图形元素（例如窗口，图标和按钮）的用户界面。在GameMaker中，您有一组特定的对象事件（绘制GUI事件），可以将其吸引到专门为得分，生命，存货等事物设计的这一层。">图形用户界面</a>层</strong> 的东西，它是在房间中的实例上绘制的具有固定宽度和高度的特殊绘制层。GUI 层的好处是<em>它不会随着房间摄像头移动</em>，所以它是添加静态图形用户界面项目的理想位置，比如分数、健康条和其他你的游戏需要与用户交流的信息。您可以从手册的 <a href="../The_Asset_Editors/Object_Properties/Draw_Events.htm">绘制事件</a> &nbsp;部分找到有关图形用户界面层的更多信息。</p><p class="note"><strong>注意</strong>：房间可以比屏幕大，所以你可以有很大的关卡供玩家走动。这意味着在房间编辑器中(或在代码中)，您需要定义一个跟随游戏动作的<strong>相机</strong>。这基本上是一种根据玩家在房间中的位置来设置屏幕的固定区域来显示较大房间的不同部分的方式，并在许多游戏中使用。想想看，在马里奥或塞尔达这样的经典游戏中，人们的视角总是跟随着主角。这是用相机完成的。有关更多信息，请参阅手册的房间编辑器部分中的<a href="../The_Asset_Editors/Room_Properties/Room_Properties.htm">房间属性</a>一节。</p><p>下面的示例都将使用<strong>绘制图形用户界面</strong>事件，因此您需要创建一个对象并将该事件添加到其中。注意，对象不需要指定精灵，因为我们不想默认绘制任何东西，也不需要它来检测碰撞。像这样只为绘制东西或控制游戏某些方面而设计的对象通常被称为<strong>控制器对象</strong>。还要注意，我们将对所有示例使用相同的对象，因此我们建议您逐一查看它们(尽管这并不是绝对必要的)。</p><p><img alt="Draw GUI Event In An Object" class="center" src="../assets/Images/QS_Guide/QS_DrawGUIObject.png"> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down5" href="#"><span data-open-text="true" data-skip-index="true">绘制文本</span><span data-close-text="true">绘制文本</span></a></p><div class="droptext" data-targetname="drop_down5"><p class="dropspot">当绘制到图形用户界面层时，左上角是原点位置，右上角是 +X，下是 +Y。这使得定位文本和图形非常容易，如您将在本例中看到的。我们在这里要做的就是提取一个表示球员得分的值，因此在我们的对象中，我们需要添加一个 <strong>创建事件</strong> 来初始化一个变量来保存该值，如下所示：</p><p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_1.png"></p><p class="code">player_score = 0;</p><p class="dropspot">我们还希望向对象添加一个<strong>键盘按下&lt;空格键&gt;事件</strong>，因为每次按空格键时，我们都会使用该事件来增加分数。</p><p class="dropspot"><img alt="Adding A Space Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png"></p><p class="dropspot">在这种情况下，添加以下内容：</p><p class="dropspot"><img alt="GML VisualActions In The Space Key Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_2.png"></p><p class="code">var _val = irandom(100);<br>player_score = player_score + _val;</p><p class="dropspot">最后，让我们在绘制 GUI 事件中绘制分数值，如下所示：</p><p class="dropspot">在这种情况下，添加以下内容：</p><p class="dropspot"><img alt="Drawing Text To The GUI Layer Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_3.png"></p><p class="code">draw_set_halign(fa_left);<br>draw_set_colour(c_yellow);<br>draw_text(32, 32, "SCORE:");<br>draw_set_colour(c_white);<br>var _str = string(player_score);<br>draw_text_transformed(32, 48, _str, 2, 2, 0);</p><p class="dropspot">您将注意到我们如何使用<a class="tooltip" title="在计算机编程中，术语“硬编码”用于描述被认为是固定的并且不太可能更改的代码。硬编码功能以无法稍后修改的方式内置于硬件或软件中。例如，如果您要制作游戏并将玩家的健康状况“硬编码”为10，那么您将在整个游戏代码中使用值10，而不是使用变量。">硬编码</a>(或固定的)值来表示要绘制的文本的 X/Y 位置，因为在绘制到图形用户界面层时，我们不需要它相对于任何实例。我们还使用了"设置颜色"功能来更改文本的颜色，以及使用"转换"功能来使实际的得分值更大，这说明了如何在自己的游戏中自定义文本元素。</p><p class="dropspot">立即将此对象的单个实例添加到您的房间，然后按<strong>播放</strong>按钮<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">。当游戏运行时，按下并松开<span class="inline">&lt;空格键&gt;</span>，您应该会看到分数值增加。</p><p class="dropspot"><img alt="Animation Showing Text Being Drawn To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_6.gif"></p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down6" href="#"><span data-open-text="true" data-skip-index="true">绘制精灵</span><span data-close-text="true">绘制精灵</span></a></p><div class="droptext" data-targetname="drop_down6"><p class="dropspot">在本例中，我们将使用图形用户界面层来绘制一些精灵。最明显的用处是画出玩家的生活，所以让我们继续这样做吧！在本例中，您需要一个精灵 -- 它应该大约是 64x64 像素 -- 但是它不应该被分配给对象，因为我们将自己绘制它。</p><p class="dropspot">首先，我们需要向<strong>创建事件</strong>中的对象添加一些新变量(如果您已经完成了前面的示例，请在下面添加已有的内容)：</p><p class="dropspot"><img alt="Defining Variables Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_1.png"></p><p class="code">player_lives = 3;<br>gui_w = display_get_gui_width();</p><p class="dropspot">在这段代码中，我们为 player_lives 初始化了一个变量，但我们还创建了一个变量来保持 GUI 层的宽度，这样我们就可以相对于屏幕的右侧正确地定位东西。我们可以只将一个值硬编码到代码中并使用它，但这意味着如果我们对房间的大小进行任何更改，或者如果我们添加摄像头等……。稍后，我们需要遍历代码并在任何地方更改值。相反，使用 <a href="../GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm"><span class="inline">display_get_gui_width()</span></a>&nbsp;函数意味着我们不需要担心任何类似的未来更改，因为代码将自动适应图形用户界面层最终的大小。</p><p class="dropspot">接下来，我们要向对象添加一个<strong>按下键盘回车的事件</strong>，因为我们将使用该事件来更改每次按下回车键时的生命数：</p><p class="dropspot"><img alt="Adding An Enter Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_EnterKeyPressEvent.png"></p><p class="dropspot">在这种情况下，添加以下内容：</p><p class="dropspot"><img alt="GML VisualIn The Enter Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_2.png"></p><p class="code">player_lives = player_lives - 1;<br><br>if (player_lives &lt; 0)<br>{<br>player_lives = 3;<br>}</p><p class="dropspot">最后，我们需要将精灵画到显示器上。为此，我们将使用 "<span class="inline">for</span>" 循环 (使用 GML <a href="../GameMaker_Language/GML_Overview/Language_Features/for.htm">在这里</a> 和 GML 可视化 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Loops/For.htm">在这里</a> 的信息)，以及将所有内容放置在屏幕右上角的图形用户界面宽度变量。因此，将其添加到绘制 GUI 事件中 (在前面的示例中可能具有的任何其他操作之后)：</p><p class="dropspot"><img alt="GML VisualActions To Draw Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_7_3.png"></p><p class="code">for (var i = 0; i &lt; player_lives; i += 1)<br>{<br>var _xx = gui_w - 48 - (i * 70);<br>draw_sprite(spr_Heart, 0, _xx, 48);<br>}</p><p class="dropspot">如果您尚未将此对象的实例添加到房间，请立即添加它(只有一个！)，然后按<strong>播放</strong>按钮<img alt="Play Icon" class="icon" height="24" src="../assets/Images/Icons/Icon_PlayGame.png" width="24">。游戏运行后，按下<span class="inline">&lt;回车&gt;</span>键不同的次数即可看到生活的变化。</p><p class="dropspot"><img alt="Animation Drawing Sprites To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_7.gif"></p><p class="dropspot">在您离开这个例子之前，您应该试验一下生命的数量，看看会发生什么。目前它设置为 3，但更改创建事件和按键事件以将值设置为 5 或 10...。如果你做的每件事都是正确的，那么代码应该会调整并正确地绘制它们！</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down7" href="#"><span data-open-text="true" data-skip-index="true">绘制健康条</span><span data-close-text="true">绘制健康条</span></a></p><div class="droptext" data-targetname="drop_down7"><p class="dropspot">最后一个示例介绍如何将健康条绘制到 GUI 层。有很多方法可以做到这一点，但 <span data-keyref="GameMaker Name">GameMaker</span> 有一个专门用于制作健康条的内置功能，所以这就是我们在这里使用的，尽管你也可以使用精灵或形状来创建自己的功能。首先，与前面一样，我们需要初始化一个变量来保存健康值，因此将以下 GML 可视或 GML 添加到对象的 <strong>创建事件</strong> 中 (在可能已经存在的任何其他代码之后)：</p><p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_1.png"></p><p class="code">player_health = 100;</p><p class="dropspot">我们希望使用箭头键根据按下的箭头键来向上或向下更改健康值，我们可以通过添加两个按下键盘的 <strong>箭头</strong> 事件来实现这一点，但是使用 <strong>步事件</strong> 和一些代码来检查按键可能更容易，所以现在使用以下 GML 可视化或 GML 继续添加一个 <strong>步事件</strong> ：</p><p class="dropspot"><img alt="Step Event GML VisualActions" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_2.png"></p><p class="code">if (keyboard_check(vk_up))<br>{<br>&nbsp; &nbsp; if (player_health &lt; 100)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; player_health = player_health + 1;<br>&nbsp; &nbsp; }<br>}<br><br>if (keyboard_check(vk_down))<br>{<br>&nbsp; &nbsp; if (player_health &gt; 0)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; player_health = player_health - 1;<br>&nbsp; &nbsp; }<br>}</p><p class="dropspot">完成这些工作后，我们实际上可以开始绘制健康条，这是在绘制 GUI 事件中完成的，添加以下内容 (在已有的任何内容之后)：</p><p class="dropspot"><img alt="GML VisualFor The Draw GUI Event To Draw A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_8_3.png"></p><p class="code">var _xx = display_get_gui_width() / 2;<br><br>draw_healthbar(_xx - 50, 24, _xx + 50, 40, player_health, c_black, c_red, c_lime, 0, true, true);</p><p class="dropspot">如果您尚未将此对象的实例添加到房间中(但只有一个！)，然后按下<strong>播放</strong>按钮<img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png">。游戏运行后，按<span class="inline">&lt;向上箭头&gt;</span>和<span class="inline">&lt;向下箭头&gt;</span>键可查看健康状况的变化。</p><p class="dropspot"><img alt="Animation Of Drawing A Healthbar" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_8.gif"></p></div><p>&nbsp;</p><p>我们希望在做完这些例子之后，你在使用 <span data-keyref="GameMaker Name">GameMaker</span> 时会有更多的信心，对它的工作原理有更多的了解。下一节将探讨如何让这些你一直在画的东西在房间里移动，以及接受和响应用户的输入。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="../Content.htm">索引</a></div><div style="float:right">Next: <a href="Movement_And_Controls.htm">移动及控制</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>