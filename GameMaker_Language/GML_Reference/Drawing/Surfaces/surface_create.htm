<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.6.8.0_2";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>surface_create</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Reference for surface_create">
  <meta name="rh-index-keywords" content="surface_create">
  <meta name="search-keywords" content="surface_create">
  <meta name="is_pure" content="true">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create_ext.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_exists.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="surface_create">
        <span>surface_create</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>surface_create</h1>
  <p>此函数用于创建表面，并将返回表面的索引，该索引应存储在变量中，以供将来调用函数时使用。首次创建表面时，它可能包含"噪波"，因为基本上它只是为此目的而放在一边的内存区域(该内存可能仍包含信息)，因此您可能希望在使用诸如<a href="../Colour_And_Alpha/draw_clear_alpha.htm"><span class="inline">draw_clear_alpha()</span></a>之类的函数之前清除表面。</p>
  <p>强烈建议创建的所有表面 的大小均为 2 的幂，例如，大小为 16、128、512 或 1024 像素。这在某些平台 (如 Windows 和 MacOS) 上并不是完全必要的，但它肯定会增加这些目标上的兼容性，而对于 HTML5 和设备来说，这是必不可少的，而且非常重要的是，你要记住这一点，否则你以后可能会遇到问题。</p>
  <h2>格式</h2>
  <p>您可以选择指定将用于在内存中存储表面 数据的格式。默认格式为 <span class="inline2">surface_rgba8unorm</span>。</p>
  <p>创建表面 时，可以使用以下任何一种格式：</p>
  <table>
    <colgroup>
      <col style="width:33.33%">
      <col style="width:33.33%">
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Surface_Format"><a target="_blank" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create.htm">表面格式类型常量</a></span></th>
      </tr>
      <tr>
        <th>常量</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="inline">surface_rgba8unorm</span></td>
        <td><strong>(Default) </strong>This format supports 4 channels (red, green, blue, alpha) with 8 bits each, meaning each channel has a 0-255 range<br>
          <br>
          "unorm" refers to these values being normalised into a 0-1 range when read in shaders
        </td>
      </tr>
      <tr>
        <td><span class="inline">surface_r8unorm</span></td>
        <td>This format supports a single channel (red) with an 8-bit value (0-255)<br>
          <br>
          Since it only contains one channel, it takes a quarter of the space compared to the format above (which stores RGBA)<br>
          <br>
          When read in a shader, all channels except red will be 0
        </td>
      </tr>
      <tr>
        <td><span class="inline">surface_rg8unorm</span></td>
        <td>This is similar to the format above, however it contains two channels: red and green</td>
      </tr>
      <tr>
        <td><span class="inline">surface_rgba4unorm</span></td>
        <td>This format supports 4 channels (red, green, blue, alpha) with 4 bits each, meaning each channel has a 0-15 range</td>
      </tr>
      <tr>
        <td><span class="inline">surface_rgba16float</span></td>
        <td>This format supports 4 channels (red, green, blue, alpha) with each channel being a 16-bit float, providing a higher precision<br>
          <br>
          An example use case is HDR, as this format would allow you to use values past the default 0-255 colour range
        </td>
      </tr>
      <tr>
        <td><span class="inline">surface_r16float</span></td>
        <td>This format supports a single channel (red) with a 16-bit floating point value<br>
          <br>
          Since it only contains one channel, it takes a quarter of the space compared to the format above (which stores RGBA)<br>
          <br>
          When read in a shader, all channels except red will be 0
        </td>
      </tr>
      <tr>
        <td><span class="inline">surface_rgba32float</span></td>
        <td>This format supports 4 channels (red, green, blue, alpha) with each channel being a 32-bit float, providing the highest precision, however this is slower to render to than 16-bit formats and is not as widely supported</td>
      </tr>
      <tr>
        <td><span class="inline">surface_r32float</span></td>
        <td>This format supports a single channel (red) with a 32-bit floating point value</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <h4>语法:</h4>
  <p class="code">surface_create(w, h, [format]);</p>
  <table>
    <tbody>
      <tr>
        <th>参数</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>w</td>
        <td><span data-keyref="Type_Real"><a target="_blank" href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Real</a></span></td>
        <td>要创建的表面的宽度</td>
      </tr>
      <tr>
        <td>h</td>
        <td><span data-keyref="Type_Real"><a target="_blank" href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Real</a></span></td>
        <td>要创建的表面的高度</td>
      </tr>
      <tr>
        <td>format</td>
        <td><span data-keyref="Type_Constant_Surface_Format"><a target="_blank" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create.htm">表面格式类型常量</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">可选</span></span>&nbsp;用于存储表面数据的格式，默认为&nbsp;<span class="inline2">surface_rgba8unorm</span></td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <h4>返回:</h4>
  <p class="code"><span data-keyref="Type_ID_Surface"><a target="_blank" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_create.htm">Surface ID</a></span></p>
  <p>&nbsp;</p>
  <h4>例子:</h4>
  <p class="code">if !surface_exists(surf)<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;surf = surface_create(1024, 1024);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;surface_set_target(surf);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;draw_clear_alpha(c_black, 0);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;surface_reset_target();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;view_surface_id[0] = surf;<br>
    }</p>
  <p>上述代码检查表面是否存在，如果不存在，将创建一个宽度为1024像素、高度为1024像素的表面，并将索引指定给可变的"浏览"。然后将绘制目标设置为新表面，在将绘制目标重置为显示之前，新表面将被清除并变为透明。最后，将表面指定给视图。</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Surfaces.htm">表面</a></div>
        <div style="float:right">Next:&nbsp;<a href="surface_create_ext.htm">surface_create_ext</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
surface_create
-->
  <!-- TAGS
surface_create
-->

</body></html>