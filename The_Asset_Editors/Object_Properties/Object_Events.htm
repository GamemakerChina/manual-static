<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "6.3.1";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Object Events</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page detailing the events system and the different events in an object">
  <meta name="rh-index-keywords" content="Objects - Events">
  <meta name="search-keywords" content="events,object events,events list">
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css">
  <script src="../../assets/scripts/main_script.js" type="module"></script>
<meta name="brsnext" value="The_Asset_Editors/Object_Properties/Event_Order.htm"><meta name="brsprev" value="The_Asset_Editors/Objects.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Object Events">
        <span>Object Events</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">Object Events</span></h1>
  <p>So, what are <span data-field="title" data-format="default">Object Events</span>? Basically, these are discreet moments in the game loop where things are made to happen based on what you have programmed for them. <span data-keyref="GameMaker Name">GameMaker</span> works with cycles of these events - from the moment a room is started to the moment it is finished there is a game loop running where every <strong>step </strong>a series of events are run or checked, and you can choose to place&nbsp;<span data-keyref="GML_Code">GML Code</span> or <span data-keyref="GML_Visual">GML Visual</span>&nbsp;actions in your objects that respond to these events (a step is a moment in game time, governed by the&nbsp;<a href="../../Settings/Game_Options.htm">Game Frames Per Second</a> setting, and can also be called a <strong>frame</strong>) .</p>
  <p>让我们看看一个有事件和代码的典型对象设置。</p>
  <p><img alt="Object Editor Events View" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Events.png">As你可以看到在我们的例子对象中列出了许多它应该响应的事件，但是最初当你创建一个对象时，这个列表是空的，你必须决定你需要哪些事件以及当这些事件被触发时该对象的实例应该做什么。要向对象中添加事件，按下事件列表底部的<strong>添加事件</strong>按钮，将弹出以下窗口：</p>
  <p><img alt="Object Editor Events List" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_EventList.png">这是一个对象可以响应的所有基本事件和事件类别的列表，每个类别中都有子事件来进一步细化行为。例如，如果你点击<strong>K</strong><strong>ey Press</strong> <img alt="Key Press Icon" height="16" src="../../assets/Images/Icons/Icon_KeyboardPress.png" width="16">&nbsp;事件类别，你就会弹出一个进一步的窗口，让你选择<em>对象应该对哪个</em>键做出响应。</p>
  <p>一旦你选择了你的事件，事件的编辑窗口&nbsp;将被链到它，并在右边打开。</p>
  <div data-conref="../../assets/snippets/Visual_Code_Choice.hts">
  <p class="note">在这一点上，你可能会被要求在&nbsp;<span data-keyref="GML_Visual">GML Visual</span>&nbsp;和&nbsp;<span data-keyref="GML_Code">GML Code</span>之间选择。请参阅&nbsp;<a href="../../GameMaker_Language.htm">GameMaker语言</a>了解更多信息。</p>

</div>
  <p>现在，您可以编辑<span data-keyref="GML_Code">GML代码</span>(或块)，以给予对象对该事件的特定行为或反应。</p>
  <p>你可以在任何已添加到对象的事件上点击鼠标右键<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" style="">&nbsp;，以获得以下菜单选项。</p>
  <p><img alt="Object Editor Events Menu" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_RMBMenu.png">这些选项是：</p>
  <ul class="colour">
    <li><strong>添加事件</strong> - 从事件列表中添加一个新事件。</li>
    <li><strong>显示父事件 </strong>- 以只读模式查看从父事件继承的事件。</li>
    <li><strong>打开父事件 </strong>- 在父对象中打开继承的事件。</li>
    <li><strong>剪切</strong>/ <strong>复制</strong>/ <strong>粘贴事件</strong> - 剪切、复制或粘贴所选事件。你也可以使用标准的键盘快捷键：<img alt="CTRL Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Ctrl.png" width="55">&nbsp;/&nbsp;<img alt="CMD Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Cmd.png" width="55">+ <span class="inline">X</span>, &nbsp;，<img alt="CTRL Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Ctrl.png" width="55">&nbsp;/&nbsp;<img alt="CMD Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Cmd.png" width="55">&nbsp;+<span class="inline">C</span>，以及<img alt="CTRL Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Ctrl.png" width="55">&nbsp;/&nbsp;<img alt="CMD Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Cmd.png" width="55">&nbsp;+<span class="inline">V</span>。</li>
    <li><strong>重复事件</strong> - 重复所选事件。这将把所选事件的内容复制到你指定的另一个事件中。</li>
    <li><strong>更改事件</strong> - 更改事件。这将提示您选择另一个事件类别，一旦选定，当前事件的内容将被改变为新的事件（在此过程中删除原事件）。</li>
    <li><strong>转换为GML Visual / Code</strong>-将使用创建项目时选择的方法创建对象事件，可以使用<span data-keyref="GML_Code">GML Code</span>或<span data-keyref="GML_Visual">GML Visual</span>操作。使用此选项，您可以从一种方法转换为另一种方法，而不考虑项目类型。</li>
    <li><strong>删除事件</strong> - 删除事件（或多个事件）。</li>
  </ul>
  <p>When removing events, you can use <img alt="Shift Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Shift.png" width="55">&nbsp;+ <img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png">&nbsp;to select multiple events and then delete them all together.Each object you create has its own discreet list of events which are added into it from <a href="../Objects.htm">The Object Editor</a>. These events fall into two categories:</p>
  <ul class="colour">
    <li>那些运行每帧都运行的</li>
    <li>那些由游戏事件 "触发 "的事件，如实例到达房间边缘或按下键盘或鼠标。</li>
  </ul>
  <p>事件的完整列表如下:</p>
  <p><img alt="Create Event Icon" src="../../assets/Images/Icons/Icon_Create.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">创建</span><span data-close-text="true">创建</span></a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">这个事件发生在对象的一个实例被首次创建时，也是通过房间编辑器放置在房间里的实例在进入房间时发生的第一件事。这意味着该事件是初始化<a class="tooltip" title="变量是程序中的命名值，可以在需要时对其进行修改，存储和显示。例如，如果我们有一个名为XYZ的整数变量，并且它存储的值为10，则可以执行A = XYZ + 10之类的操作，这将把变量A的值设置为20，因为XYZ为10，我们正在添加10。您还可以使用运算符更改变量值，因此XYZ = XYZ + 100会将XYZ变量的值修改为等于110。变量也可以用于存储标识符和对不同资源的引用。">变量</a><span class="glossextra"></span>、启动<a href="../Timelines.htm">时间线</a>、设置<a href="../Paths.htm">路径</a>&nbsp;等......以及其他任何通常只需要做一次或只在房间中首次创建实例时做的事情的理想场所。如果你的对象在对象编辑器或房间编辑器中添加了任何<strong>对象变量</strong>或<strong>实例变量</strong>，那么这些变量将首先被初始化，然后<strong>创建事件</strong>将被运行。</p>
    <p class="dropspot">记住，你可以从房间编辑器中的<a href="../Room_Properties/Layer_Properties.htm">实例创建代码</a>&nbsp;中修改你在创建事件中设置的任何内容，因为那是在实例的创建事件之后直接运行的，可以用来创建<strong>实例变量</strong>&nbsp;或覆盖作为对象变量或在实际创建事件中添加的任何变量。</p>
    <div data-conref="../../assets/snippets/Instance_creation_order_warning.hts">
  <p class="note"><span class="note">注意</span>&nbsp;房间中的实例是按照一定的<a href="../Room_Properties/Room_Properties.htm#creation_order">顺序</a>创建的，它们的创建事件也是在逐一创建时执行的。这意味着，当你在创建事件中从其他实例中读取变量时，必须小心谨慎，因为其他实例可能还没有运行其创建事件！<br> <br> 例如：假设<strong>ObjectA</strong>在<strong>ObjectB</strong>之前被创建，而你在这些对象的创建事件里有以下代码：<br> <br> <strong>ObjectA </strong>Create -&nbsp;<span class="inline2">myValue = objectB.myValue;</span><br> <strong>ObjectB </strong>Create -&nbsp;<span class="inline2">myValue = 10;</span><br> <br> ObjectA先被创建，它的创建事件运行，然后游戏崩溃：<br> <br> <em><strong>"Variable objectB.myValue(100003, -2147483648) not set before reading it."</strong></em><br> <br> 这只是因为ObjectB还没有被创建，所以在其创建事件中初始化的任何变量还不存在。这就是为什么当你在创建事件中引用其他实例&nbsp;时必须谨慎，包括在<span class="inline"><a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm">with()</a></span>块内运行的任何代码。 </p>

</div>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Destroy Event Icon" src="../../assets/Images/Icons/Icon_Destroy.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">销毁</span><span data-close-text="true">销毁</span></a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">这个事件是一个实例被销毁时要执行的事件。在给对象添加行为时，它经常被忽略，但它可以非常有用，例如，当敌人被杀死时，它可以产生爆炸或粒子效果，或者在房间的另一个地方重新生成对象的新实例，甚至可以在分数上加分。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Clean Up Event Icon" src="../../assets/Images/Icons/Icon_Destroy.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#"><span data-open-text="true" data-skip-index="true">清理</span><span data-close-text="true">清理</span></a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><span>这个事件将在任何从房间中移除对象的实例的事件之后被调用。因此，它将被触发，如果：</span></p>
    <ul class="dropspotlist">
      <li class="dropspot"><span>该实例被销毁</span></li>
      <li class="dropspot"><span>进入别的房间</span></li>
      <li class="dropspot"><span>游戏结束</span></li>
    </ul>
    <p class="dropspot"><span>它是为你设计的，用来 "清理 "你游戏中的任何动态资源（比如表面、数据结构等），或者执行任何你需要执行的任务，<em>一旦</em>实例以任何方式从游戏中删除。</span></p>
    <p class="dropspot"><span>注意，这个事件将在触发它的事件之后<em>立即</em>被调用，但实例实际上不会被从游戏中移除<strong>，直到当前事件结束</strong>。例如，如果你在步骤事件中调用<span class="inline">instance_destroy()</span>，那么Destroy事件将被调用，然后是Clean Up事件，然后<em>步骤事件的其余部分将完成运行</em>。这意味着你在调用<span class="inline">instance_destroy()</span>之后的任何代码仍然会被运行，如果你已经清理了数据结构或其他一些代码需要的资源，则会成为潜在的错误原因，所以在使用这个事件时必须小心谨慎。</span></p>
    <p>&nbsp;</p>
  </div>
  <p><img alt="Alarm Event Icon" src="../../assets/Images/Icons/Icon_Alarm.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">计时器</span><span data-close-text="true">计时器</span></a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">计时器类别被分成12个事件，每个事件对应一个实例中可能设置的计时器。因此，当你点击<em>添加计时器</em>类别时，你会看到这个窗口。</p>
    <p class="dropspot"><img alt="Object Editor Alarm Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_AlarmEvents.png">在这里，你选择你想创建的计时器，一旦完成，你会看到它已经被添加到事件窗口，允许你像平常一样向它添加代码。但什么是计时器打响？嗯，它是一个特殊的事件，除非事先设置了计时器，否则它不会做任何事情，它将等待计时器倒计时到0，然后再运行你添加到它的动作或代码。</p>
    <p class="dropspot">一旦计时器达到0并运行代码，它就会倒数到-1，在那里它将一直保持，直到再次设置（意味着你可以检查计时器的值是否大于-1，这将告诉你它是否正在运行）。所以，假设你在对象的创建事件中把<span class="inline">alarm[0]</span>设置为30，这意味着<span data-keyref="GameMaker Name">GameMaker</span>将在运行放在<span class="inline">alarm[0]</span>事件中的动作或代码之前倒数30步。注意，将计时器设置为0将<em>不会</em>运行计时器代码，因为虽然事件被触发了，但计时器被立即设置为-1，所以代码被跳过。如果你需要一个计时器来运行下一个步骤，那么你应该把它设置为1。</p>
    <p class="dropspot">这可能非常有用，因为它允许你用精确的时刻设置事物的运动，你甚至可以让它们重复，因为没有什么可以阻止你在计时器的事件中设置一个计时器。想象一下，你有一个怪物，你想让它每隔三秒钟向右转......好吧，你可以在它的创建事件中设置一个计时器，以room_speed*3（如果房间速度是30，那就是每秒30步，所以乘以3，你就得到了3秒！）然后在计时器事件中，你会有代码或动作来设置它的方向，以及动作（或代码）来设置其计时器为房间速度*3&nbsp;；再者。通过这种方式，你可以设置简单的游戏循环，事情只在特定的时间间隔发生。</p>
    <p class="dropspot">值得注意的是，一个没有任何动作或代码的计时器将<em>不会</em>倒数。但是，如果 只有注释，没有代码或动作，那么计时器也会继续倒计时，可以像平时一样进行设置和检查。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Step Event Icon" src="../../assets/Images/Icons/Icon_Step.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#"><span data-open-text="true" data-skip-index="true">步</span><span data-close-text="true">步</span></a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span>将时间分成<strong>步</strong>，房间的速度定义了每秒应该有多少步（一个步骤也可以称为<strong>帧</strong>）。一个步骤，基本上是在游戏运行时不断检查和触发所有事件的循环，所以你可以想象，<strong>步骤事件</strong>是一个在实例存在时每一步游戏都要检查的事件。</p>
    <p class="dropspot">步骤事件实际上由三个子事件组成，概述如下。</p>
    <p class="dropspot"><img alt="Object Editor Step Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Step.png">对于大多数事情来说，使用标准的步骤事件就可以了，但有时你想更多地控制什么代码在什么时间运行，所以我们为你提供了<strong>Begin </strong>和<strong>End </strong>step事件。这三个事件每一步都会被检查，但它们的顺序永远不会改变，即使将来<span data-keyref="GameMaker Name">GameMaker</span>引擎的更新改变了其他事件，这意味着这是唯一可靠的方法，可以确保某些事情总是发生在其他事情之前。</p>
    <p class="dropspot">步骤事件可以用来做什么？嗯，它可以用于需要连续执行的动作或代码。例如，如果一个物体应该跟随另一个物体，在这里你可以对我们所跟随的物体的运动方向进行调整，以保持它在后面平稳地移动。不过要小心处理这个事件，不要在物体的步骤事件中放入很多复杂的动作，尤其是当你打算在游戏室里有很多物体的实例时，因为这可能会使游戏变慢。许多事情都可以放入计时器，或者使用一些<strong>其他</strong>事件设置为触发，而不是一直发生。</p>
    <p class="dropspot">&nbsp;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Collision Event Icon" src="../../assets/Images/Icons/Icon_Collision.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#"><span data-open-text="true" data-skip-index="true">碰撞</span><span data-close-text="true">碰撞</span></a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">显然，在制作游戏时，你必须知道一个物体的两个（或多个）实例发生了碰撞，为此我们有<strong>碰撞事件</strong>。这是一个你放置在一个对象中的事件，然后指定你应该针对哪个其他对象来检查碰撞。</p>
    <p class="dropspot">当你没有开启物理时，这些碰撞将根据两个物体的遮罩（遮罩在精灵属性中定义，或者可以在物体属性中独立分配）以及它们是否重叠来计算。请注意，如果碰撞中的一个或另一个实例没有分配掩码（或者精灵掩码被设置为无），<em>即使它正在绘制什么东西</em>也不会被检测到碰撞。</p>
    <p class="dropspot">如果<strong>物理</strong>是启用的，那么碰撞将基于你在物体的物理属性中为其定义的<strong>碰撞形状</strong>（<em>Fixture</em>）的类型，以及它对碰撞的反应。这意味着你可能不需要任何代码来处理碰撞，但这个事件仍然<em>需要至少有一个注释在里面</em>，以便检测碰撞。</p>
    <p class="dropspot">最后，应该注意的是，在碰撞事件被触发之前，所有的碰撞将在每个游戏步骤中被计算一次，这样，当碰撞事件运行时，所有的碰撞都已经被计算并预先分配了。这意味着，如果你在这个事件中创建了一个实例，然后试图用它来检查碰撞，那么在游戏循环的下一次<a class="tooltip" title="迭代是对项目代码中的一组操作的一次遍历。计算机编程中一种迭代形式是通过循环。循环将重复一段代码，直到满足条件为止，然后循环可以继续进行。每次计算机运行一个循环，就称为迭代。简单来说，迭代是一遍又一遍地重复执行特定代码段以执行特定操作的过程。">迭代</a>之前，碰撞将不会被检测到或解决。</p>
    <p class="dropspot">&nbsp;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Keyboard Icon" src="../../assets/Images/Icons/Icon_Keyboard.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#"><span data-open-text="true" data-skip-index="true">键盘,</span><span data-close-text="true">键盘,</span></a>&nbsp;&nbsp;<img alt="Keyboard Press Icon" src="../../assets/Images/Icons/Icon_KeyboardPress.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#"><span data-open-text="true" data-skip-index="true">键盘按下,</span><span data-close-text="true">键盘按下,</span></a> &nbsp;<img alt="Keyboard Release Icon" height="16" src="../../assets/Images/Icons/Icon_KeyboardRelease.png" style="cursor: nwse-resize;" width="15"> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#"><span data-open-text="true" data-skip-index="true">键盘松开</span><span data-close-text="true">键盘松开</span></a></p>
  <div class="droptext" data-targetname="drop-down14">
    <p class="dropspot">让玩家控制你游戏的不同方面是非常重要的，为此<span data-keyref="GameMaker Name">GameMaker</span>为你提供了一个非常全面的键盘事件列表，可以在三个主要的键盘类别中的任何一个使用。对于一般的键盘类别，只要选定的键被按下，它就会被连续触发&nbsp;每一步&nbsp;，而按压和释放类别的事件只会在最初按压或释放键时被触发一次。</p>
    <p class="dropspot">应该注意的是，每当使用一个键时，键盘事件实际上会在房间里的所有活动实例中被触发，但只有那些为该特定键定义了事件的实例才会做出反应，你可以在任何对象中创建多个键盘事件，在游戏运行时，该对象的实例会对所有事件做出反应。</p>
    <p class="dropspot">当你向一个对象添加任何键盘事件时，你会看到键盘子事件菜单，你可以指定你要检查的键:</p>
    <p class="dropspot"><img alt="Object Editor Keyboard Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Keyboard.png">它们中的大多数是相当明显的，但让我们简单地浏览一下这些部分--在顶部我们有方向键，其次是最常用的修改键，然后是键盘的其他部分（分成更多的子部分，这样你就可以得到所需的确切键，如<img alt="Escape Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Escape.png" width="55">&nbsp;或&nbsp;<img alt="Insert Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Insert.png" width="55">），最后是两个非常特殊的子事件，<strong>No Key</strong>和<strong>Any Key</strong>。正如它们的名字所暗示的，这些是检查<em>无</em>键被按下时或<em>任何</em>键被按下时的子事件。请注意，数字键盘上的按键只有在<strong>数字锁</strong>被启用时才会产生相应的事件。</p>
    <p class="dropspot">键盘的<strong>Press </strong>和<strong>Release </strong>事件与常规键盘事件几乎完全相同，只是它们不是连续触发，而是只触发一次。当键盘第一次记录到一个键被按下时，它将产生一个<strong>键盘按下</strong>事件（以及一个常规的键盘事件），之后第一次不再检测到一个键被按下时，它将触发一个<strong>键盘释放</strong>事件。</p>
    <p class="dropspot">&nbsp;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt=" Mouse Icon" height="16" src="../../assets/Images/Icons/Icon_MouseEvent.png" width="16"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#"><span data-open-text="true" data-skip-index="true">鼠标</span><span data-close-text="true">鼠标</span></a></p>
  <div class="droptext" data-targetname="drop-down16">
    <p class="dropspot">鼠标类别被分成一系列的事件，可以选择这些事件来给你一个更精确的控制你的游戏中发生的事情。在这里你可以看到这些事件到底是什么。</p>
    <p class="dropspot"><img alt="Object Editor Mouse Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Mouse.png">左<img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png">、右<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png">&nbsp;和中<img alt="MMB Icon" class="icon" src="../../assets/Images/Icons/Icon_MMB.png">&nbsp;按钮事件（无论是<strong>normal</strong>、<strong>pressed </strong>还是<strong>released</strong>）都对拥有该事件的实例的掩码起作用。这意味着，<span data-keyref="GameMaker Name">GameMaker</span>在使用这些按钮时，会对照有鼠标事件的实例的碰撞掩码，检查鼠标在房间里的位置。如果与实例<a class="tooltip" title="对于精灵来说，边界框是用于最初检测碰撞区域边缘的名称，它不必与它所应用的精灵大小相同。对于序列，边界框是画布中一个或多个资源占用的总空间的外缘。">碰撞箱</a>&nbsp;发生了 "碰撞"，那么事件就会被触发，所以要确保任何有这些事件的实例都有一个具有有效碰撞遮罩的精灵，或者该对象在对象属性中选择了一个遮罩精灵。正如它们的名字所暗示的，这些事件将在所选的鼠标按钮首次按下或释放时被触发一次，或者在按钮保持的每一步都被连续触发。</p>
    <p class="dropspot">鼠标进入和离开事件也与按钮事件类似，它们也依赖于实例的掩码来工作，但这次它们是在鼠标第一次 "进入"（触摸）实例或鼠标 "离开"（停止触摸）实例时触发的。然而，这些事件不是连续的，每当鼠标进入或离开对象时只被触发一次--所以它们是一种理想的方法，例如，创建需要在鼠标悬停时改变的按钮，当鼠标移开时又恢复正常。</p>
    <p class="dropspot">最后，我们还有一个鼠标事件的部分，叫做<strong>全局鼠标</strong>。在这个子菜单中，你会发现有一些事件是用来记录实例中的鼠标事件的，即使鼠标不在它们上面，甚至不在它们附近。这些事件是为<em>所有</em>实例生成的，如果有为指定事件定义的动作或代码，那么它将被运行，无论鼠标在游戏中的位置如何。</p>
    <p class="dropspot">请注意，在移动或触摸屏设备上，鼠标左键<img alt="LMB Icon" class="icon" src="../../assets/Images/Icons/Icon_LMB.png">&nbsp;也可以用来检查触摸屏上的手指，而鼠标右键<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png">&nbsp;是由双击屏幕触发的（这个行为可以用代码改变）。</p>
    <p class="dropspot">&nbsp;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Gestures Icon" src="../../assets/Images/Icons/Icon_Gesture.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down18" href="#"><span data-open-text="true" data-skip-index="true">手势</span><span data-close-text="true">手势</span></a></p>
  <div class="droptext" data-targetname="drop-down18">
    <p class="dropspot">这个事件是由用户触摸屏幕（在手机上）或点击并移动鼠标（在所有其他平台上）而触发的。这些事件类似于鼠标事件，你有常规版本和<em>全局</em>&nbsp;版本。这些事件的常规版本只有在触摸发生在有精灵（或掩码）的实例上，并且触摸发生在其<a class="tooltip" title="对于精灵来说，边界框是用于最初检测碰撞区域边缘的名称，它不必与它所应用的精灵大小相同。对于序列，边界框是画布中一个或多个资源占用的总空间的外缘。">边界框</a>内时才会被触发。然而，这些事件的全局版本将由用户在屏幕上的任何地方触摸<em>而触发。</em></p>
    <p class="dropspot">手势事件&nbsp;检测&nbsp;如下。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><img alt="Tap Icon" class="icon" src="../../assets/Images/Icons/Icon_Tap.png">&nbsp;<strong>点击 </strong>- 当用户点击/触摸并迅速释放时</li>
      <li class="dropspot"><img alt="Drag Icon" class="icon" src="../../assets/Images/Icons/Icon_Drag.png">&nbsp;<strong>拖动 </strong>- 当用户触摸/点击并保持，然后移动他们的手指/光标时</li>
      <li class="dropspot"><img alt="Flick Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_Flick.png" width="20">&nbsp;<strong>滑动</strong>- 当用户在一个动作中移动和释放触摸/点击时</li>
      <li class="dropspot"><img alt="Pinch Icon" class="icon" src="../../assets/Images/Icons/Icon_Pinch.png">&nbsp;<strong>夹开</strong>--当用户在屏幕上有两个手指，然后一起/分开移动它们时</li>
      <li class="dropspot"><img alt="Rotate Icon" class="icon" src="../../assets/Images/Icons/Icon_Rotate.png">&nbsp;<strong>旋转</strong>--当用户在屏幕上有两个手指，然后围绕一个点旋转时。</li>
    </ul>
    <p class="dropspot"><img alt="Object Editor Gesture Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Gesture.png">不同的事件总是包含一个名为"<span class="inline">event_data</span>"的DS地图，它将包含一些带有触摸/点击位置和移动数据的键/值对。关于所有可用的子事件以及它们如何工作的全部细节，请参见以下章节。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Gesture_Events.htm">手势事件</a></li>
    </ul>
    <p class="dropspot">&nbsp;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Other Icon" height="16" src="../../assets/Images/Icons/Icon_Other.png" width="16"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down19" href="#"><span data-open-text="true" data-skip-index="true">其他</span><span data-close-text="true">其他</span></a></p>
  <div class="droptext" data-targetname="drop-down19">
    <p class="dropspot">在用<span data-keyref="GameMaker Name">GameMaker</span>制作游戏时，有一些特殊的事件，它们大多被分组在其他事件下，可以从你选择这个时出现的子事件的弹出菜单中选择。下面是所有这些其他事件的图片。</p>
    <p class="dropspot"><img alt="Object Editor Other Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_OtherEvents.png">关于上面图片中列出的每个事件的更多信息，请参见以下部分。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Other_Events.htm">其他事件</a></li>
    </ul>
    
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Draw Event" src="../../assets/Images/Icons/Icon_Draw.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down20" href="#"><span data-open-text="true" data-skip-index="true">绘制</span><span data-close-text="true">绘制</span></a></p>
  <div class="droptext" data-targetname="drop-down20">
    <p class="dropspot">这个事件类别是支配你在运行游戏时在屏幕上看到的东西，它被分成各种不相关的事件。</p>
    <p class="dropspot"><img alt="Draw Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Draw.png">正如你所看到的，绘制事件类别有多种不同的事件类型。<strong>Draw Begin</strong>、<strong>Draw </strong>和<strong>Draw End</strong>是 "标准 "的绘制事件，你可能最常使用。默认情况下，每一个实例都会被调用主绘制事件，不管它是否有精灵，不过如果你将实例标记为不可见，该事件将不会被触发（所以如果你在不可见对象的绘制事件中设置了任何游戏逻辑，请记住这一点，因为它不会运行）。主绘制事件也是<span data-keyref="GameMaker Name">GameMaker</span>默认绘制实例精灵的地方，当事件中没有代码或动作时（即：你没有把它添加到对象的事件列表中）。默认绘制使用与实例相关联的精灵，并将在代码中设置的任何转换或应用的动作中绘制。</p>
    <p class="dropspot">标准的绘制事件是在<strong>绘制GUI</strong>事件<em>之前</em>和<strong>Pre Draw</strong>和<strong>Post Draw</strong>事件<em>之间</em>，这意味着在这个事件中绘制的所有东西都在<strong>绘制GUI</strong>事件的下面，而不考虑图层（即：在绘制GUI事件中绘制的东西总是在普通绘制事件中绘制的东西上面，而不考虑图层顺序）。</p>
    <p class="dropspot">请注意，以上只是对Draw Events工作方式的概述，但关于所有可用的子活动的全部细节，请参见以下章节。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Draw_Events.htm">绘制事件</a></li>
    </ul>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><img alt="Async Event" src="../../assets/Images/Icons/Icon_Async.png"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down21" href="#"><span data-open-text="true" data-skip-index="true">异步</span><span data-close-text="true">异步</span></a></p>
  <div class="droptext" data-targetname="drop-down21">
    <p class="dropspot">这个事件类别很特别，因为它所包含的事件不是由<span data-keyref="GameMaker Name">GameMaker</span>默认触发的，而是由其他一些动作的结束而触发的，比如加载一个文件，或者来自网络服务器的回复。该类别被分割成以下事件。</p>
    <p class="dropspot"><img alt="Object Editor Asynchronous Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Async.png"></p>
    <p class="dropspot">所以，说你想添加一个图像文件到<span data-keyref="GameMaker Name">GameMaker</span>。那么，你可以在一个对象的另一个事件（也许是创建事件）中编码，然后让这个对象在等待时画一个加载条（例如），轮询适当的异步事件，直到告诉<span data-keyref="GameMaker Name">GameMaker</span>文件已加载的<a class="tooltip" title="回调仅是一个函数，该函数先运行，然后在完成分配的工作后触发另一个函数（或代码块）。例如，功能sprite_add()将在加载精灵后在异步Image Loaded事件中触发回调。">回调</a>。然后你可以使用这个事件中返回的数据来做其他事情，比如换房间，或者购买物品。</p>
    <p class="dropspot">请注意，以上只是对异步事件如何工作的概述，但关于所有可用的子事件的完整细节，请参见下面的章节。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="Async_Events.htm">异步事件列表</a></li>
    </ul>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p>&nbsp;</p>
  <p>你还应该注意，你可以给事件命名，或者至少给它们一个简短的描述性文本，在事件编辑器中显示在它们旁边。要做到这一点，只需在事件的代码编辑器的第一行添加以下内容（当使用<span data-keyref="GML_Code">GML代码</span>时）。</p>
  <p class="code">/// @description Your text here</p>
  <p>因此，你可以在--例如--一个<strong>计时器</strong>事件中拥有这样的东西。</p>
  <p class="code">/// @description This is the AI Fight alarm</p>
  <p>现在在你的事件编辑器中，你会看到这个：</p>
  <p><img alt="Object Editor Named Events" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_NamedEvents.png"></p>
  <p>对于&nbsp;<span data-keyref="GML_Visual">GML Visual</span>用户来说，添加注释需要使用&nbsp;<strong>Execute Code</strong>&nbsp;动作，这个动作应该放在事件的动作的最上面，在所有其他动作之前。当你添加这个动作时，你再给它加上上面显示的那行代码，以命名该事件，例如。</p>
  <p><img alt="Naming An Event In DnD" class="center" src="../../assets/Images/Asset_Editors/Editor_Object_DnD_NamedEvents.png" style="cursor: nwse-resize;">关于上述一些活动的其他信息和一般活动的运行顺序，请见以下章节：</p>
  <ul class="colour">
    <li><a href="Event_Order.htm">事件顺序</a></li>
    <li><a href="Other_Events.htm">其他事件</a></li>
    <li><a href="Draw_Events.htm">绘制事件</a></li>
    <li><a href="Async_Events.htm">异步事件</a></li>
    <li><a href="Gesture_Events.htm">手势事件</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Objects.htm">The Object Editor</a></div>
        <div style="float:right">Next:&nbsp;<a href="Parent_Objects.htm">父对象</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Object Events
Named Events
-->
  <!-- TAGS
object_events
-->

</body></html>