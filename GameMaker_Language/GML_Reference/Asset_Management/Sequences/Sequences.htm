<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.3.9";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Sequences</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequences">
  <meta name="rh-index-keywords" content="">
  <meta name="search-keywords" content="Sequences">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_exists.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Sequences">
        <span>Sequences</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">Sequences</span></h1>
  <p>Sequences are usually created in the IDE using <a href="../../../../The_Asset_Editors/Sequences.htm">The Sequence Editor</a>, but they can also be created and edited using code. However, before looking at the functions available, it's important to understand the way that sequences are defined in <span data-keyref="GameMaker Name">GameMaker</span>&nbsp;and the different terms that will be used.</p>
  <p>To start with, at the top level, you have a <b>sequence element</b>. This is what you place on a layer in a room, either through <a href="../../../../The_Asset_Editors/Rooms.htm">The Room Editor</a> or in code using the appropriate <a href="../Rooms/Sequence_Layers/Sequence_Layers.htm">layer functions</a>. The layer element has no real properties other than an element ID value, but this ID is required to use the above mentioned layer functions to change the sequence playback or to access the sequence data.</p>
  <p>Next you have <b>sequence objects</b> and <b>sequence instances</b> much like you have general objects and instances. A sequence <i>object</i> is the base resource as you created it in <a href="../../../../Introduction/The_Asset_Browser.htm">The Asset Browser</a>&nbsp;or using the function <span class="inline3_func"><a href="sequence_create.htm">sequence_create</a></span>, and the sequence <i>instance</i> is the "copy" of that sequence object that has been placed in a room as an element on a layer. Think of sequence objects as blueprints and sequence instances as the creation from those blueprints. Sequence objects and instances are <a href="../../../GML_Overview/Structs.htm">structs</a> and - unlike regular objects - a sequence object struct can be edited at runtime, which will affect all further instances of that sequence when you create them as elements (and any editing done to a sequence object will <b>not</b> be reset by restarting the game or the room using the&nbsp;<span class="inline3_func"><a href="../Rooms/room_restart.htm">room_restart</a></span> or&nbsp;<span class="inline3_func"><a href="../../General_Game_Control/game_restart.htm">game_restart</a></span> functions). The sequence instance struct contains a few parameters to control playback and things (this is explained in more detail below) as well as the <b>sequence data</b> struct.</p>
  <p>最后，如上所述，有<b>序列数据</b>，这是另一种结构。此结构包含<i>关于序列的所有</i>数据。它包含的音轨、这些音轨的属性、播放速度等等。此结构内容的确切细节概述如下，但基本上由<b>资源轨道</b>结构和<b>参数轨道</b>结构组成，它们使用<b>关键帧数据</b>在序列播放时实际执行动作。</p>
  <p>序列元素使用房间<a href="../Rooms/Sequence_Layers/Sequence_Layers.htm">层函数</a>处理，但对于序列对象、实例和数据，我们具有以下函数：</p>
  <p>&nbsp;</p>
  <ul class="colour">
    <li><a href="sequence_exists.htm">sequence_exists</a></li>
    <li><a href="sequence_create.htm">sequence_create</a></li>
    <li><a href="sequence_destroy.htm">sequence_destroy</a></li>
    <li><a href="sequence_get.htm">sequence_get</a></li>
    <li><a href="sequence_track_new.htm">sequence_track_new</a></li>
    <li><a href="sequence_keyframe_new.htm">sequence_keyframe_new</a></li>
    <li><a href="sequence_keyframedata_new.htm">sequence_keyframedata_new</a></li>
    <li><a href="sequence_get_objects.htm">sequence_get_objects</a></li>
    <li><a href="sequence_instance_override_object.htm">sequence_instance_override_object</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>还有一个与实例关联的<strong>内建变量</strong>，可用于确定该实例是否在序列中使用：</p>
  <p>&nbsp;</p>
  <ul class="colour">
    <li><a href="in_sequence.htm">in_sequence</a></li>
  </ul>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_important.hts"><span class="important">重要</span></span>&nbsp;If your sequence has any instances in it, these instances shouldn't change their&nbsp;<span class="inline2"><a href="../Sprites/Sprite_Instance_Variables/image_xscale.htm">image_xscale</a></span> /&nbsp;<span class="inline2"><a href="../Sprites/Sprite_Instance_Variables/image_yscale.htm">image_yscale</a></span> / <span class="inline2"><a href="../Sprites/Sprite_Instance_Variables/image_angle.htm">image_angle</a></span>&nbsp;/ <span class="inline2">x</span>&nbsp;/ <span class="inline2">y</span>&nbsp;variables as they will be&nbsp;overwritten when the sequence updates each step after starting to be played.</p>
  <p>&nbsp;</p>
  <p>在使用这些函数创建或编辑序列之前，我们建议您阅读下面给出的结构属性的详细说明。如何创建新序列的一般概述如下：</p>
  <ul class="colour">
    <li>Create the new sequence object using the function&nbsp;<span class="inline3_func"><a href="sequence_create.htm">sequence_create</a></span>&nbsp;and store the sequence object index in a variable. This index gives you access to the sequence object struct.</li>
  </ul>
  <p class="code">myseq = sequence_create();</p>
  <ul class="colour">
    <li>Set the sequence object top level values like length, play mode, play speed, etc. For example:</li>
  </ul>
  <p class="code">myseq.length = 120;<br>
    myseq.loopmode = seqplay_pingpong</p>
  <ul class="colour">
    <li>Before you can add tracks to the sequence object, you need to create them, so you'd now create an array of <i>asset</i> tracks that have been defined with the function <span class="inline3_func"><a href="sequence_track_new.htm">sequence_track_new</a></span>. Note that in code, there is really no difference between asset tracks and parameter tracks - they are all simply tracks and how they behave will depend on the type of&nbsp;track you create and whether they are assigned as sub-tracks to a top level track or not. So, you would create a track for an asset, and then assign sub-tracks for the different parameters to it and these sub-tracks would act as the <i>parameter</i> tracks for the asset. The example below creates a single graphics asset track that will be added to the sequence later:</li>
  </ul>
  <p class="code">var mytracks = array_create(1);<br>
    mytracks[0] = sequence_track_new(seqtracktype_graphic);</p>
  <ul class="colour">
    <li>Each asset track needs to have some data to tell the sequence how it will look, or its position , etc... and this is added in the form of <i>keyframes</i>. At the top level for an asset track, you can set keyframes for various things (listed in the section on the Track Struct, below), but note that as these are asset track keyframes, they won't be interpolated and will simply change the value they refer to when the given frame is reached. Each keyframe is a struct that is added to an array, and then this array is assigned to the asset track. To create the keyframe struct we would call the function&nbsp;<span class="inline3_func"><a href="sequence_keyframe_new.htm">sequence_keyframe_new</a></span> and to populate the keyframe with the required data, we would use the function <span class="inline3_func"><a href="sequence_keyframedata_new.htm">sequence_keyframedata_new</a></span>:</li>
  </ul>
  <p class="code">// Create a new keyframe struct for a graphics asset track and add it to an array (as you can have multiple keys in a frame)<br>
    var graphickeys = array_create(1);<br>
    graphickeys[0] = sequence_keyframe_new(seqtracktype_graphic);<br>
    // Set the graphics keyframe top level data for the keyframe position and length, etc...<br>
    graphickeys[0].frame = 0;<br>
    graphickeys[0].length = 1;<br>
    graphickeys[0].stretch = true;<br>
    graphickeys[0].disabled = false;<br>
    // Create the channel data that will go into this keyframe (again an array, as each key can have multiple channels of keyframe data)<br>
    var graphickeydata = array_create(1);<br>
    graphickeydata[0] = sequence_keyframedata_new(seqtracktype_graphic);<br>
    graphickeydata[0].spriteIndex = spr_Platform;<br>
    graphickeydata[0].channel = 0;<br>
    // Add the keyframe data channels to the graphics track keyframe<br>
    graphickeys[0].channels = graphickeydata;<br>
    // Add the definied keyframes to the track<br>
    mytracks[0].name = "TestGraphicTrack";<br>
    mytracks[0].keyframes = graphickeys;</p>
  <ul class="colour">
    <li>我们现在需要创建一个参数轨道，我们将把它作为一个子轨道分配给我们刚刚创建的图形轨道。这将以与上面所示类似的方式完成，只是现在我们需要为轨迹命名，以显示其用途，在本例中为"位置"，因为我们将使用此轨迹在序列动画帧的过程中移动图形轨迹轨迹：</li>
  </ul>
  <p class="code">// Create a new parameter track struct for the position of the graphic<br>
    var paramtracks = array_create(1);<br>
    paramtracks[0] = sequence_track_new(seqtracktype_real);<br>
    paramtracks[0].name = "position";<br>
    paramtracks[0].interpolation = true;<br>
    // Create the keyframe struct to hold the parameter channel data and set the frame position for the keyframe<br>
    var paramkeys = array_create(2);<br>
    paramkeys[0] = sequence_keyframe_new(seqtracktype_real);<br>
    paramkeys[0].frame = 0;<br>
    paramkeys[1] = sequence_keyframe_new(seqtracktype_real);<br>
    paramkeys[1].frame = 120;<br>
    // Create the keyframe data structs<br>
    var paramkeydata1 = array_create(2);<br>
    paramkeydata1[0] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata1[0].channel = 0; // Channel 0 for a position track is the X position<br>
    paramkeydata1[0].value = 0;<br>
    paramkeydata1[1] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata1[1].channel = 1; // Channel 1 for a position track is the Y position<br>
    paramkeydata1[1].value = 0;<br>
    var paramkeydata2 = array_create(2);<br>
    paramkeydata2[0] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata2[0].channel = 0;<br>
    paramkeydata2[0].value = room_width;<br>
    paramkeydata2[1] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata2[1].channel = 1;<br>
    paramkeydata2[1].value = room_height;<br>
    // Assign the keyframe data structs to the channels for each key<br>
    paramkeys[0].channels = paramkeydata1;<br>
    paramkeys[1].channels = paramkeydata2;<br>
    // Assign the keys to the parameter track<br>
    paramtracks[0].keyframes = paramkeys;</p>
  <ul class="colour">
    <li>完成后，要做的最后一件事是将参数轨迹作为子轨迹分配给我们在开始时创建的主图形资源轨迹，然后将这些轨迹分配给序列，然后我们可以在房间中创建一个实例：</li>
  </ul>
  <p class="code">mytracks[0].tracks = paramtracks;<br>
    myseq.tracks = mytracks;<br>
    layer_sequence_create("Assets_1", 0, 0, myseq);</p>
  <p>上面的指令创建一个非常简单的序列对象，该对象在序列<i>的(0，0)位置</i>绘制一个精灵，然后将其移动到右下角并循环返回。如上所述，需要访问不同结构以给出或获取序列数据的多个位置，以下各节列出了这些结构包含的所有不同属性：</p>
  <ul class="colour">
    <li><a name="object"></a><a href="Sequence_Structs/The_Sequence_Object_Struct.htm"><label for="1">序列对象结构</label></a></li>
    <li><a name="instance"></a><a href="Sequence_Structs/The_Sequence_Instance_Struct.htm"><label for="2">序列实例结构</label></a></li>
    <li><a name="track"></a><a href="Sequence_Structs/The_Track_Struct.htm"><label for="3">轨迹结构</label></a></li>
    <li><a name="keyframe"></a><a href="Sequence_Structs/The_Keyframe_Struct.htm"><label for="4">关键帧结构</label></a></li>
    <li><a name="keyframe_data"></a><a href="Sequence_Structs/The_Keyframe_Data_Struct.htm"><label for="5">关键帧数据结构</label></a></li>
  </ul>
  <p>&nbsp;</p>
  <p>最后，可以向序列添加代码，这些序列可以作为<strong>事件</strong>时刻<strong>或作为</strong>广播消息<strong>触发。 详见下页：</strong></p>
  <ul class="colour">
    <li><a href="Sequence_Events_Moments_Broadcast.htm">事件、时刻和广播消息</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Asset_Management.htm">资源管理</a></div>
        <div style="float:right">Next: <a href="../Fonts/Fonts.htm">字体</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Sequences
-->
  <!-- TAGS
sequence_functions
-->

</body></html>