<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "6.2.0_2";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Creating An Extension</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css">
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page detailing how to create a generic extension">
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension">
  <meta name="search-keywords" content="creating extensions">
<meta name="brsnext" value="The_Asset_Editors/Extension_Creation/Android_Extensions.htm"><meta name="brsprev" value="The_Asset_Editors/Extension_Creation/Disabling_Extensions.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Creating An Extension">
        <span>Creating An Extension</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>创建一个扩展</h1>
  <p>要创建一个扩展，你首先需要右击<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png"><a href="../../Introduction/The_Asset_Browser.htm">资源浏览器</a>中的任何地方，选择<strong>创建-扩展</strong>。这将在工作区中为你新创建的资源打开扩展属性。</p>
  <p><img alt="Extension Properties" class="center" height="519" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" width="486">如果你没有看到这个，你可以在资源浏览器中双击你的扩展资源来打开它的属性窗口，或者在它已经打开的情况下关注它。</p>
  <p>现在已经准备好让你添加所需的文件和功能，你也可以在这里给扩展名（按照通常的惯例，只有字母/数字，除了下划线"_"，没有特殊符号）。如果你愿意，你还可以为扩展设置版本号。</p>
  <p>在 "Copies To "下，你可以选择这个扩展被导出的平台。对于一个简单的GML扩展，你不需要担心这个问题，因为它将在所有平台上运行，然而，如果你正在创建一个特定平台的扩展（如Android），那么你需要确保它<em>不要</em>导出到任何不兼容的平台（如iOS，控制台等）。</p>
  <h2>占位符文件</h2>
  <p>要向新的扩展名添加文件，你需要点击菜单图标<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png">&nbsp;并选择一个占位符文件（"添加占位符"）或导入目标平台所需的实际文件（"添加文件"）。</p>
  <p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png"></p>
  <p>一个 "通用 "占位符是一个可以是任何类型的文件，除了那些特定平台所要求的（例如没有<span class="inline">DLL</span>或<span class="inline">SO</span>文件），它将不会被使用，除了作为一个 "链接器 "文件来连接一组函数或常量与给定的扩展（通常它只用于iOS和Android扩展，这将在下面的章节解释这些目标）。你还可以添加 "GML "和 "JS "占位符文件，以便更具体地使用。</p>
  <h2>添加文件</h2>
  <p>通常情况下，你不需要使用占位符，除非你是为iOS和Android构建的，所以你会选择 "添加文件"&nbsp;选项，根据他们的目标平台，添加以下任何一个文件。</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>：这是一个只用GameMaker语言制作的文件，与所有平台兼容。（事实上，很多GML扩展无法在HTML5目标上正常兼容）</li>
    <li class="dropspot"><span class="inline">.js</span>：这是一种JavaScript扩展格式，只与HTML5目标兼容。</li>
    <li class="dropspot"><span class="inline">.dll</span>：这是一种动态链接库扩展格式，只与Windows&nbsp;和Xbox目标兼容（每个目标都需要不同的<span class="inline">*.dll</span>文件与其规格兼容）。</li>
    <li class="dropspot"><span class="inline">.dylib</span>：这相当于Mac的DLL，只与Mac目标兼容（不与iOS兼容）。</li>
    <li class="dropspot"><span class="inline">.so</span>：这相当于Linux的DLL，只与Ubuntu（Linux）目标兼容。</li>
    <li class="dropspot"><span class="inline">.prx</span>：这是一种为PlayStation目标添加功能的文件格式（每个目标都需要一个与其规格兼容的不同的<span class="inline">*.prx</span>文件）。</li>
  </ul>
  <p>你会注意到，没有<strong>Android </strong>或<strong>iOS</strong>的文件类型，这是因为它们的设置略有不同。再往下看，你可以找到关于如何设置它们的解释，但首先让我们看看如何为任何一个目标平台创建一个普通的GML扩展，因为这个过程对所有这些平台都是一样的。</p>
  <h2>创建一个GML扩展</h2>
  <p>首先，你需要创建将被使用的文件。对于GML扩展，这将是一个文本文件（以<span class="inline">.gml</span>为扩展名保存），其格式是这样的：</p>
  <p class="code">#define c_alice_blue<br>
    return make_color_rgb(240,248,255);<br>
    <br>
    <br>
    #define instance_create_colour<br>
    var i = instance_create_layer(argument0, argument1, argument2, argument3);<br>
    with (i)<br>
    {<br>
    &nbsp; &nbsp; image_blend = argument3;<br>
    }<br>
    return i;
  </p>
  <p>正如你所看到的，我们以一个<span class="inline">#define</span>的调用开始每个部分，在上面的例子中，它被用来定义两个函数。让我们来看看定义函数的每一部分。</p>
  <ul class="colour">
    <li><span class="inline">#define</span>语句用于定义一个具有给定名称的新函数。</li>
    <li>该语句之后是函数代码，它使用<span class="inline">argument0</span>、<span class="inline">argument1</span>等变量来访问调用时传入函数的参数。</li>
    <li>在最后，我们有一个<a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm">return</a>语句用来将数据从扩展中返回到调用函数的GML代码中。</li>
  </ul>
  <p>如果你要写一个<span class="inline">DLL</span>或JavaScript扩展，那么这个过程将是类似的，但要用正确的语言来写扩展的文件格式。</p>
  <p>一旦你完成了这些，你需要将文件添加到扩展名中（使用 "添加文件 "选项），这将为文件属性的扩展名链出一个新窗口。</p>
  <p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050"></p>
  <p>在这里，你将选择扩展的目标平台（对于GML你将选择它们全部），以及重命名扩展文件和设置其他一些细节，我们稍后会介绍这些。</p>
  <p class="note"><strong>注意</strong>：将文件添加到扩展名中会将其复制到项目目录中，这意味着任何进一步的修改都必须在该副本中进行，以便在游戏中看到它们。你可以在资源浏览器中右键点击你的扩展名，并选择 "在资源管理器中打开 "来找到该副本。</p>
  <h2>添加功能</h2>
  <p>编辑器应该自动填入我们的GML文件中的函数，但如果没有，你可以通过点击函数菜单按钮<img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png">，选择你所需要的，手动添加它们。</p>
  <p class="dropspot"><img alt="Add functions/Constants To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_AddFunctions.png"></p>
  <p>选择 "添加函数 "将允许你添加一个函数到扩展中，然后可以在<span data-keyref="GameMaker Name">GameMaker</span>中调用，就像任何内置函数一样。<span>一旦函数被添加，下面的窗口就会打开，让你定义函数属性（或者你可以双击函数来打开它）：</span></p>
  <p class="dropspot"><img alt="Function Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionEditor.png"></p>
  <p>在上图中，我们在函数编辑器中填入了我们在GML扩展文件中定义的函数<span class="inline">instance_create_colour()</span>的详细信息（注意，这个函数编辑器窗口并不只是用来定义GML函数的--它在所有扩展类型中都是一样的）。让我们来看看可以为一个函数定义的每个选项。</p>
  <ul class="colour">
    <li>你可以看到，我们给了这个函数一个<em>Name</em>，这是你在项目中调用这个函数时要使用的；注意，这个名字不一定要和扩展中使用的名字一致--你可以给它起任何你喜欢的名字，然后用<em>External Name</em>字段将它和扩展中定义的实际名字联系起来：<img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_FunctionNames.png"></li>
    <li>下面有一个部分用于定义<em>帮助</em>文本，这是将在代码完成弹出窗口中显示的文本，也是代码编辑器底部的帮助文本。</li>
    <li>接下来，您可以定义<em>返回类型</em> ，它可以是<strong>双精度</strong>(实数<a class="tooltip" title="浮点数是包含浮点小数的数字。例如，数字5.5、0.001和-2,345.6789是浮点数。没有小数位的数字称为整数。">浮点</a>值)或<strong>字符串</strong> ; 如果外部函数没有返回任何值，那么这并不重要。</li>
    <li>在此之下，你可以定义函数将接受的参数。这些参数可以是<strong>双数</strong>或<strong>字符串</strong>，你可以通过点击添加按钮<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18">来添加它们。通过点击删除按钮<img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png">来删除它们。<br> <br> 如果你的函数可以接受可变数量的参数（意味着它有一些可选的参数），你应该确保选中底部的 "可变长度参数 "复选框。 </li>
  </ul>
  <p class="note"><strong>注意</strong>：如果该函数是Windows、Mac或Ubuntu（分别为<span class="inline">dll</span>、<span class="inline">dylib</span>或&nbsp;<span class="inline">so</span>）的本地扩展的一部分，并且它有四个以上的参数，<strong>所有参数必须是同一类型</strong>。</p>
  <p>一旦你完成了所有这些，那么这个函数就可以在项目中使用了; 它现在会以自动完成的形式显示，并且还会有颜色编码:</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_GMLFunctionExample.png">定义的函数也可以被设置为<strong>初始函数</strong>或<strong>最终函数</strong>，这意味着它们将在游戏开始（初始）和游戏结束（最终）时被自动调用。</p>
  <p class="note"><strong>重要的是！</strong>所有平台都支持Init函数调用，<strong>但不是所有平台都会执行Final函数调用。</strong>这是因为某些平台会直接关闭应用程序，而不给任何通知或时间让这个函数被调用。受此影响的平台主要是&nbsp;<strong>iOS</strong>、<strong>Android</strong>、<strong>HTML5</strong>、<strong>PlayStation</strong>和<strong>Xbox</strong>。</p>
  <h2>宏</h2>
  <p>你的另一个选择是创建一个<strong>宏</strong>。宏可以是一个<a class="tooltip" title="常量是一个术语，用于描述在程序执行期间不会更改的命名值。 GameMaker Studio 2具有许多内置常量（例如os_windows），但您也可以创建自己的常量值以用于项目（称为宏）和扩展。">常量</a>&nbsp;值，也可以是一个简短的代码片段（关于宏的更多信息，请参见<a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">这里</a>）。例如，我们可以从之前定义的GML扩展中删除<span class="inline">c_alice_blue</span>&nbsp;函数，而将其改为宏。要创建一个宏，你可以简单地点击扩展属性中的 "宏 "按钮，它将打开以下窗口。</p>
  <p class="dropspot"><img alt="Macro Editor" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_MacroEditor.png"></p>
  <p>这里的编辑器几乎是不言自明的：你给出宏的名称和它的常量值，或者一行简短的代码。注意，如果该宏是一行代码<strong>，那么每次调用该宏时都会重新运行代码</strong>。</p>
  <h2 id="h1">创建扩展选项</h2>
  <p>点击"<strong>扩展选项</strong>"旁边的齿轮图标，创建或修改你的扩展选项。</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_OpenExtensionOptions.png">在确认提示上点击"<strong>是</strong>"后，你会看到一个新的窗口，在这里你可以添加新的扩展选项。</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Options_Edit.png">你可以给每个扩展选项一个名称，一个默认值，和一个数据类型。名称是你在扩展代码中内部使用的，用来检索该选项的值。</p>
  <p>除了使用 "添加选项 "添加选项外，您还可以使用 "添加章节 "添加章节。&nbsp;章节<strong>不是</strong>一个选项，而只是显示在扩展编辑器主窗口的一个标题。如果你有很多选项，想清理最终用户看到的选项列表，可以使用这个方法。</p>
  <p>可以创建以下类型的选项：</p>
  <ul class="colour">
    <li><strong>Boolean</strong>：这将创建一个真/假复选框。</li>
    <li><strong>Number</strong> : 这是一个实数。</li>
    <li><strong>String</strong> : 这是一个文本字符串。</li>
    <li><strong>FilePath</strong> : 这是文件的路径。它允许您使用操作系统的浏览器浏览文件。</li>
    <li><strong>FolderPath</strong>：这是一个指向文件夹/目录的路径。它允许你使用你的操作系统的资源管理器来浏览一个文件夹。</li>
    <li><strong>List</strong>：这是一个下拉菜单，可以从预定义的项目列表中选择一个单项。</li>
  </ul>
  <p>你也可以点击一个选项旁边的&nbsp;<img class="icon" src="../../assets/Images/Icons/Icon_Cog.png">&nbsp;齿轮图标，给它一个可选的<strong>显示名称</strong>和<strong>描述</strong>（在悬停在显示名称上时以工具提示出现）。</p>
  <p>在额外窗口中，你也可以选择将这个选项导出到与游戏捆绑的<strong>options.ini</strong>文件中。</p>
  <p>最后，你可以选择从编辑器中隐藏该选项，让使用该扩展的终端用户看不到它。</p>
  <h3>使用扩展选项</h3>
  <p>你可以通过使用&nbsp;<a href="../../GameMaker_Language/GML_Reference/Asset_Management/Extensions/Extensions.htm">扩展函数</a>在运行时检索扩展的选项值。</p>
  <p>你也可以在你的&nbsp;<a href="../../Settings/Runner_Details/Compiler_Batch_Files.htm">编译器批处理文件/脚本</a>&nbsp;中通过使用<span class="inline2">YYEXTOPT_&lt;扩展名&gt;_&lt;选项名&gt;</span>来检索你的扩展选项。</p>
  <p>只有当扩展有在运行时使用的功能时，扩展选项才会在运行时可用。然而，无论扩展的使用情况如何，选项将始终被导出到INI文件（如果选项被启用）和批处理脚本中。</p>
  <h2>代理文件</h2>
  <p>当使用多个目标平台时，值得注意的是，你可以创建一个只有一套函数/宏的单一扩展，它将在<em>所有</em>平台上工作。这可以通过在你的游戏中只添加一个链接库作为扩展，并将其他链接库放入<strong>扩展属性</strong>窗口的<strong>代理文件</strong>列表中来实现。</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_ProxyFiles.png">例如，假设你有一个Windows扩展的<span class="inline"><strong>dll </strong></span>"<span class="inline">Haggis.dll</span>"。你可以简单地将这个<span class="inline"><strong>dll</strong></span>&nbsp;复制为Mac的<span class="inline"><strong>DyLib</strong></span>，将其命名为"<span class="inline"><strong>libHaggis.dylib</strong></span>"，并确保内部函数名称与原Windows <span class="inline"><strong>dll</strong></span>一致。然后，这个<strong><span class="inline">DyLib</span></strong>将被添加到代理文件中，当游戏在Mac目标上运行时被设置为导出，<span data-keyref="GameMaker Name">GameMaker</span>将在调用扩展函数时自动使用它。</p>
  <p>要添加代理文件，只需单击“属性”窗口中所选资源文件的<img alt="Add Argument Icon" class="icon" height="18" src="../../assets/Images/Icons/Icon_AddArgument.png" width="18">按钮，然后浏览到文件位置。一旦它被添加，你可能需要更新扩展的目标添加适当的模块，当你下一次运行你的游戏，它将包括作为该平台的代理。您也可以通过单击将删除所选代理文件的<img alt="Remove Argument Icon" class="icon" src="../../assets/Images/Icons/Icon_RemoveArgument.png">按钮来删除代理文件。</p>
  <p>一旦你添加了你的代理文件，它们将被复制到你的项目的Extensions文件夹中（你可以通过右击<img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png">&nbsp;扩展名，选择<em>在资源管理器中打开</em>找到它们），所以如果你需要编辑它们，你应该编辑与游戏捆绑的复制文件而不是导入的源文件，因为<span data-keyref="GameMaker Name">GameMaker</span>将使用项目中的文件进行编译。</p>
  <h2 id="h">命名规则</h2>
  <p>你的代理文件必须遵循下面列出的命名规则，这一点非常重要，因为<span data-keyref="GameMaker Name">GameMaker</span>会解析这些名称，并根据文件的扩展名和名称为文件分配目标模块，并自动为你链接文件。如果你不遵循这些约定，你的游戏在运行时可能无法工作，因为<span data-keyref="GameMaker Name">GameMaker</span>将无法确定要使用哪个文件，所以它将无法正常加载文件。</p>
  <p>下面给出了每个目标平台的命名惯例：</p>
  <table>
    <colgroup>
      <col style="width: 173px;">
      <col style="width: 715px;">
    </colgroup>
    <tbody>
      <tr>
        <th>平台</th>
        <th>Names</th>
      </tr>
      <tr>
        <td>Windows 32bit Runtime</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td>Windows 64bit Runtime</td>
        <td><span class="inline">&lt;<em>N</em><em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td>Ubuntu (Linux)</td>
        <td><span class="inline">&lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;.so,<br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_linux.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_linux.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_arm.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_arm.so,<br>
            <span class="inline">lib&lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_linux_arm.so,</span><br>
            <br>
            &lt;<em>Name</em>&gt;_arm64.so, lib&lt;<em>Name</em>&gt;_arm64.so, lib&lt;<em>Name</em>&gt;_linux_arm64.so,<br>
            <br>
            &lt;<em>Name</em>&gt;_arm64-v8.so,<br>
            lib&lt;<em>Name</em>&gt;_arm64-v8.so, lib&lt;Name&gt;_linux_arm64-v8.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span></span>&gt;_linux_armeabi-v7a.so</span></td>
      </tr>
      <tr>
        <td>macOS</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td>HTML5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td>PS4</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps4.prx, lib&lt;<em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td>PS5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps5.prx, lib&lt;<em>Name</em>&gt;_ps5.prx</span></td>
      </tr>
      <tr>
        <td>Xbox One</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>Name</em>&gt;_xboxone.dll</span></td>
      </tr>
      <tr>
        <td>Xbox Series X|S</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>Name</em>&gt;_xboxseriesxs.dll</span></td>
      </tr>
    </tbody>
  </table>
  <p>使用上述惯例，你要把<span class="inline">&lt;<em>Name</em>&gt;</span>部分换成你要添加代理文件的基础文件的名称。</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Extensions.htm">The Extension Editor</a></div>
        <div style="float:right">Next: <a href="Android_Extensions.htm">Android 扩展</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->

</body></html>