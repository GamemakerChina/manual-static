<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.3.9";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Sequences</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequences">
  <meta name="rh-index-keywords" content="">
  <meta name="search-keywords" content="Sequences">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_exists.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Sequences">
        <span>Sequences</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>序列</h1>
  <p>序列通常使用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>在IDE中创建，但也可以使用代码创建和编辑序列。然而，在查看可用函数之前，了解<span data-keyref="GameMaker Name">GameMaker</span>中定义序列的方式以及将使用的不同术语是很重要的。</p>
  <p>首先，在顶层，您有一个<b>序列元素</b>。 这是您通过"房间编辑器"或使用适当的<a href="../Rooms/Sequence_Layers/Sequence_Layers.htm">层函数</a>在代码中放置在房间的图层上的内容。 层元素除了元素ID值之外没有实际属性，但是需要该ID来使用上述层函数来改变序列回放或访问序列数据。</p>
  <p>接下来，您有<b>序列对象</b>和<b>序列实例</b>，就像您有一般对象和实例一样。序列<i>对象</i>是您在<b>资源浏览器</b>中或使用函数<a href="sequence_create.htm"><span class="inline">sequence_create()</span></a>创建时的基本资源，序列<i>实例</i>是该序列对象的"副本"，该序列对象作为层上的元素放置在房间中。将序列对象视为蓝图，将序列实例视为这些蓝图的创建。序列对象和实例是<a href="../../../GML_Overview/Structs.htm">结构</a>，与常规对象不同，序列对象结构可以在运行时被编辑，当您将序列对象创建为元素时，这将影响该序列的所有其他实例(对序列对象所做的任何编辑都不会<b>通过使用</b>room_restart()<span class="inline">或</span>game_restart()<span class="inline">函数重新启动游戏或房间来重置</span>)。序列实例结构包含一些参数来控制回放和东西(下面将更详细地说明)以及<b>序列数据</b>结构。</p>
  <p>最后，如上所述，有<b>序列数据</b>，这是另一种结构。此结构包含<i>关于序列的所有</i>数据。它包含的音轨、这些音轨的属性、播放速度等等。此结构内容的确切细节概述如下，但基本上由<b>资源轨道</b>结构和<b>参数轨道</b>结构组成，它们使用<b>关键帧数据</b>在序列播放时实际执行动作。</p>
  <p>序列元素使用房间<a href="../Rooms/Sequence_Layers/Sequence_Layers.htm">层函数</a>处理，但对于序列对象、实例和数据，我们具有以下函数：</p>
  <p>&nbsp;</p>
  <ul class="colour">
    <li><a href="sequence_exists.htm">sequence_exists</a></li>
    <li><a href="sequence_create.htm">sequence_create</a></li>
    <li><a href="sequence_destroy.htm">sequence_destroy</a></li>
    <li><a href="sequence_get.htm">sequence_get</a></li>
    <li><a href="sequence_track_new.htm">sequence_track_new</a></li>
    <li><a href="sequence_keyframe_new.htm">sequence_keyframe_new</a></li>
    <li><a href="sequence_keyframedata_new.htm">sequence_keyframedata_new</a></li>
    <li><a href="sequence_get_objects.htm">sequence_get_objects</a></li>
    <li><a href="sequence_instance_override_object.htm">sequence_instance_override_object</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>还有一个与实例关联的<strong>内建变量</strong>，可用于确定该实例是否在序列中使用：</p>
  <p>&nbsp;</p>
  <ul class="colour">
    <li><a href="in_sequence.htm">in_sequence</a></li>
  </ul>
  <p class="note"><strong>重要</strong>如果您的序列中包含任何实例，这些实例不应更改其<span class="inline"><span style="font-size:14px;">image_xscale</span></span>/<span class="inline">image_yscale<span style="font-size:14px;">/</span></span>image_angle<span class="inline"><span style="font-size:14px;">/</span></span>x<span class="inline"><span style="font-size:14px;">/</span></span>y<span class="inline"><span style="font-size:14px;">变量，因为当序列在开始播放后更新每个步骤时，它们将被覆盖。</span></span></p>
  <p>&nbsp;</p>
  <p>在使用这些函数创建或编辑序列之前，我们建议您阅读下面给出的结构属性的详细说明。如何创建新序列的一般概述如下：</p>
  <ul class="colour">
    <li>使用函数<span class="inline"><a href="sequence_create.htm">sequence_create()</a></span>创建新的序列对象，并将序列对象索引存储在变量中。此索引允许您访问序列对象结构。</li>
  </ul>
  <p class="code">myseq = sequence_create();</p>
  <ul class="colour">
    <li>设置序列对象的顶级值，如长度、播放模式、播放速度等。例如：</li>
  </ul>
  <p class="code">myseq.length = 120;<br>
    myseq.loopmode = seqplay_pingpong</p>
  <ul class="colour">
    <li>在将轨迹添加到sequence对象之前，您需要创建它们，因此您现在需要创建一个<i>asset</i>轨迹的数组，这些轨迹是使用函数<a href="sequence_track_new.htm"><span class="inline">sequence_track_new()</span></a>定义的。请注意，在代码中，资源轨迹和参数轨迹之间实际上没有区别-它们都是简单的轨迹，它们的行为方式将取决于您创建的轨迹类型，以及它们是否作为子轨迹分配给顶级轨迹。因此，您可以为资源创建一个轨迹，然后为其分配不同参数的子轨迹，这些子轨迹将充当资源的<i>参数</i>轨迹。下面的示例创建了一个图形资源轨迹，稍后将添加到序列中：</li>
  </ul>
  <p class="code">var mytracks = array_create(1);<br>
    mytracks[0] = sequence_track_new(seqtracktype_graphic);</p>
  <ul class="colour">
    <li>每个资源轨道需要一些数据来告诉序列其外观、位置等... 并以<i>关键帧</i>的形式添加。 在资源跟踪的顶层，您可以为各种对象设置关键帧(在下面的"跟踪结构"部分列出)，但请注意，由于这些是资源跟踪关键帧，所以它们不会被插值，而只是在达到给定帧时更改它们所引用的值。每个关键帧是添加到数组的结构，然后将该数组分配给资源轨迹。若要创建关键帧结构，我们将调用函数<a href="sequence_keyframe_new.htm"><span class="inline">sequence_keyframe_new()</span></a>，并使用函数<a href="sequence_keyframedata_new.htm"><span class="inline">sequence_keyframedata_new()</span></a>：</li>
  </ul>
  <p class="code">// Create a new keyframe struct for a graphics asset track and add it to an array (as you can have multiple keys in a frame)<br>
    var graphickeys = array_create(1);<br>
    graphickeys[0] = sequence_keyframe_new(seqtracktype_graphic);<br>
    // Set the graphics keyframe top level data for the keyframe position and length, etc...<br>
    graphickeys[0].frame = 0;<br>
    graphickeys[0].length = 1;<br>
    graphickeys[0].stretch = true;<br>
    graphickeys[0].disabled = false;<br>
    // Create the channel data that will go into this keyframe (again an array, as each key can have multiple channels of keyframe data)<br>
    var graphickeydata = array_create(1);<br>
    graphickeydata[0] = sequence_keyframedata_new(seqtracktype_graphic);<br>
    graphickeydata[0].spriteIndex = spr_Platform;<br>
    graphickeydata[0].channel = 0;<br>
    // Add the keyframe data channels to the graphics track keyframe<br>
    graphickeys[0].channels = graphickeydata;<br>
    // Add the definied keyframes to the track<br>
    mytracks[0].name = "TestGraphicTrack";<br>
    mytracks[0].keyframes = graphickeys;</p>
  <ul class="colour">
    <li>我们现在需要创建一个参数轨道，我们将把它作为一个子轨道分配给我们刚刚创建的图形轨道。这将以与上面所示类似的方式完成，只是现在我们需要为轨迹命名，以显示其用途，在本例中为"位置"，因为我们将使用此轨迹在序列动画帧的过程中移动图形轨迹轨迹：</li>
  </ul>
  <p class="code">// Create a new parameter track struct for the position of the graphic<br>
    var paramtracks = array_create(1);<br>
    paramtracks[0] = sequence_track_new(seqtracktype_real);<br>
    paramtracks[0].name = "position";<br>
    paramtracks[0].interpolation = true;<br>
    // Create the keyframe struct to hold the parameter channel data and set the frame position for the keyframe<br>
    var paramkeys = array_create(2);<br>
    paramkeys[0] = sequence_keyframe_new(seqtracktype_real);<br>
    paramkeys[0].frame = 0;<br>
    paramkeys[1] = sequence_keyframe_new(seqtracktype_real);<br>
    paramkeys[1].frame = 120;<br>
    // Create the keyframe data structs<br>
    var paramkeydata1 = array_create(2);<br>
    paramkeydata1[0] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata1[0].channel = 0; // Channel 0 for a position track is the X position<br>
    paramkeydata1[0].value = 0;<br>
    paramkeydata1[1] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata1[1].channel = 1; // Channel 1 for a position track is the Y position<br>
    paramkeydata1[1].value = 0;<br>
    var paramkeydata2 = array_create(2);<br>
    paramkeydata2[0] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata2[0].channel = 0;<br>
    paramkeydata2[0].value = room_width;<br>
    paramkeydata2[1] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata2[1].channel = 1;<br>
    paramkeydata2[1].value = room_height;<br>
    // Assign the keyframe data structs to the channels for each key<br>
    paramkeys[0].channels = paramkeydata1;<br>
    paramkeys[1].channels = paramkeydata2;<br>
    // Assign the keys to the parameter track<br>
    paramtracks[0].keyframes = paramkeys;</p>
  <ul class="colour">
    <li>完成后，要做的最后一件事是将参数轨迹作为子轨迹分配给我们在开始时创建的主图形资源轨迹，然后将这些轨迹分配给序列，然后我们可以在房间中创建一个实例：</li>
  </ul>
  <p class="code">mytracks[0].tracks = paramtracks;<br>
    myseq.tracks = mytracks;<br>
    layer_sequence_create("Assets_1", 0, 0, myseq);</p>
  <p>上面的指令创建一个非常简单的序列对象，该对象在序列<i>的(0，0)位置</i>绘制一个精灵，然后将其移动到右下角并循环返回。如上所述，需要访问不同结构以给出或获取序列数据的多个位置，以下各节列出了这些结构包含的所有不同属性：</p>
  <ul class="colour">
    <li><a name="object"></a><a href="Sequence_Structs/The_Sequence_Object_Struct.htm"><label for="1">序列对象结构</label></a></li>
    <li><a name="instance"></a><a href="Sequence_Structs/The_Sequence_Instance_Struct.htm"><label for="2">序列实例结构</label></a></li>
    <li><a name="track"></a><a href="Sequence_Structs/The_Track_Struct.htm"><label for="3">轨迹结构</label></a></li>
    <li><a name="keyframe"></a><a href="Sequence_Structs/The_Keyframe_Struct.htm"><label for="4">关键帧结构</label></a></li>
    <li><a name="keyframe_data"></a><a href="Sequence_Structs/The_Keyframe_Data_Struct.htm"><label for="5">关键帧数据结构</label></a></li>
  </ul>
  <p>&nbsp;</p>
  <p>最后，可以向序列添加代码，这些序列可以作为<strong>事件</strong>时刻<strong>或作为</strong>广播消息<strong>触发。 详见下页：</strong></p>
  <ul class="colour">
    <li><a href="Sequence_Events_Moments_Broadcast.htm">事件、时刻和广播消息</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Asset_Management.htm">资源管理</a></div>
        <div style="float:right">Next: <a href="../Fonts/Fonts.htm">字体</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Sequences
-->
  <!-- TAGS
sequence_functions
-->

</body></html>