<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.17.6.0_3";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Reference page for json_stringify">
  <meta name="rh-index-keywords" content="json_stringify">
  <meta name="search-keywords" content="json_stringify">
  <meta name="is_pure" content="true">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="json_stringify">
        <span>json_stringify</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">json_stringify</span></h1>
  <p>通过这个函数，您可以将单个或嵌套的结构和数组转换为有效的 JSON 字符串。</p>
  <p>你提供使用的初始值 (数组索引或结构引用)，然后函数将其"字符串化 (stringify)"，将其转换为 JSON 字符串 (将 GameMaker 数组转换为 JSON 数组，和 GameMaker 结构转换为 JSON 对象)。 您可以选择"美化输出"它，这意味着最终的 JSON 将被格式化以便于阅读。</p>
  <p>在使用这个函数时，有一些重要的事情需要注意:</p>
  <ul class="colour">
    <li>函数将&nbsp;<em> 不会 </em>&nbsp;将 DS 映射、列表或任何其他数据结构转换为 JSON，并将简单地存储结构的内部索引值 (这没什么用，因为索引会在游戏运行期间发生变化)，因此你不应该尝试字符串化任何可能包含数据结构引用的值 (因为你有 <a href="json_encode.htm"><span class="inline">json_encode()</span></a>)。</li>
    <li>该函数将几乎任何值转换为“有效的”JSON 字符串，但是由于 JSON 标准的操作方式，字符串中包含的实际值可能不是您所期望的 :<br><br>“JSON 与数字无关。在任何编程语言中，都可以有各种容量和补数的数字类型，固定的或浮动的，二进制或十进制的。这可能会使不同编程语言之间的交换变得困难。相反，JSON 只提供人类使用的数字表示 : 数字序列。所有的编程语言都知道如何理解数字序列，即使它们在内部表示上存在分歧。“<br><br> 更多信息请参见 <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">ECMA JSON 标准 </a>。</li>
    <li>如果提供的结构包含任何循环引用，例如回溯到主结构本身的引用 (形成无限循环) 或对形成这种无限循环的主结构内的结构的引用，则此类引用将在字符串化时转换为 <span class="inline2">"null"</span>。</li>
    <li>如果您在要转换为 JSON 的值中包含一个 int64，如果它在 int32 的有效范围内，它将把它写成 <i>int</i>，如果它可以在不损失精度的情况下写成 <i>double</i> 或 (如果这两种情况都不适用) 作为 <i> 字符串 </i>，其前面有标识符“<span class="inline">@i64@</span>”，后面有“<span class="inline">$i64$</span>”。 当您再次解析 JSON 时，<span data-keyref="GameMaker Name">GameMaker</span> 将选取这些标识符并将值重新转换回 int64。 这确实意味着如果 JSON 用于服务器或其他一些非 GameMaker 目标，则这些值将不合适，因此应避免使用。</li>
    <li>如果包含<span>&nbsp;</span><span class="inline2">infinity</span>，<span>&nbsp;</span><span class="inline2">-infinity</span><span>&nbsp;</span>或<span>&nbsp;</span><span class="inline2">NaN</span>&nbsp;在要转换为 JSON 的值，它们将被编码为字符串，因为这些值不是 JSON 标准的一部分，并且在解析得到的 JSON 时，它们将<span></span><strong>不会<span></span></strong>转换回它们的运行时值，而将保留为字符串。请注意，在字符串注册时，<span>&nbsp;</span><span class="inline2">NaN</span><span>&nbsp;</span>将转换为<span class="inline2">"nan"</span>(小写)。<ul><li><a href="../../../GML_Overview/Data_Types.htm"> 然而，在 HTML5 上，<span class="inline2">infinity</span></a> 和 <a href="../../../GML_Overview/Data_Types.htm"><span class="inline2">NaN</span></a> 将分别作为 <span class="inline2">"@@infinity$$"</span>(<span class="inline2">"@@-infinity$"</span> 表示否定)和 <span class="inline2">"@@NaN$$"</span> 写入 JSON。当 JSON 加载了 <span class="inline3_func"><a href="json_parse.htm">json_parse</a></span>时，这些值将正确加载到内存中.</li></ul></li>
    <li>如果在结构中包含 <a href="../../../GML_Overview/Data_Types.htm"><span class="inline2">undefined</span></a>，它将被编码为 <span class="inline2">"null"</span>，在读回 GameMaker 时，您将获得 <a href="../../../GML_Overview/Data_Types.htm"><span class="inline2">pointer_null</span></a>。</li>
    <li>将任何返回的 JSON 字符串写入 <span class="inline">ini</span> 文件时应小心，因为 <span class="inline">ini</span> 规范在使用引号和转义字符时可能会导致问题。 有关详细信息，请参阅函数 <a href="../Ini_Files/ini_write_string.htm"><span class="inline">ini_write_string()</span></a>。</li>
  </ul>
  <p>&nbsp;</p>
  <h4>语法:</h4>
  <p class="code"><span data-field="title" data-format="default">json_stringify</span>(val, [pretty_print]);</p>
  <table>
    <tbody>
      <tr>
        <th>参数</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td>val</td>
        <td><span data-keyref="Type_Struct"><a target="_blank" href="../../../../../GameMaker_Language/GML_Overview/Structs.htm">Struct</a></span>&nbsp;or&nbsp;<span data-keyref="Type_Array"><a target="_blank" href="../../../../../GameMaker_Language/GML_Overview/Arrays.htm">Array</a></span></td>
        <td>要转换为 JSON 字符串的结构或数组的引用值</td>
      </tr>
      <tr>
        <td>pretty_print</td>
        <td><span data-keyref="Type_Bool"><a target="_blank" href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Boolean</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">可选</span></span>&nbsp;是否美化输出字符串，即插入缩进和换行符以提高可读性</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <h4>返回:</h4>
  <p class="code"><span data-keyref="Type_String"><a target="_blank" href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm">String</a></span></p>
  <p>&nbsp;</p>
  <h4>示例1：</h4>
  <p class="code">var _contents&nbsp;=<br>
    {<br>
    &nbsp; &nbsp; version : "1.0.0",<br>
    &nbsp;&nbsp; &nbsp;data:<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; coins : 4,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; mana : 15,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; playername : "Gurpreet",<br>
    &nbsp; &nbsp; &nbsp; &nbsp; items :<br>
    &nbsp; &nbsp; &nbsp; &nbsp; [<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.SWORD,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.BOW,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.GUITAR<br>
    &nbsp; &nbsp; &nbsp; &nbsp; ]<br>
    &nbsp;&nbsp; &nbsp;}<br>
    };<br>
    <br>
    var _json_string = json_stringify(_contents);
  </p>
  <p>上面的代码会将 <span class="inline2">_contents</span> 结构转换为 JSON 字符串并将该字符串存储在一个变量中。 返回的字符串如下所示：</p>
  <p class="code">{ "data": { "items": [ 0.0, 1.0, 2.0 ], "coins": 4.0, "mana": 15.0, "playername": "Gurpreet" }, "version": "1.0.0" }</p>
  <p>&nbsp;</p>
  <h4>示例2：美化输出</h4>
  <p class="code">var _contents =&nbsp;<br>
    {<br>
    &nbsp; &nbsp; version: "1.0.0",<br>
    &nbsp; &nbsp; data:<br>
    &nbsp; &nbsp; {<br>
    &nbsp; &nbsp; &nbsp; &nbsp; coins : 5,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; mana : 0,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; playername : "Bart",<br>
    &nbsp; &nbsp; &nbsp; &nbsp; items :<br>
    &nbsp; &nbsp; &nbsp; &nbsp; [<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.SWORD,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.BOW,<br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ITEM.PIANO<br>
    &nbsp; &nbsp; &nbsp; &nbsp; ]<br>
    &nbsp; &nbsp; }<br>
    }<br>
    var _json_string = json_stringify(_contents, true);</p>
  <p>上面的代码将 <span class="inline2">_contents</span> 结构转换为 JSON 字符串并将其存储在变量中。当 <span class="inline2">pretty_print</span> 参数设置为 <span class="inline2">true</span> 时，结构的内容将被<em>美化输出</em>到字符串中，即插入缩进和换行符，以使结果字符串看起来"漂亮"且更具可读性。然后，字符串看起来如下所示：</p>
  <p class="code">{<br>
    &nbsp; "data":{<br>
    &nbsp; &nbsp; "mana":0.0,<br>
    &nbsp; &nbsp; "playername":"Bart",<br>
    &nbsp; &nbsp; "items":[<br>
    &nbsp; &nbsp; &nbsp; 0,<br>
    &nbsp; &nbsp; &nbsp; 1,<br>
    &nbsp; &nbsp; &nbsp; 2<br>
    &nbsp; &nbsp; ],<br>
    &nbsp; &nbsp; "coins":5.0<br>
    &nbsp; },<br>
    &nbsp; "version":"1.0.0"<br>
    }</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Encoding_And_Hashing.htm">File Encoding</a></div>
        <div style="float:right">Next: <a href="json_parse.htm">json_parse</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->

</body></html>