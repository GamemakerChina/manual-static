<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="..",gTopicId="7.0_11"</script><script type="text/javascript" src="../template/scripts/rh.min.js"></script><script type="text/javascript" src="../template/scripts/common.min.js"></script><script type="text/javascript" src="../template/scripts/topic.min.js"></script><script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><link rel="stylesheet" type="text/css" href="../assets/css/default.css"><script src="../../assets/scripts/main_script.js"></script><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="generator" content="Adobe RoboHelp 2022"><title>Guide To Using JSON</title><meta name="topic-status" content="Draft"><link rel="stylesheet" type="text/css" href="../assets/css/default.css"><meta name="rh-authors" content="Bart Teunis"><meta name="topic-comment" content="This page is a guide on how to work with JSON in GameMaker"><meta name="template" content="../assets/masterpages/Manual_Page.htt"><meta name="search-keywords" content="json"><meta name="rh-index-keywords" content="Guide To Using JSON"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Guide To Using JSON"><span>Guide To Using JSON</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><div></div><div><h1><span data-field="title" data-format="default">JSON 使用指南</span></h1><p>本页介绍如何在 <span data-keyref="GameMaker Name">GameMaker</span> 中使用 JSON。</p><div class="minitoc" data-minitoc-targetid="drop-down" style=""><p class="minitoc-caption" href="#" style="">内容</p><ol class="minitoc-list" style=""><li><a href="#json" class="minitoc-list-item">JSON</a></li><li><a href="#json_in_gamemaker" class="minitoc-list-item"><span id="">GameMaker</span> 中的 JSON</a></li><ol><li><a href="#which_functions_to_use" class="minitoc-list-item">使用哪些功能</a></li><li><a href="#data_conversions" class="minitoc-list-item">数据转换</a></li><li><a href="#filter_function" class="minitoc-list-item">过滤功能</a></li></ol><li><a href="#writing_json" class="minitoc-list-item">编写 JSON</a></li><ol><li><a href="#prettify" class="minitoc-list-item">美化</a></li><li><a href="#usage_notes" class="minitoc-list-item">使用说明</a></li></ol><li><a href="#reading_json" class="minitoc-list-item">读取 JSON</a></li><ol><li><a href="#usage_notes1" class="minitoc-list-item">使用说明</a></li></ol><li><a href="#serialisation" class="minitoc-list-item">序列化</a></li></ol></div><h2 id="json">JSON</h2><div><p>JSON(JavaScript 对象表示法) 是一种轻量级数据交换格式，对于人和机器来说都易于读写。它建立在两个基本结构之上：</p><ul class="colour"><li>名称 / 值对的集合，在编程语言中称为 " 映射"、"字典 " 或 " 对象"。它在 <span data-keyref="GameMaker Name">GameMaker</span> 中由 <span data-keyref="Type_Struct"><a target="_blank" href="../GameMaker_Language/GML_Overview/Structs.htm">Struct</a></span> 或 <span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span> 表示。</li><li>值的有序列表，在其他编程语言中称为 " 列表"、"数组 " 或 " 序列"。它在 <span data-keyref="GameMaker Name">GameMaker</span> 中由 <span data-keyref="Type_Array"><a target="_blank" href="../GameMaker_Language/GML_Overview/Arrays.htm">Array</a></span> 或 <span data-keyref="Type_ID_DS_List"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_create.htm">DS List</a></span> 表示。</li></ul><p class="note"><span data-conref="../assets/snippets/Tag_important.hts"><span class="important">重要</span></span>JSON 与数字 <em>无关</em> 。在任何编程语言中，都可以有各种不同容量和补数的数字类型，固定或浮动，二进制或十进制。这会使不同编程语言之间的互换变得困难。相反，JSON 只提供人类使用的数字表示形式：数字序列。所有编程语言都知道如何理解数字序列，即使它们在内部表示上存在分歧。如需了解更多信息，请参阅 <a href="https://ecma-international.org/publications-and-standards/standards/ecma-404/">ECMA JSON 标准</a> 。</p></div><h2 id="json_in_gamemaker"><span data-keyref="GameMaker Name" id="">GameMaker</span> 中的 JSON</h2><p><span data-keyref="GameMaker Name">GameMaker</span> 通过两组函数内置支持读取和写入 JSON：</p><ul class="colour"><li><span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> 和 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>，用于将 JSON 字符串与 <a href="../GameMaker_Language/GML_Overview/Structs.htm">结构</a> 和 <a href="../GameMaker_Language/GML_Overview/Arrays.htm">数组</a> 的集合相互转换。</li><li><span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span> 和 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span>，用于将 JSON 字符串与 <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS Maps</a> 和 <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm">DS Lists</a> 的集合相互转换。编码要求您 <em>标记</em> <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm#func_ref_json" title="DS map marking functions">DS 映射键</a> 和 <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm##func_ref_json" title="DS list marking functions">DS 列表项</a> ( 以便清楚哪些映射键和列表项应成为嵌套 JSON 对象和数组)。</li></ul><h3 id="which_functions_to_use">使用哪些功能</h3><ul class="colour"><li><span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> 和 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 是处理 JSON 时使用的主要函数。如果您不使用任何 <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">数据结构</a> 或者当您启动新项目时，可以使用这些函数。</li><li>使用 <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">数据结构</a> 时，请使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span> 和 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span>。传递给 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>(" 根 ") 的项目必须始终是 <span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span>。同样，<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span> 始终返回一个 DS 映射，无论您传递给它的数据类型是什么 (您传递给函数的所有非 DS 映射都将封装在一个 DS 映射中)。</li><li>在包含嵌套 <a href="../GameMaker_Language/GML_Overview/Structs.htm#struct">结构</a> 和 <a href="../GameMaker_Language/GML_Overview/Arrays.htm">数组</a> 的 <span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span> 上使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span>。结构体和数组也将转换为 JSON，即 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span> 允许您转换混合层次结构。</li></ul><p>本指南重点介绍函数 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> 和 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span>。</p><h3 id="data_conversions">数据转换</h3><p>JSON 标准支持的值数量有限：对象、数组、字符串、数字以及值 <span class="inline2">true</span>、<span class="inline2">false</span> 和 <span class="inline2">null</span>。<span data-keyref="GameMaker Name">GameMaker</span> 使用的 <a href="../GameMaker_Language/GML_Overview/Data_Types.htm">数据类型</a> 比这更多，为了以稍后可以读回的方式存储这些数据，它将它们转换为字符串表示形式。<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>/<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 和 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">json_decode</a></span>/<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span> 都会执行这些转换。</p><p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">注意</span></span> 您可以通过将 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> 的 <span class="inline2">inhibit_string_convert</span> 参数设置为 <span class="inline2">true</span> 来禁用解析 JSON 时的自动字符串转换。</p><p>下表列出了在 JSON 数据和 <span data-keyref="GameMaker Name">GameMaker</span> 之间进行转换时发生的转换：</p><table style="caption-side:top"><caption>JSON 数据转换</caption><colgroup><col style="width:33.33%"><col style="width:33.33%"><col style="width:33.33%"></colgroup><tbody><tr><th>JSON Type</th><th>GM Type/Value</th><th>笔记</th></tr><tr><td><span class="inline2">true</span> / <span class="inline2">false</span></td><td><span class="inline2">true</span> / <span class="inline2">false</span></td><td>&nbsp;</td></tr><tr><td>real / number</td><td><span data-keyref="Type_Real"><a target="_blank" href="../GameMaker_Language/GML_Overview/Data_Types.htm">Real</a></span></td><td>&nbsp;</td></tr><tr><td><span class="inline2">"@i64@hex_value$i64@"</span></td><td>int64</td><td><span data-keyref="GameMaker Name">GameMaker</span> 会将其写为：<br>- 如果在 int32 的有效范围内，则为 <i>int</i>。<br>- 如果可以在不丢失精度的情况下这样做，则为 <i>double</i>。<br>- 一个 <i>字符串</i> ，其前面带有标识符 <span class="inline2">"@i64@"</span>，后面带有标识符 <span class="inline2">"$i64$"</span>( 如果这两种情况都不适用)。<span></span><br><br>当您再次读取 JSON，<span data-keyref="GameMaker Name">GameMaker</span> 将获取这些标识符并将值转换回 int64( 除非禁用转换)。<br><br><span data-conref="../assets/snippets/Tag_warning.hts"><span class="warning">警告</span></span> 如果 JSON 用于服务器或某些其他非 <span data-keyref="GameMaker Name">GameMaker</span> 目标，这些值不合适，因此应避免使用。</td></tr><tr><td>null</td><td><span class="inline2">undefined</span><br><span class="inline2">pointer_null</span></td><td><span class="inline2">undefined</span> 和 <span class="inline2">pointer_null</span> 写入为 JSON<span class="inline2">null</span>。<a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">解析</a> 或 <a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_decode.htm">解码</a> 时，JSON<span class="inline2">null</span> 始终会读回为 <span class="inline2">undefined</span> 。</td></tr><tr><td>string</td><td><span data-keyref="Type_String"><a target="_blank" href="../GameMaker_Language/GML_Overview/Data_Types.htm">String</a></span></td><td>&nbsp;</td></tr><tr><td><span class="inline2">"@@infinity$$"</span>, <span class="inline2">@@-infinity$$</span></td><td><span class="inline2">infinity</span>, <span class="inline2">-infinity</span></td><td><span class="inline2">infinity</span> 被写为字符串</td></tr><tr><td><span class="inline2">"@@nan$$"</span></td><td><span class="inline2">NaN</span></td><td><span class="inline2">NaN</span> 写为字符串</td></tr><tr><td>object</td><td><span data-keyref="Type_Struct"><a target="_blank" href="../GameMaker_Language/GML_Overview/Structs.htm">Struct</a></span>&nbsp;(or&nbsp;<span data-keyref="Type_ID_DS_Map"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/ds_map_create.htm">DS Map</a></span>)</td><td>&nbsp;</td></tr><tr><td>array</td><td><span data-keyref="Type_Array"><a target="_blank" href="../GameMaker_Language/GML_Overview/Arrays.htm">Array</a></span>&nbsp;(or&nbsp;<span data-keyref="Type_ID_DS_List"><a target="_blank" href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/ds_list_create.htm">DS List</a></span>)</td><td>&nbsp;</td></tr><tr><td><span class="inline2">"ref &lt;type&gt; &lt;id&gt;"</span></td><td><span data-keyref="Type_Handle"><a target="_blank" href="../GameMaker_Language/GML_Overview/Data_Types.htm">Handle</a></span></td><td>写入 JSON 时，句柄存储在其字符串表示形式 <span data-conref="../assets/snippets/Handle_Format.hts"><span class="inline2">“ref &lt;type&gt; &lt;id&gt;”</span></span> 中，读回 JSON 时则转换回运行时值。<br><br>使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_encode.htm">json_encode</a></span> 时会出现例外情况： 您已<a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm#func_ref_json">标记</a>的嵌套 <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS Maps</a> 和 <a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm">DS List</a> 将分别被写入 JSON 对象和数组。<a href="../GameMaker_Language/GML_Reference/Data_Structures/DS_Lists/DS_Lists.htm#func_ref_json"></a><br><br><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">注意</span></span> 依赖此行为通常没什么用，因为索引会在游戏运行之间发生变化。</td></tr></tbody></table><h3 id="filter_function">过滤功能</h3><p>如果您希望完全控制 JSON 内容的读取或写入方式，您可以选择提供一个针对每个元素运行的过滤器函数，以便 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 和 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span>。请参阅功能页面了解更多信息。</p><h2 id="writing_json">编写 JSON</h2><p>编写 JSON 是通过 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 完成的。例如，以下结构体：</p><p class="code">my_struct =<br>{<br>&nbsp; &nbsp; test: "this",<br>&nbsp; &nbsp; val: ["that", "another thing", {"value": "a nested struct"}]<br>};</p><p>可以使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 转换为 JSON 字符串：</p><p class="code">struct_json = json_stringify(my_struct);</p><p>然后使用文本文件函数写入文件：</p><p class="code">var _file = file_text_open_write("struct_as_json.json");<br>file_text_write_string(_file, struct_json);<br>file_text_close(_file);</p><p>或者缓冲函数：</p><p class="code">var _buff = buffer_create(<span>16384</span><span>,<span>&nbsp;</span></span><span>buffer_fixed, 1</span>);<br>buffer_write(buffer_text, struct_json);<br>buffer_save("struct_as_json.json");<br>buffer_delete(_buff);</p><p>您还可以通过网络发送 JSON 字符串或将其存储在其他位置 (例如数据库的文本字段中)。</p><p>以下文本是输出：</p><p class="code">{"test":"this","val":["that","another thing",{"value":"a nested struct"}]}</p><p>默认情况下，<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 写入 <em>线性化</em> 的 JSON。在这种情况下，所有内容都放在同一行上，中间没有空格，也没有添加缩进。当每个字节都很重要时，这种格式很有用，尽管它不是特别可读。</p><h3 id="prettify">美化</h3><p><span class="inline2">prettify</span> 参数可以设置为 <span class="inline2">true</span>，以向生成的 JSON 字符串添加缩进，使其看起来 " 漂亮"，即更易于人类阅读。</p><p>以下代码：</p><p class="code">struct_json = json_stringify(my_struct, true);</p><p>outputs the following JSON:&nbsp;</p><p class="code">{<br>&nbsp; "test":"this",<br>&nbsp; "val":[<br>&nbsp; &nbsp; "that",<br>&nbsp; &nbsp; "another thing",<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; "value":"a nested struct"<br>&nbsp; &nbsp; }<br>&nbsp; ]<br>}</p><p>与线性化输出相比，上面的 JSON 一目了然地显示了数据的构造方式。</p><h3 id="usage_notes">使用说明</h3><ul class="colour"><li>将 JSON 字符串写入 INI 文件时应小心，因为 INI 规范在使用引号和转义字符时可能会导致问题。请参阅 <a href="../GameMaker_Language/GML_Reference/File_Handling/Ini_Files/ini_write_string.htm"><span class="inline2">ini_write_string()</span></a> 了解更多信息。</li><li>DS 地图中的循环引用，例如对主地图本身的引用 (形成无限循环) 或对主地图内形成此类无限循环的地图的引用，将仅在遇到它们的第一级进行序列化并进行转换为 <span class="inline2">null</span> 以获取更深入的参考。对于结构体，此类引用在字符串化时会立即转换为 <span class="inline2">null</span>。</li></ul><h2 id="reading_json">读取 JSON</h2><p>要从之前创建的 JSON 字符串中读取数据，您可以使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> 将其转换为结构体：</p><p class="code">my_struct = json_parse(struct_json);</p><p>默认情况下，将检查 JSON 中的字符串值以查看它们是否包含特殊值。如果是，这些值将转换为内部 <span data-keyref="GameMaker Name">GameMaker</span> 值。例如：</p><p class="code">json = json_stringify({ "infinity": infinity, "NaN": NaN});<br>show_debug_message(json);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //&nbsp;{"NaN":"@@nan$$","infinity":"@@infinity$$"}<br>data_with_strings_converted = json_parse(json);<br>show_debug_message(data_with_strings_converted);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// { NaN : NaN, infinity : inf }<br>data_with_strings_unchanged = json_parse(json, , true);<br>show_debug_message(data_with_strings_converted);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//&nbsp;{ NaN : "@@nan$$", infinity : "@@infinity$$" }</p><h3 id="usage_notes1">使用说明</h3><ul class="colour"><li>要解析或解码的 JSON 字符串的最大嵌套限制为 <span data-keyref="Const_JSON_Max_Nesting_Limit">128</span>。</li><li>While trailing commas are not part of the JSON standard, <span data-keyref="GameMaker Name">GameMaker</span>&nbsp;parses JSON&nbsp;strings that contain them. For example: <span class="inline2">{"name": "Level 1", "Description": "The first level", }</span>.</li></ul><h2 id="serialisation">序列化</h2><p><a href="https://en.wikipedia.org/wiki/Serialization" title="Serialisation">序列化</a> 描述如下：</p><blockquote>In computing, serialization (or serialisation) is the process of translating a data structure or object state into a format that can be stored (e.g. files in secondary storage devices, data buffers in primary storage devices) or transmitted (e.g. data streams over computer networks) and reconstructed later (possibly in a different computer environment).</blockquote><p>在 <span data-keyref="GameMaker Name">GameMaker</span> 中，结构体就是这样一种数据结构。它可以包含变量和函数作为其成员。当您使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 对结构体的内容进行字符串化时，仅写入结构体的变量，而不写入其函数。</p><p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">注意</span></span> 您只能在 <a href="../GameMaker_Language/GML_Overview/Structs.htm" title="structs">GameMaker</a> 中以这种方式序列化 <span data-keyref="GameMaker Name">结构</span> ，而不能序列化 <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">数据结构</a> 或 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instances.htm">实例</a> 。</p><p>通过手动设置 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> 使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span> 返回的结构的 <a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm">静态结构</a> ，您可以将这些结构恢复到其原始状态。</p><p>例如，假设您有一个构造函数 <span class="inline2">Vector</span>：</p><p class="code">function Vector(_x=0, _y=0, _z=0) constructor<br>{<br>&nbsp; &nbsp; x = _x;<br>&nbsp; &nbsp; y = _y;<br>&nbsp; &nbsp; z = _z;<br>&nbsp; &nbsp;&nbsp;<br>&nbsp; &nbsp; static add = function(_v2)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; x += _v2.x;<br>&nbsp; &nbsp; &nbsp; &nbsp; y += _v2.y;<br>&nbsp; &nbsp; &nbsp; &nbsp; z += _v2.z;<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; return self;<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; static sum = function(_v1, _v2)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; // Note: call using Vector.sum(v1, v2)<br>&nbsp; &nbsp; &nbsp; &nbsp; return new Vector(_v1.x + _v2.x, _v1.y + _v2.y, _v1.z + _v2.z);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; static dot = function(_v1, _v2)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;// Note: call using Vector.sum(v1, v2)<br>&nbsp; &nbsp; &nbsp; &nbsp; return dot_product_3d(_v1.x, _v1.y, _v1.z, _v2.x, _v2.y, _v2.z);<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; // Other<br>}</p><p>然后，您创建其中一些向量：</p><p class="code">v1 = new Vector();<br>v2 = new Vector(100, 100);<br>v3 = new Vector(200, 20, 50);<br>v1.add(v2);<br>v4 = Vector.sum(v2, v3);</p><p>这四个向量可以存储在数组中，并使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm">json_stringify</a></span> 转换为 JSON：</p><p class="code">json = json_stringify([v1, v2, v3, v4]);</p><p>该 JSON 字符串可以保存或发送到其他地方。</p><p>此时，您可能希望在游戏的另一个实例中恢复这些向量，不仅仅是它们的值 (<span class="inline2">x</span>、<span class="inline2">y</span> 和 <span class="inline2">z</span>)，还有它们的行为 (<span class="inline3_func">add</span>, <span class="inline3_func">sum</span>, <span class="inline3_func">dot</span>,...)。</p><p>要将信息返回到结构中，您可以使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_parse.htm">json_parse</a></span> 解析 JSON 字符串，然后将各个数组元素分配给之前使用的变量名称：</p><p class="code">vectors = json_parse(json);<br>v1 = vectors[0];<br>v2 = vectors[1];<br>v3 = vectors[2];<br>v4 = vectors[3];</p><p>现在，这些结构已从 JSON 字符串中读回，但它们是完全新的结构，不再属于构造函数。这些结构在游戏的原始实例中是 <span class="inline2">Vector</span> 结构，但现在不再是了。至少，不是 " 官方 " 的，正如您在调用函数 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/instanceof.htm">instanceof</a></span> 时看到的那样：</p><p class="code">instanceof(v1, Vector);&nbsp; // false<br>instanceof(v2, Vector);&nbsp; // false<br>instanceof(v3, Vector);&nbsp; // false<br>instanceof(v4, Vector);&nbsp; // false</p><p>要告诉 <span data-keyref="GameMaker Name">GameMaker</span> 这些结构中的每一个都应再次属于 <span class="inline2">Vector</span> 构造函数，您可以使用函数 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span>：</p><p class="code">var _static_vec =&nbsp;static_get(Vector);<br>static_set(v1, _static_vec);<br>static_set(v2, _static_vec);<br>static_set(v3, _static_vec);<br>static_set(v4, _static_vec);</p><p>通过在结构上使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span>，您首先将它们作为简单的 " 数据 " 结构与静态分离，然后将它们作为 <span class="inline2">Vector</span> 静态结构的 " 子 " 结构重新附加到静态链。由于您可以访问结构所属的静态结构 (或构造函数) 层次结构的所有静态成员，因此您可以通过这种方式为结构提供对 <span class="inline2">Vector</span> 的 <a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm#h">静态链</a> 的访问权限，从而恢复其行为。</p><p>从现在开始，<span class="inline2">v1</span> 到 <span class="inline2">v4</span> <em>都是</em> <span class="inline2">Vector</span> 的实例！</p><p class="code">instanceof(v1, Vector);&nbsp; // true!<br>instanceof(v2, Vector);&nbsp; // true!<br>instanceof(v3, Vector);&nbsp; // true!<br>instanceof(v4, Vector);&nbsp; // true!</p><p>您可以像任何其他 <span class="inline2">Vector</span> 结构一样使用它们：</p><p class="code">v1.add(v2).add(v3);<br>v5 = Vector.sum(v1, v1);</p><p class="note"><span data-conref="../assets/snippets/Tag_important.hts"><span class="important">重要</span></span> 为了使其正常工作，函数必须定义为静态，以便它们属于 <em>构造函数</em> ，而不是结构体 <em>实例</em> 。如果不将函数声明为静态，则每个结构体实例都应通过执行构造函数来接收该函数的副本。不过，使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Variable_Functions/static_set.htm">static_set</a></span> 设置静态结构不会调用构造函数，而是将该结构移动到 <a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm#h">静态链</a> 中的不同位置，从而使其能够访问不同静态结构的函数 (请参阅 <a href="../GameMaker_Language/GML_Overview/Structs/Static_Structs.htm#h2">点运算符如何查找变量名称</a> )。</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div>Back:&nbsp;<a href="Additional_Information.htm">额外的信息</a></div><div>Next:&nbsp;<a href="Project_Format.htm">项目格式</a></div></div></div><h5><span data-conref="../assets/snippets/Copyright_Notice_AutoUpdate.hts">© Copyright <span data-keyref="Company Name">YoYo Games</span>&nbsp;<span data-keyref="Company Structure Suffix">Ltd.</span>&nbsp;<span data-field="date" data-format="YYYY">2024</span> All Rights Reserved</span></h5></div></div></body></html>