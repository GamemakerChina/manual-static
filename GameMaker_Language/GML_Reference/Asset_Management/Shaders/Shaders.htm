<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.3.8";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Shaders">
  <meta name="rh-index-keywords" content="">
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_name.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Asset_Management/Scripts/script_execute_ext.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Shaders">
        <span>Shaders</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">着色器</span></h1>
  <p>着色器是一个非常强大的工具，用于操纵图形卡向屏幕呈现<a class="tooltip" title="当一些东西在GameMaker Studio 2中呈现时，通常意味着它只是被“绘制到显示缓冲区”或“绘制到表面”。渲染也可以指将某种矢量源(如字体)转换为位图图像的过程。">内容和方式</a>。由于这些小程序实际上运行在显卡上，这意味着它们处理速度极快，为更多的游戏逻辑释放了宝贵的CPU周期。</p>
  <p>要创建着色器，需要使用<b>着色器编辑器</b>编写<b>顶点着色器</b>和<b>碎片着色器</b>(也称为<a href="../../../../The_Asset_Editors/Shaders.htm">像素着色器</a>)，并且即使(例如)仅希望更改正在绘制的实例的顶点位置，或者如果只想更改像素的颜色值，仍需要<b>两个</b>程序才能使完整着色器工作。</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">注意</span></span>&nbsp;着色器<b>不允许</b>您更改传递给它们的任何变量的值，因此在所有引用它们的文档中，这些变量将称为<b>着色器常量</b>。</p>
  <p>有关 <span data-keyref="GameMaker Name">GameMaker</span> 当前使用的 GLSL ES 语言规范的完整概述，包括可用于对着色器本身进行编程的函数和变量，请参阅 <a href="https://registry.khronos.org/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf">GLSL&nbsp;ES&nbsp;Specification&nbsp;1.00</a>.。如果您正在寻找这些函数和变量的快速概述，以下链接非常有用，因为它包含最后两张卡上的 OpenGL&nbsp;ES API 的一些快速参考卡：<a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">OpenGL&nbsp;ES 参考卡 </a>。</p>
  <p>在项目中使用着色器非常简单，只需几行代码即可从中获得最基本的用途：</p>
  <p class="code">shader_set(myShader);<br>
    draw_self();<br>
    shader_reset();</p>
  <p>正如您所看到的，它们以类似的方式用于混合模式和表面，其中您首先选择(设置)着色器，使用它绘制您想要的，然后之后再次重置绘制目标。如果您希望通过着色器而不是单个精灵或背景来渲染整个屏幕，则需要设置一个表面来捕捉当前视图，然后将其传递到着色器(有关详细信息，请参阅<a href="../../Drawing/Surfaces/Surfaces.htm">Surfaces</a>)。</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">注意</span></span>&nbsp;着色器，就像任何与绘制相关的东西一样，<b>只能在绘制事件中使用</b>。同样值得注意的是，如果您尝试在着色器中使用颜色值，并且对象没有纹理，结果将变为黑色。</p>
  <p>如果使用的着色器具有输入值，则使用<i>统一</i>函数设置这些值。首先使用着色器在实例的<i>创建事件</i>中使用函数<a href="shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a>获取统一<b>句柄</b>(本质上是要设置 uniform 的ID值)，然后将这些句柄存储在变量中，如下所示：</p>
  <p class="code">colour_to_find = shader_get_uniform(sShaderDemo5, "f_Colour1");<br>
    colour_to_set = shader_get_uniform(sShaderDemo5, "f_Colour2");</p>
  <p>有了统一的句柄后，可以在<b>绘制事件</b>的着色器代码中设置它们，如下所示：</p>
  <p class="code">shader_set(sShaderDemo5);<br>
    shader_set_uniform_f(colour_to_find, 1,1,1 );<br>
    shader_set_uniform_f(colour_to_set, 1,0,0 );<br>
    draw_sprite(sprite_index,image_index,x+24, y);<br>
    shader_reset();</p>
  <p>最后要注意的一点是，尽管着色器在所有平台上都被接受，但它们仍然是特定于设备的，如果设备的硬件或软件不能使用着色器，则会出现错误。因此，建议您在设置统一或使用着色器本身之前检查着色器是否已编译，如下所示：</p>
  <p class="code">if (shader_is_compiled(myShader))<br>
    {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;shader_set(myShader);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;draw_self();<br>
    &nbsp;&nbsp;&nbsp;&nbsp;shader_reset();<br>
    }<br>
    else show_debug_message("Shader failed");</p>
  <p>作为额外检查，您还可以调用函数<a href="shaders_are_supported.htm"><span class="inline">shaders_are_supported()</span></a>来查看硬件是否甚至支持着色器。通常，您会在游戏开始时执行这些检查，并将结果存储为<a href="../../../GML_Overview/Variables/Global_Variables.htm">全局变量</a>，然后进行检查。</p>
  <p>需要注意的是，<span data-keyref="GameMaker Name">GameMaker</span>还支持一些条件编译<b>宏</b>，这些宏可以在GLSL ES着色器中使用，因此它们可以在特定的支持平台上执行替代代码。下表显示了宏及其生成的平台：</p>
  <p>&nbsp;</p>
  <table>
    <tbody>
      <tr>
        <th>Shader Macro</th>
        <th>值</th>
        <th>目标平台</th>
      </tr>
      <tr>
        <td>_YY_GLSLES_</td>
        <td>1</td>
        <td>所有目标平台</td>
      </tr>
      <tr>
        <td>_YY_GLSL_</td>
        <td>2</td>
        <td>Mac和Ubuntu(Linux)</td>
      </tr>
      <tr>
        <td>_YY_HLSL11_</td>
        <td>3</td>
        <td>Windows, XboxOne</td>
      </tr>
      <tr>
        <td>_YY_PSSL_</td>
        <td>4</td>
        <td>PS4</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <p>当您使用GLSL ES格式着色器在任何一个列出的平台上编译<span data-keyref="GameMaker Name">GameMaker</span>项目时，将生成<i>上述宏之一</i>，然后可以在着色器代码中使用这些宏，如下所示：</p>
  <p class="code">#ifdef _YY_HLSL11_<br>
    // HLSL shader code here<br>
    #else<br>
    // GLSL shader code here<br>
    #endif</p>
  <p>如果您是着色器的新手，或者想要使用<span data-keyref="GameMaker Name">GameMaker</span>创建和使用着色器的更完整指南，请参阅手册的以下页面：</p>
  <ul class="colour">
    <li><a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">着色器使用指南</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>以下函数可用于绘制与设置着色器：</p>
  <ul class="colour">
    <li><a href="shader_get_name.htm">shader_get_name</a></li>
    <li><a href="shader_get_uniform.htm">shader_get_uniform</a></li>
    <li><a href="shader_get_sampler_index.htm">shader_get_sampler_index</a></li>
    <li><a href="shader_set.htm">shader_set</a></li>
    <li><a href="shader_set_uniform_f.htm">shader_set_uniform_f</a></li>
    <li><a href="shader_set_uniform_f_array.htm">shader_set_uniform_f_array</a></li>
    <li><a href="shader_set_uniform_f_buffer.htm">shader_set_uniform_f_buffer</a></li>
    <li><a href="shader_set_uniform_i.htm">shader_set_uniform_i</a></li>
    <li><a href="shader_set_uniform_i_array.htm">shader_set_uniform_i_array</a></li>
    <li><a href="shader_set_uniform_matrix.htm">shader_set_uniform_matrix</a></li>
    <li><a href="shader_set_uniform_matrix_array.htm">shader_set_uniform_matrix_array</a></li>
    <li><a href="shader_reset.htm">shader_reset</a></li>
    <li><a href="shader_is_compiled.htm">shader_is_compiled</a></li>
    <li><a href="shaders_are_supported.htm">shaders_are_supported</a></li>
    <li><a href="shader_current.htm">shader_current</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>我们还有一个特殊的函数，它定义了所有着色器的全局状态：</p>
  <ul>
    <li><a href="shader_enable_corner_id.htm">shader_enable_corner_id</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>在着色器中使用纹理采样器时，您将需要有关正在使用的纹理的信息，在这种情况下，您可以使用以下函数：</p>
  <ul class="colour">
    <li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm">sprite_get_texture</a></li>
    <li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm">sprite_get_uvs</a></li>
    <li><a href="../Fonts/font_get_texture.htm">font_get_texture</a></li>
    <li><a href="../Fonts/font_get_uvs.htm">font_get_uvs</a></li>
    <li><a href="../../Drawing/Textures/texture_get_width.htm">​texture_get_width</a></li>
    <li><a href="../../Drawing/Textures/texture_get_height.htm">texture_get_height</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_width.htm">texture_get_texel_width</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_height.htm">texture_get_texel_height</a></li>
    <li><a href="../../Drawing/Textures/texture_set_stage.htm">texture_set_stage</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texfilter.htm">gpu_set_texfilter</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm">gpu_set_texfilter_ext</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm">gpu_set_texrepeat</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat_ext.htm">gpu_set_texrepeat_ext</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>虽然本手册<b>不会</b>介绍任何 OpenGL 着色器函数和变量，但它确实包含了 <span data-keyref="GameMaker Name">GameMaker</span> 所独有的函数和变量的列表。这些常量不是着色器的 OpenGL 规范的一部分，提供这些常量是为了简化项目中着色器的集成。</p>
  <ul class="colour">
    <li><a href="Shader_Constants.htm">着色器 Uniforms 常量</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>最后，<span data-keyref="GameMaker Name">GameMaker</span>允许您定义自己的<b>顶点格式</b>，从中可以创建自己的自定义基元。这可以大大加快着色器操作，或用于扩展其函数并创建出人意料的效果。您可以在以下章节中找到这方面的信息：</p>
  <ul class="colour">
    <li><a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">基本元和顶点格式</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Asset_Management.htm">资源管理</a></div>
        <div style="float:right">Next: <a href="../Sequences/Sequences.htm">序列</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
shader_functions
-->

</body></html>