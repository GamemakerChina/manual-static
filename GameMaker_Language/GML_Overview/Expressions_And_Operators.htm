<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "8.2.1.1_4";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Expressions And Operators</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css">
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining the different GML expressions">
  <meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,<,>,<=,>=,==,!=,|,&amp;,^,<<,>>,+,-,*,/,++,--,div,%,mod,!,~">
  <meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,<<,>>,<=,>=,==,=,:=,$">
<meta name="brsnext" value="GameMaker_Language/GML_Overview/Script_Functions.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Addressing_Variables_In_Other_Instances.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Expressions And Operators">
        <span>Expressions And Operators</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>表达式和运算符</h1>
  <h2>表达式</h2>
  <p>表达式是一个数学短语，可以包含普通数字、变量、字符串或函数，以及一个或多个<strong>运算符</strong>(如加、减、2乘等)。表达式中使用的值可以是实数(如<span class="inline">3.4*6</span>)，以<span class="inline">$</span>符号开头的十六进制数字(如<span class="inline"> $00FFAA | $88FFAA</span>)，双引号之间的字符串(如<span class="inline">"hello"</span>+<span class="inline">"world"</span>)或使用多个运算符和值的更复杂的表达式。</p>
  <h2>运算符</h2>
  <p>以下是提供给表达式使用的运算符。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Assigning (=)</span><span data-close-text="true">Assigning (=)</span> 赋值</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span class="inline2"><b>=</b></span>是用来给变量赋值的。请注意，<span data-keyref="GameMaker Name">GameMaker</span>中这也可以<i>用于在</i>中对变量进行比较。你可能会在例子和其他人的代码中看到这一点。然而，这是从<i>GameMaker</i>旧版中遗留下来的。你应该使用<b>==</b>运算符进行比较，使用<b>=</b>进行赋值，如这些例子所示:</p>
    <p class="code">a = 12;<br>
      speed = 5;<br>
      val = (old_val + 5);</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">Combining (&amp;&amp;, ||, ^^)</span><span data-close-text="true">Combining (&amp;&amp;, ||, ^^)</span> 组合</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><b><span class="inline2">&amp;&amp;</span>, <span class="inline2">||</span>, <span class="inline2">^^</span> (<span class="inline2">and</span>, <span class="inline2">or</span> 和 <span class="inline2">xor</span>)</b> 用于组合布尔值以给出 true 或 false。如果以下任何示例解析为 <span class="inline">true</span>，则代码将运行：</p>
    <p class="code">if (a == b &amp;&amp; c == d) { do something... } &nbsp;// and<br>
      if (a == b || c == d) { do something... } &nbsp;&nbsp;// or<br>
      if (a == b ^^ c == d) { do something... } &nbsp;// xor</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">Nullish (??, ??=)</span><span data-close-text="true">Nullish (??, ??=)</span> 空值合并</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="note"><span class="note">注意</span>"空值"只是指等于<span class="inline2">undefined</span>或<span class="inline2">pointer_null</span>的一个值。</p>
    <p class="dropspot"><span class="inline2">??</span> 是一个<a id="nullish"></a>空值合并运算符，如果给定值是 <span class="inline2">undefined</span> 或 <span class="inline2">pointer_null</span>，则返回指定的表达式。该运算符希望使用以下语法:</p>
    <p class="code_plain">(input ?? null_output)</p>
    <p class="dropspot">如果<span class="inline2">input</span>(输入)是<span class="inline2">undefined</span>或<span class="inline2">pointer_null</span>，该表达式将返回<span class="inline2">null_output</span>(输出)值;但是在其他情况下，它将仅仅返回<span class="inline2">input</span>值。这可以用来定义一个变量的 "默认 "值，以防止该变量本身不包含一个有效的值。</p>
    <p class="dropspot">请考虑以下例子:</p>
    <p class="code_plain">username = data.username ?? "INVALID USERNAME";</p>
    <p class="dropspot">在这里，<span class="inline2">username</span>变量将获得存储在<span class="inline2">data.username</span>中的值，但是如果<span class="inline2">data.username</span>恰好是<span class="inline2">undefined</span>或<span class="inline2">pointer_null</span>，该变量将获得字符串<span class="inline2">"INVALID USERNAME"</span>代替。这个例子确保了任何使用<span class="inline2">username</span>变量的函数调用不会因为被赋予一个空值而导致错误，并且用户知道他们的用户名没有被返回。</p>
    <p class="note"><span class="note">注意</span>只有当输入值为空值时，空值合并运算符右侧的表达式才会被执行，这意味着只有当输入值为空值时，RHS表达式中包含的任何函数调用才会被执行。</p>
    <hr>
    <p class="dropspot"><span class="inline2">??=</span>与上述的空值合并运算符类似，但专门用于变量赋值。这个运算符希望使用以下语法。</p>
    <p class="code">variable ??= null_value</p>
    <p class="dropspot">如果<span class="inline2">variable</span>是<span class="inline2">undefined</span>或<span class="inline2">pointer_null</span>，<span class="inline2">null_value</span>值将被分配给它;否则变量将保持不变。这可以用来在变量持有空值时为其分配一个自定义的 "默认 "值。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</span><span data-close-text="true">Comparing (&lt;, &lt;=, ==, !=, &gt;, &gt;=)</span> 比较</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><b><span class="inline2">&lt;</span>, <span class="inline2">&lt;=</span>, <span class="inline2">==</span>, <span class="inline2">!=</span>, <span class="inline2">&gt;</span>, <span class="inline2">&gt;=</span></b>&nbsp;是比较，只能给出<span class="inline">true</span>或<span class="inline">false</span>结果（其中 true 也可以解释为 1，false 也可以解释为 0）。使用示例：</p>
    <p class="code">if (a &lt; b) {do something...}<br>
      if (a != b) {do something...}</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</span><span data-close-text="true">Bitwise (|, &amp;, ^, &lt;&lt;, &gt;&gt;)</span> 位</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><b><span class="inline2">|</span>, <span class="inline2">&amp;</span>, <span class="inline2">^</span>, <span class="inline2">&lt;&lt;</span>, <span class="inline2">&gt;&gt;</span> </b> 用于执行位操作，其中 | = 位或，&amp; = 位和 ，^=位异或，&lt;&lt; = 左移 ，&gt;&gt; = 右移 。使用的例子:</p>
    <p class="code">x = (x &amp; $ffffffe0) + 32;<br>
      if (y ^ $1f) &gt; 0 {do something...};</p>
    <p class="dropspot">你可以从本节中找到更多关于如何使用位运算符和它们的作用的信息:<a href="../../Additional_Information/Bitwise_Operators.htm">位运算符</a>。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">Arithmetical (+, -, *, /)</span><span data-close-text="true">Arithmetical (+, -, *, /)</span> 算术</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><b><span class="inline2">+</span>, <span class="inline2">-</span>, <span class="inline2">*</span>, <span class="inline2">/</span></b> 分别是加、减、乘、除。使用示例：</p>
    <p class="code">c = a * b;<br>
      str = a + "world";</p>
    <p class="note"><span class="note"><b>注意</b></span>浮点数在除以零时不会停止，因为它们会得到一个无穷大的答案。如果a和b是整数(int32或int64)，那么除法将作为整数进行(除以0会被检查并出错。否则，它将作为浮点除法进行(没有除以0的检查)。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">Increment/Decrement (++, --)</span><span data-close-text="true">Increment/Decrement (++, --)</span> 递增递减</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot"><span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span> 用来从一个值中加减(<span class="inline2">1</span>)。值得注意的是，将其放在要加减的数值之前或之后，会有稍微不同的结果。例如。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline">++a</span> 将递增变量并返回递增的值。</li>
      <li class="dropspot"><span class="inline">a++</span> 将增加变量，但返回被增加之前的值。</li>
    </ul>
    <p class="dropspot">因此，如果你有这样的东西:</p>
    <p class="code">var a = 1;<br>
      show_debug_message(string(a++));<br>
      show_debug_message(string(++a));</p>
    <p class="dropspot">调试输出将是1和3。下面是一些使用的例子:</p>
    <p class="code">for (var i = 0; i &lt; 10; i++;)<br>
      {<br>
      &nbsp; &nbsp; do something...<br>
      }</p>
    <p class="code">if (hit == true)<br>
      {<br>
      &nbsp; &nbsp; --score;<br>
      }</p>
    <p class="note"><strong>注意</strong>: 在YoYo编译器的目标平台上(那些标有(YYC)的平台)，这些表达式从左到右进行运算，而在所有其他目标平台上，它们从右到左进行运算，这意味着:</p>
    <p class="code">val = max(num, ++num, num++);</p>
    <p class="note">将根据平台的不同给出不同的结果。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">Division and Modulo (div, %, mod)</span><span data-close-text="true">Division and Modulo (div, %, mod)</span> 除法和模</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot"><strong><span class="inline2">div</span>, <span class="inline2">mod</span> (<span class="inline2">%</span>)</strong>是除法和模，其中 div 为您提供一个值可以被划分为仅产生整数商的数量，而 mod 仅为您提供除法的余数。请注意，您只能使用整数值进行 div 或 mod。使用示例：</p>
    <p class="code">secs = time mod 60;<br>
      time_str = string(time div 60);</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">Unary (!, -, ~)</span><span data-close-text="true">Unary (!, -, ~)</span> 一元</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">提供了以下<strong>一元</strong>运算符。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline2"><strong>!</strong></span>: not 布尔"非"，所以 <span class="inline"> !true == false</span></li>
      <li class="dropspot"><span class="inline2"><strong>-</strong></span>: 取反一个实数或整数值（对字符串或布尔运算无效）。</li>
      <li class="dropspot"><span class="inline2"><strong>~</strong></span>: 按位取反一个值</li>
    </ul>
    <p class="dropspot">&nbsp;</p>
  </div>
  <h2>表达式组</h2>
  <p><i></i>作为所有表达式中的值，您可以使用返回值的数字、变量或函数，子表达式也可以放置在括号之间。所有运算符都适用于实数值，但<em>比较</em>也适用于字符串，并且"<strong>+</strong>"运算符可用于连接字符串。</p>
  <p>在一个表达式中进行多个操作时，使用括号<b>()</b>来区分操作顺序是非常重要的，因为如果没有明确说明，不同的平台可能会有不同的执行方式。例如，考虑下面的代码:</p>
  <p class="code">a = b == c || d;</p>
  <p>不同的目标编译器将以不同的顺序执行操作，因为它们没有明确显示，引起 "奇怪 "的结果，当你玩你的游戏时，你可能没有想到。为了避免这种情况，使用<span class="inline">()</span>来分离出部分，像这样:</p>
  <p class="code">a = (b == c || d);&nbsp; &nbsp;//better<br>
    a = ((b == c) || d); //best</p>
  <h2>语句分组</h2>
  <p>当在单个代码块中使用各种操作和表达式时，它们也应该分开。例如，以下<em>看起来</em>是有效代码：</p>
  <p class="code">if my_var == your_var ++their_var;</p>
  <p>然而，编译器可以用两种方式之一来解释这一点:</p>
  <p class="code">if my_var == your_var<strong>++</strong> then&nbsp;their_var;<br>
    <br>
    // or<br>
    <br>
    if my_var == your_var then <strong>++</strong>their_var;
  </p>
  <p>现在，你看了这段代码就知道，其中一个有点愚蠢，但那是因为我们知道我们想要实现什么，我们想要发生什么，但编译器不知道。它所看到的是两个变量和它们之间的++运算符，所以它必须选择哪一个来应用它。因此，你应该<strong>总是明确地将表达式、运算和语句</strong>括起来。上述代码的正确版本应该是。</p>
  <p class="code">if (my_var == your_var)<br>
    {<br>
    &nbsp; &nbsp; ++their_var;<br>
    }</p>
  <p>这样做可能会显得比较啰嗦，但对所执行的操作没有任何歧义，而且它在所有平台上的编译和行为也是一致的。还要注意的是，虽然你现在可以不使用方括号来链接表达式和语句，但这是一个遗留函数，今后可能会被废弃并从GML中删除，所以现在适当地使用方括号将 "证明 "你的代码(而且通常是好的做法)。</p>
  <p>下面是各种不同表达方式的一些最终例子。</p>
  <p class="code">{<br>
    &nbsp; &nbsp; x = 23 div 2;<br>
    &nbsp; &nbsp; colour = $FFAA00 + $00BB12;<br>
    &nbsp; &nbsp; str = "hello" + "world";<br>
    &nbsp; &nbsp; y += 5;<br>
    &nbsp; &nbsp; x *= y;<br>
    &nbsp; &nbsp; x = y &lt;&lt; 2;<br>
    &nbsp; &nbsp; x = 23 * ((2 + 4) / sin(y));<br>
    &nbsp; &nbsp; b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br>
    }</p>
  <p>最后要注意的是，还有一些表达式的 "捷径"，称为<b>访问器</b>，用于某些<a href="../GML_Reference/Data_Structures/Data_Structures.htm">数据结构</a>和<a href="Arrays.htm">数据结构</a>。数据结构和数组。这使你能够在这些格式中快速、轻松地添加或替换数据，而无需使用任何函数调用。完整的细节，请参见以下页面</p>
  <ul class="colour">
    <li><a href="Accessors.htm">访问器</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div>
        <div style="float:right">Next:&nbsp;<a href="Script_Functions.htm">脚本函数和变量</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->

</body></html>