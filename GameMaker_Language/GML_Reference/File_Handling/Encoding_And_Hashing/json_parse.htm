<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../..",gTopicId="8.2.2.17.6.0_4"</script><script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>json_parse</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"><script src="../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Reference page for json_parse"><meta name="rh-index-keywords" content="json_parse"><meta name="search-keywords" content="json_parse"><meta name="is_pure" content="true"><meta name="brsnext" value="GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/base64_encode.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/File_Handling/Encoding_And_Hashing/json_stringify.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="json_parse"><span>json_parse</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1><span data-field="title" data-format="default">json_parse</span></h1><p>This function parses a JSON string and converts it into a collection of nested arrays and structs.&nbsp;An array is the equivalent of a JSON array and a struct is the equivalent of a JSON object.</p><p>The JSON should be either previously created using&nbsp;<span class="inline3_func"><a href="json_stringify.htm">json_stringify</a></span>&nbsp;or should come from any other valid source.</p><p>You supply the string to parse, and the function will return the top-level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different&nbsp;<a href="../../Variable_Functions/Variable_Functions.htm">Variable Functions</a>&nbsp;(like&nbsp;<span class="inline3_func"><a href="../../Variable_Functions/typeof.htm">typeof</a></span> and&nbsp;<span class="inline3_func"><a href="../../Variable_Functions/variable_struct_get_names.htm">struct_get_names</a></span> in case of a struct) to check the returned contents.</p><h3>Usage Notes</h3><ul class="colour"><li>尝试解析无效值 (即：不是字符串或无效 JSON) 将引发异常错误。</li><li>This function only allows you to load JSON files with a maximum nesting limit of <span data-keyref="Const_JSON_Max_Nesting_Limit">128</span>.</li><li>Data conversions:<ul><li><span class="inline2">null</span> 值被解析为 <span class="inline2">undefined</span> 。</li><li>由 <span class="inline3_func"><a href="json_stringify.htm">json_stringify</a></span> 序列化的任何运行时值都将转换回运行时值 (例如 <a href="../../../GML_Overview/Data_Types.htm">handles</a> 以及 <span class="inline2">int64</span>、<span class="inline2">NaN</span> 和 <span class="inline2">infinity</span> 等值)，不过，可以通过将 <span class="inline2">true</span> 传递到可选的 <span><span class="inline2">inhibit_string_convert</span> 参数来禁用此转换，这意味着这些转换将保留为字符串。</span></li><li>See&nbsp;<a href="../../../../Additional_Information/Guide_To_Using_JSON.htm#data_conversions">Data Conversions</a>&nbsp;for a full overview.</li></ul></li><li>See&nbsp;<a href="../../../../Additional_Information/Guide_To_Using_JSON.htm">Guide To Using JSON</a>&nbsp;for more information on how&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;interacts with the JSON format.</li></ul><div data-conref="../../../../assets/snippets/Note_See_Guide_To_Using_JSON.hts"><p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;See&nbsp;<a href="../../../../Additional_Information/Guide_To_Using_JSON.htm">Guide To Using JSON</a>&nbsp;for detailed information on how to work with JSON in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>.</p></div><div data-conref="../../../../assets/snippets/JSON_Filter_Function_Description.hts"><h3>过滤功能 <span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">可选</span></span></h3><p>该函数可以选择采用 <span data-keyref="Type_Function"><a target="_blank" href="../../../GML_Overview/Script_Functions.htm">Function</a></span>，该函数对结构中的每个值运行一次，包括所有嵌套结构 / 数组及其内部的所有值。</p><p>它需要两个参数 <span class="inline2">(key, value)</span>，其中 <span class="inline2">key</span> 是结构体键名称 (<span data-keyref="Type_String"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">String</a></span>) 或数组索引 (<span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span>)， <span class="inline2">值</span> 是存储在该键 / 索引中的内容。</p><p>The filter function must always return a value. It can return a new value, which replaces the key's value in the final converted format returned by&nbsp;<span class="inline3_func"><span data-field="title" data-format="lower-alpha">json_parse</span></span>. If no new value should be returned for a particular key, the function must return the original <span class="inline2">value</span>.</p><p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">注意</span></span> 在过滤器函数中覆盖键的值 (使用 <a href="../../../GML_Overview/Language_Features/return.htm">return</a>) 时，请确保首先检查其类型，因为过滤器函数也会针对根结构和任何嵌套结构运行，这意味着意外覆盖它们将导致最终结构损坏。请参阅底部的 <strong>示例 3</strong>。</p></div><p>&nbsp;</p><h4>语法:</h4><p class="code"><span data-field="title" data-format="default">json_parse</span>(json, [filter_func], [inhibit_string_convert])</p><table><tbody><tr><th>参数</th><th>类型</th><th>描述</th></tr><tr><td>json</td><td><span data-keyref="Type_String"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">String</a></span></td><td>要解析的 JSON 字符串</td></tr><tr><td>filter_func</td><td><span data-keyref="Type_Function"><a target="_blank" href="../../../GML_Overview/Script_Functions.htm">Function</a></span></td><td><span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">可选</span></span>&nbsp;Filter function that processes each item. Don't pass a value or set this to <span class="inline2">undefined</span> if you only want to set <span class="inline2">inhibit_string_convert</span>. Syntax:&nbsp;<span class="inline2">function(key, value) -&gt; new_value</span></td></tr><tr><td>inhibit_string_convert</td><td><span data-keyref="Type_Bool"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Boolean</a></span></td><td><span data-conref="../../../../assets/snippets/Tag_optional.hts"><span class="optional">可选</span></span> 将此设置为 <span class="inline2">true</span> 以禁止将字符串转换为运行时引用。默认值：<span class="inline2">false</span></td></tr></tbody></table><p>&nbsp;</p><h4>返回:</h4><p class="code"><span data-keyref="Type_Struct"><a target="_blank" href="../../../GML_Overview/Structs.htm">Struct</a></span>&nbsp;or&nbsp;<span data-keyref="Type_Array"><a target="_blank" href="../../../GML_Overview/Arrays.htm">Array</a></span></p><p>&nbsp;</p><h4>示例1：</h4><p class="code">var json = "{\"myObj\": { \"apples\":10, \"oranges\":12, \"potatoes\":100000, \"avocados\":0 }, \"myArray\":[0, 1, 2, 2, 4, 0, 1, 5, 1]}";<br><br>var data = json_parse(json);<br>show_debug_message(data);</p><p>上面的代码创建一个包含有效 JSON 的新字符串，然后调用 <span class="inline3_func"><a href="json_parse.htm">json_parse</a></span> 将该字符串转换为 GML 结构。然后它将结果打印到调试日志中。</p><p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">NOTE</span></span>&nbsp;You will notice that the JSON string contains&nbsp;a backslash (<span class="inline2">\</span>) before every double quote (<span class="inline2">"</span>) inside it:<br><br><span class="inline2">json = "{&nbsp;<strong>\"&nbsp;</strong>myObj</span><br><br>This is to ensure that the double quote is read as an actual character within the string, instead of being read as part of the code and closing the string prematurely. This way we are using a backslash to "escape" the double quote.<br><br>If you are loading JSON from an external file however, there is no need to escape characters in that file.</p><hr><p>After parsing the JSON string above, if you know its structure, you can use various&nbsp;<a href="../../Variable_Functions/Variable_Functions.htm">Variable Functions</a> to check and read its contents:</p><p class="code">var data = json_parse(json);<br><br>// Check if the struct has myObj variable<br>if (variable_struct_exists(data, "myObj"))<br>{<br>&nbsp; &nbsp; // Check if it's a struct<br>&nbsp; &nbsp; if (is_struct(data.myObj))<br>&nbsp;&nbsp; &nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; // Print all struct members to the log<br>&nbsp; &nbsp; &nbsp; &nbsp; var _names = variable_struct_get_names(data.myObj);<br>&nbsp; &nbsp; &nbsp; &nbsp; var _str = "";<br>&nbsp; &nbsp; &nbsp; &nbsp; for (var i = 0; i &lt; array_length(_names); i++;)<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;_str = _names[i] + ": " +&nbsp;string(variable_struct_get(data.myObj, _names[i]));<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; show_debug_message(_str);<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br>&nbsp;&nbsp; &nbsp;}<br>}<br><br>// Check if the struct has myArray variable<br>if (variable_struct_exists(data, "myArray"))<br>{<br>&nbsp; &nbsp; // Check if it's an array<br>&nbsp; &nbsp; if (is_array(data.myArray))<br>&nbsp;&nbsp; &nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; show_debug_message(data.myArray);<br>&nbsp;&nbsp; &nbsp;}<br>}</p><p>上面的代码将解析给定的 JSON 字符串，生成以下控制台输出:</p><p class="code">oranges: 12<br>potatoes: 100000<br>avocados: 0<br>apples: 10<br>[ 0,1,2,2,4,0,1,5,1 ]</p><p>&nbsp;</p><h4>示例 2：过滤功能</h4><p class="code">var json = "{\"myObj\": { \"apples\":10, \"oranges\":12, \"potatoes\":100000, \"avocados\":0 }, \"myArray\":[0, 1, 2, 2, 4, 0, 1, 5, 1]}";<br><br>var data = json_parse(json, function (key, value)<br>{<br>&nbsp;&nbsp; &nbsp;show_debug_message($"Key: {key}, Value: {value}");<br>&nbsp; &nbsp; return value;<br>});</p><p>上面的代码采用与上一个示例相同的 JSON 字符串，并将其转换为 GML 结构，但是这次它使用了过滤器函数。</p><p>过滤器函数将每个项目的键和值打印到输出日志中：</p><p class="code_plain">Key: apples, Value: 10<br>Key: oranges, Value: 12<br>Key: potatoes, Value: 100000<br>Key: avocados, Value: 0<br>Key: myObj, Value: { apples : 10, oranges : 12, potatoes : 100000, avocados : 0 }<br>Key: 8, Value: 1<br>Key: 7, Value: 5<br>Key: 6, Value: 1<br>Key: 5, Value: 0<br>Key: 4, Value: 4<br>Key: 3, Value: 2<br>Key: 2, Value: 2<br>Key: 1, Value: 1<br>Key: 0, Value: 0<br>Key: myArray, Value: [ 0,1,2,2,4,0,1,5,1 ]<br>Key: , Value: { myObj : { apples : 10, oranges : 12, potatoes : 100000, avocados : 0 }, myArray : [ 0,1,2,2,4,0,1,5,1 ] }</p><p>请注意过滤器函数如何在 JSON 中的结构体 (<span class="inline2">myObj</span>) 和数组 (<span class="inline2">myArray</span>) 上运行，以及如何在结构体和数组内的每个项目上运行。它还在根结构上运行，并将键设置为空字符串 (此处，如最后一行所示)。</p><p>&nbsp;</p><h4>示例 3：覆盖值</h4><p class="code">var json = "{\"prices\": [2, 5, 1, 2, 4, 5]}";<br><br>var data = json_parse(json, function (key, value)<br>{<br>&nbsp; &nbsp;&nbsp;return is_real(value) ? value * 1000 : value;<br>});<br><br>show_debug_message(data);</p><p>The above code takes a JSON string containing an array inside a struct. Then&nbsp;<span class="inline3_func"><span data-field="title" data-format="default">json_parse</span></span> is run with a filter function that multiplies each value with 1000, only when it's a <span data-keyref="Type_Real"><a target="_blank" href="../../../GML_Overview/Data_Types.htm">Real</a></span>. Otherwise it simply returns the value itself.</p><p>结果结构如下所示：</p><p class="code_plain">{ prices : [ 2000,5000,1000,2000,4000,5000 ] }</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Encoding_And_Hashing.htm">File Encoding</a></div><div style="float:right">Next: <a href="base64_encode.htm">base64_encode</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>