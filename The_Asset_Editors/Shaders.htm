<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "6.7_1";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>The Shader Editor</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css">
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page detailing how the shader editor works">
  <meta name="rh-index-keywords" content="Shader Editor">
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES">
<meta name="brsnext" value="The_Asset_Editors/Sounds.htm"><meta name="brsprev" value="The_Asset_Editors/Sequence_Properties/Broadcast_Messages.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="The Shader Editor">
        <span>The Shader Editor</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">着色器编辑器</span></h1>
  <p><img alt="Shader Editor" class="center" src="../assets/Images/Asset_Editors/Editor_Shaders.png">着色器是一个非常强大的工具，它可以用来操纵你的游戏渲染到屏幕上的图形，允许令人难以置信的快速效果，范围包括，例如，为精灵添加一个微妙的颜色色调，直到全屏的扭曲效果。但什么是着色器？</p>
  <p>着色器基本上是一个由两部分组成的程序，直接在显卡本身上运行，由于GPU在做所有的工作，所以速度非常快，并为你的游戏代码释放出CPU周期。完整的着色器由一个顶点着色器程序和一个片段着色器程序（也被称为像素着色器）组成。这两个小程序一起工作，以操纵显卡渲染到屏幕上的内容。这样，你就可以实时操作实际<a class="tooltip" title="当一些东西在GameMaker Studio 2中呈现时，通常意味着它只是被“绘制到显示缓冲区”或“绘制到表面”。渲染也可以指将某种矢量源(如字体)转换为位图图像的过程。">渲染</a>到<a class="tooltip" title="显示缓冲区是最终绘制所有内容的“画布”。一些事件直接针对此事件（例如Pre Draw事件），而另一些事件将首先绘制到应用程序表面，然后将其绘制到显示缓冲区。">显示缓冲区</a>的位置、颜色和阿尔法值</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">顶点着色器</span><span data-close-text="true">顶点着色器</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">顶点着色器是渲染管道中的可编程着色器阶段，它处理单个顶点（用于渲染任何图像的三角形的点），当你正在渲染一个几何体--如精灵或表面--<span data-keyref="GameMaker Name">GameMaker</span>创建一个顶点流--&nbsp;称为<strong>Vertex Buffer&nbsp;</strong>--定义&nbsp;这些三角形的几何。例如，一个精灵会有一个由两个三角形（通常称为<em>多边形</em>）组成的几何体，并被渲染成一个 "四边形"。这个来自顶点缓冲器的顶点流被作为输入输入到顶点着色器，它可以以可编程的方式处理顶点数据。顶点着色器的输出被GPU用来组装三角形，然后对其进行适当的剪裁，并对视图端口和视图相机进行剪裁，然后被发送到GPU的光栅化器块，该块产生一个新的输出流，由称为<strong>Fragments</strong>的东西组成。这些都是微小的数据结构，每一个都是相对于出现在屏幕上的一个像素的。</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">片段着色器</span><span data-close-text="true">片段着色器</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">片段着色器是渲染管道中的可编程着色器阶段，用于处理 "片段"--用于对任何给定的多边形进行纹理的插值像素--它们负责输出每个渲染的三角形像素的最终颜色。基本上，它是这样工作的：片段着色器接收所有由顶点着色器沿管道传递的片段（正在渲染的三角形的单个像素）作为其输入。然后，它可以处理这些片段，以改变将被绘制到屏幕上的最终目标像素的颜色和透明度。</p>
  </div>
  <p>&nbsp;</p>
  <p>关于着色器如何真正工作以及它们在图形管道中的地位的完整概述超出了本文的范围，但你可以在这里找到一个简短的指南：</p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">着色器使用指南</a></li>
  </ul>
  <p>&nbsp;</p>
  <h2>语言支持</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span>支持以下着色器语言：</p>
  <table>
    <tbody>
      <tr>
        <th>着色器语言</th>
        <th>目标平台</th>
      </tr>
      <tr>
        <td><strong>GLSL ES 1.0</strong></td>
        <td>All target platforms</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac and Ubuntu (Linux)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td>Windows and Xbox</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td>PlayStation 4 &amp; 5</td>
      </tr>
    </tbody>
  </table>
  <p>在编写GLSL ES着色器时，建议尽可能地遵循<a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf" title="GLSL ES 1.0 Specification">官方语言规范</a>&nbsp;，以避免错误&nbsp;，因为一些目标平台&nbsp;可能比其他平台更严格&nbsp;（例如HTML5和GX.games目标，在涉及语言限制时可能比&nbsp;其他平台如Windows、macOS等更严格）。</p>
  <p>&nbsp;</p>
  <h2>创建一个着色器</h2>
  <p>要创建一个着色器资源，只需在<a href="../Introduction/The_Asset_Browser.htm">Asset Browser</a>内右击<img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png">&nbsp;，选择<em>Create -&gt;&nbsp;Shader</em>。一旦你创建了基础着色器，你就可以在新资源上使用鼠标右键<img alt="RMB Icon" class="icon" src="../assets/Images/Icons/Icon_RMB.png">菜单来选择着色器类型，然后继续编辑代码：</p>
  <p><img alt="Shader Editor RMB Menu" class="center" src="../assets/Images/Asset_Editors/Editor_Shader_RMBMenu.png">当你创建一个新的着色器时，代码编辑器本身被分成两个 "程序"--顶点（Vertex）和片段（Fragment），每个程序都可以从编辑器顶部的标签中获得。这两个程序都是同时创建的，因为你<em>不能在没有这两个部分的情况下创建一个着色器</em>。即使你只想使用片段着色器，你也必须先创建一个 "通过 "顶点着色器，这就是为什么在默认情况下，任何新的着色器都会有一个已经为你编码的顶点和片段通过着色器（在页面顶部的截图中，你可以看到我们使用了代码编辑器窗格视图来显示这两个并排的程序...在一起处理两个着色器程序时非常有用）。</p>
  <p>值得注意的是，你可以在<em>所有</em>目标平台上使用GLSL ES着色器，但要让它们在&nbsp;<strong>HTML5</strong>目标平台上工作，你必须在<a href="../Settings/Game_Options/HTML5.htm">HTML5游戏选项</a>&nbsp;中启用WebGL，否则它们将无法工作。</p>
  <p>有关着色器函数的更多细节以及如何在<span data-keyref="GameMaker Name">GameMaker</span>中使用它们，请参见以下页面：</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">Shader Functions</a>&nbsp;- GML的着色器参考部分。</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Shader Constants</a>&nbsp;- <span data-keyref="GameMaker Name">GameMaker</span>内置的常量，可以在编写着色器时使用。</li>
    <li><a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf">GLSL ES 1.0 Specifications</a> - <span data-keyref="GameMaker Name">GameMaker</span>使用的OpenGL ES 1.0 Shader Language的PDF文件</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">HLSL语言参考</a> - 微软HLSL的参考页。</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">PSSL语言演示</a> - PSSL语言的演示格式概述</li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:&nbsp;<a href="The_Asset_Editors.htm">资源编辑器</a></div>
        <div style="float:right">Next:&nbsp;<a href="Sounds.htm">The Sound Editor</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
The Shader Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->

</body></html>