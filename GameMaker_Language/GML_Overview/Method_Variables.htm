<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "8.2.1.1_6";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Method Variables</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css">
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo">
  <meta name="topic-comment" content="Page outlining the use of Method Variables">
  <meta name="rh-index-keywords" content="Method Variables">
  <meta name="search-keywords" content="Method Variables,methods,method">
<meta name="brsnext" value="GameMaker_Language/GML_Overview/Script_Functions_vs_Methods.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Script_Functions.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Method Variables">
        <span>Method Variables</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>方法变量</h1>
  <p>方法变量本质上是一个被分配了一个函数的变量，将该函数 "绑定 "到一个实例上，使你能够使用该变量来引用该函数--就像你使用<a href="Runtime_Functions.htm">运行时函数名</a>来引用GML内置函数一样。使用的变量在范围上可以是<em>局部</em>、<em>实例</em>或<em>全局</em>(关于变量范围的更多信息见<a href="Variables_And_Variable_Scope.htm">这里</a>)。</p>
  <p>另请参阅：<a href="Script_Functions_vs_Methods.htm">脚本函数与方法对比</a></p>
  <h2>创建方法</h2>
  <p>创建方法变量的语法如下：</p>
  <p class="code">name =&nbsp;function( parameter1, parameter2, ... )<br>
    <span>{</span><br>
    <span>&nbsp; &nbsp; statement1;</span><br>
    <span>&nbsp; &nbsp; statement2;</span><br>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;...</span><br>
    <span>}</span>
  </p>
  <p>或</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br>
      {</span><br>
    <span>&nbsp; &nbsp; statement1;</span><br>
    <span>&nbsp; &nbsp; statement2;</span><br>
    <span>&nbsp;&nbsp;&nbsp;&nbsp;...</span><br>
    <span>}</span>
  </p>
  <p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"><span class="note">注意</span></span>要在 GML Visual 中创建函数，请使用<a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">声明新函数</a>。启用其"Temp"选项来创建方法变量(上面显示的第一个语法)。</p>
  <p>然而，一般来说，你会用<em>第一种</em>形式来定义方法，而用第二种形式来定义<a href="Script_Functions.htm">脚本函数</a>，因为第二种形式也会给函数名分配一个脚本索引，而第一种形式则是一个 "真 "方法(如果用来定义脚本函数，需要使用<a href="Variables/Global_Variables.htm">global</a>前缀)。</p>
  <p class="note"><span class="note">注意</span>您可以通过在项目中同时使用这两个表单，然后在每个表单上调用运行时函数<a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a>来检查此问题。一个将被分类为"数字"-因为它返回脚本索引Id-，而另一个将被分类为"方法"。</p>
  <p>因此，请记住，一般来说，当我们谈论方法和方法变量时，我们总是指那些<em>没有</em>用脚本索引定义过的函数。</p>
  <p>下面您可以看到使用不同范围创建方法变量的三个简单示例：</p>
  <p class="code">// Local<br>
    var _debug = function(message)<br>
    {<br>
    &nbsp; &nbsp; show_debug_message(message);<br>
    }<br>
    <br>
    // Instance<br>
    do_maths = function(val1, val2, val3)<br>
    {<br>
    &nbsp; &nbsp; return (val1 * val2) - val3;<br>
    }<br>
    <br>
    // Global<br>
    global.pd = function(_x1, _y1, _x2, _y2);<br>
    {<br>
    &nbsp; &nbsp; return point_distance(_x1, _y1, _x2, _y2);<br>
    }
  </p>
  <p>请注意，在上面的代码中，作为函数输入给出的各种参数都被命名了，这些名称应该在函数中用来指代不同的输入。另请注意，您可以使用<span class="inline"><a href="Language_Features/return.htm">return</a></span>语句从函数返回一个值以供代码的其他地方使用，默认情况下，定义了<em>no</em>返回值的函数将返回<span class="inline">undefined</span>。</p>
  <p class="note"><span class="note">注意</span> 虽然变量会在选择的作用域中，但实际的函数会被绑定到它最初定义的作用域中。例如，<a href="Script_Functions.htm">脚本函数</a>都是全局范围和 "非绑定"(即：它们不与任何实例相关联)，但如果你有一个脚本函数，在其中创建了另一个函数作为方法变量，然后你从一个实例中调用这个脚本函数，脚本中使用的函数将<strong>作为一个方法</strong>绑定到实例变量。一般来说，这不是你需要考虑的问题，但对于使用方法变量的更复杂的操作来说，这是值得考虑的。这也适用于使用其他结构，比如<a href="Language_Features/with.htm"><span class="inline">with</span></a>--当你在with里面创建一个方法变量时，该函数将被绑定到当前范围内的实例。</p>
  <p>创建方法变量后，可以像使用运行时函数或脚本函数一样使用，例如：</p>
  <p class="code">create_vec = function(_x1, _y1, _x2, _y2);<br>
    {<br>
    &nbsp; &nbsp; var _array;<br>
    &nbsp; &nbsp; _array[0] = point_distance(_x1, _y1, _x2, _y2);<br>
    &nbsp; &nbsp; _array[1] = point_direction(_x1, _y1, _x2, _y2);<br>
    &nbsp; &nbsp; return _array;<br>
    }<br>
    <br>
    vec = create_vec(x, y, mouse_x, mouse_y);
  </p>
  <p>在函数中创建的变量将遵循与正常情况相同的规则，并且将根据使用的关键字或函数调用的范围来确定范围。在上面的示例中，我们使用<span class="inline">var</span>，因此数组变量位于函数的<em>局部</em>范围内。如果不使用关键字，则会在调用函数的实例范围内创建变量。</p>
  <p>方法与脚本函数一样，也可以采用可选参数，这些参数在未传入时具有默认值：</p>
  <p class="code">create_attachment = function(_attachment, <strong>_x = x</strong>, <strong>_y = y</strong>)<br>
    {<br>
    &nbsp; &nbsp; return instance_create_layer(_x, _y, layer, _attachment);<br>
    }</p>
  <p>上面的函数接受三个参数，其中最后两个是可选的。如果在调用函数时未传入这些坐标，则默认情况下它们将使用实例的<span class="inline">x</span>和<span class="inline">y</span>坐标。</p>
  <p>请注意，如果未传入参数并且没有默认值，则它将等于<span class="inline">undefined</span>。</p>
  <p>方法还可以利用静态变量，静态变量在每次函数调用过程中都保持其值。请<a href="Functions/Static_Variables.htm">阅读此页面</a>了解更多信息。</p>
  <p>下面我们列出了一些与方法变量关联的帮助器函数：</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/is_method.htm">is_method</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method.htm">method</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_self.htm">method_get_self</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_get_index.htm">method_get_index</a></li>
    <li><a href="../GML_Reference/Variable_Functions/method_call.htm">method_call</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div>
        <div style="float:right">Next:&nbsp;<a href="Script_Functions_vs_Methods.htm">脚本函数与方法</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
-->
  <!-- TAGS
method_variables
-->

</body></html>