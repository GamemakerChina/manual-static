<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "5.4.0_1";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Building via Command Line</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css">
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo">
  <meta name="topic-comment" content="Page that explains how your project can be compiled and tested through a CLI
">
  <meta name="rh-index-keywords" content="Building via Command Line">
  <meta name="search-keywords" content="build, command line, cli, ci, igor, continuous integration">
<meta name="brsnext" value="Settings/Runner_Details/Compiler_Batch_Files.htm"><meta name="brsprev" value="Settings/Runner_Details/Runner_Details.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Building via Command Line">
        <span>Building via Command Line</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1 id="h">通过命令行构建</h1>
  <p class="note"><span class="note"><strong>注意</strong></span>通过命令行生成可执行文件包仅在特定许可证上可用，因此请查看<a href="https://help.yoyogames.com/hc/en-us/articles/115002637011" title="Which Licence Is Right For Me?">此页面</a>以了解您的许可证是否支持此操作。对于所有其他许可证，您可以通过命令行运行和调试项目，而不受任何限制。</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span>除了通过IDE构建项目外，还允许您使用下面介绍的许多选项和命令通过命令行界面构建项目。您可以通过运行一个批处理文件来生成项目、测试项目并将其部署到多个平台，以及通过自动化服务器（如<a href="https://www.jenkins.io/" title="Jenkins">Jenkins</a>）设置连续集成。</p>
  <p>这是由运行<span class="inline2">Igor.exe</span>可执行文件来完成的，该文件存在于你的运行文件夹中，并传入本页所列的选项和命令。</p>
  <p>默认情况下，Igor可以在。</p>
  <ul class="colour">
    <li>Windows:&nbsp;<span class="inline2">C:\ProgramData\GameMaker\Cache\runtimes\runtime-[version]\bin\igor\&lt;OS&gt;\&lt;architecture&gt;\</span></li>
    <li>macOS:&nbsp;<span class="inline2">/Users/Shared/GameMaker/Cache/runtimes/runtime-[version]/bin/igor/osx/&lt;architecture&gt;/</span></li>
  </ul>
  <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">注意</span></span>&nbsp;在尝试命令行构建之前，你必须至少用你的账户登录过IDE。</p>
  <p>&nbsp;</p>
  <h1>Igor 持续集成构建</h1>
  <h2>设置</h2>
  <p>要在计算机上设置CI构建，需要执行以下操作：</p>
  <ul class="colour">
    <li>安装<span data-keyref="GameMaker Name">GameMaker</span>和所需的运行时</li>
    <li>通过IDE为所需目标构建项目，以确保它们工作正常</li>
    <li>从命令行进行构建测试（请参见下面的示例）</li>
    <li>创建一个批处理文件，该文件将执行任务中所需的生成（从命令行测试）</li>
    <li>设置CI环境(这取决于您将如何构建游戏)，如&nbsp;<a href="https://www.jenkins.io/" title="Jenkins">Jenkins</a></li>
    <li>设置您的CI任务并确保已设置所有先决条件(即源代码管理与项目同步)</li>
    <li>将批处理文件挂接到CI任务并在Jenkins环境中进行测试</li>
  </ul>
  <h2>注意</h2>
  <ul class="colour">
    <li>一些平台可能对你的文件路径的长度有问题，在这种情况下，你需要<span class="inline"><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst" title="subst documentation">subst</a></span>&nbsp;你的PC上的虚拟驱动器，然后再把它们传到你的命令中。</li>
    <li>有些平台（特别是安卓）会在构建时自动<span class="inline2">subst</span>一个驱动器，所以你可能需要在出现错误时手动清理。</li>
  </ul>
  <h2>选项</h2>
  <p>以下是运行<strong>Igor</strong>可执行文件时可以使用的选项：</p>
  <table>
    <colgroup>
      <col style="width: 316px;">
      <col>
    </colgroup>
    <tbody>
      <tr>
        <th style="">Option</th>
        <th style="">描述</th>
      </tr>
      <tr>
        <td style=""><span class="inline">/lf=[licence_plist_file]</span></td>
        <td style="">The full path to the licence file, either from the IDE or from the <a href="#access_key">Access Key</a> service<br>
          <br>
          To retrieve the licence from the IDE, the paths are as follows:<br>
          Windows:&nbsp;<span class="inline2"><span>%appdata%\GameMaker\&lt;user_name&gt;_&lt;number&gt;\licence.plist</span></span><br>
          macOS:&nbsp;<span class="inline2"><span>~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;/licence.plist</span></span>
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td>
        <td style="">The user folder used for retrieving licence information, alternative to <span class="inline2">/lf</span><br>
          <br>
          On Windows, this will be:&nbsp;<span class="inline2"><span>%appdata%\GameMaker\&lt;user_name&gt;_&lt;number&gt;</span></span><br>
          On macOS, this will be:&nbsp;<span class="inline2"><span>~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;</span></span>
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/rp=[runtime_root]</span></td>
        <td style="">The root folder of the runtime</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/project=[project_YYP_file]</span></td>
        <td style="">The full path to the project's <span class="inline2">.yyp</span> file</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/cache=[cache_dir_path]</span></td>
        <td style="">The cache directory to use (defaults to <span class="inline2">\cache</span>&nbsp;in the current directory)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/temp=[temp_dir_path]</span></td>
        <td style="">The temporary directory to use (defaults to <span class="inline2">c:\temp</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/of=[output_folder_filename]</span></td>
        <td style="">The output directory where the build will be extracted; do not specify just a directory as the trailing entry is always removed (e.g.: specifying <span class="inline2">d:\game\output</span> will place the game files in <span class="inline2">d:\game</span>)<br>
          <br>
          If this is not specified, a directory named <span class="inline2">output</span> will be created in the same directory as the <span class="inline">.bat</span> file (or where the command is running from), containing the extracted build files
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/tf=[target_file]</span></td>
        <td style="">The actual file name of the ZIP file or NSIS installer that is created</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/config=[configName]</span></td>
        <td style="">The name of the configuration to use (defaults to <span class="inline">Default</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/runtime=YYC|VM</span></td>
        <td style="">The output type (either YYC or VM), defaults to VM</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/j=[NumCPUs]</span></td>
        <td style="">The number of CPUs to use during the build process</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/df=[devices_json_file]</span></td>
        <td style="">The path to your <span class="inline2">devices.json</span> file, required when building to other devices.<br>
          <br>
          On Windows, this will be:&nbsp;<span class="inline"><span>%appdata%\GameMaker\&lt;user_name&gt;_&lt;number&gt;\devices.json</span></span><br>
          On macOS, this will be:&nbsp;<span class="inline"><span>~/.config/GameMaker/&lt;user_name&gt;_&lt;number&gt;/devices.json</span></span>
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/device=[device_name_from_IDE]</span></td>
        <td style="">The name of the target device to build to, as set up in the IDE</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/launch</span></td>
        <td style="">Launch the executable on the target device after building; same as the <a href="../IDE_Navigation/Menus/The_Build_Menu.htm">"Create Executable and Launch" option</a>&nbsp;in the IDE</td>
      </tr>
    </tbody>
  </table>
  <h2 id="h1"><a id="access_key"></a>访问密钥</h2>
  <p><span class="inline2">/lf</span>选项需要你的<span class="inline2">licence.plist</span>文件的路径，你可以在登录IDE后从GameMaker安装中获取，如上表所述。</p>
  <p>然而，如果你不能访问IDE安装，你可以从GameMaker网站上申请一个访问密钥，并从中生成一个<span class="inline2">licence.plist</span>文件。</p>
  <ul class="colour">
    <li>进入<a href="https://gamemaker.io/account/access_keys">gamemaker.io/account/access_keys</a>，用拥有相应许可证的账户登录。</li>
    <li>生成一个密钥并将其复制到你的剪贴板上</li>
    <li>打开命令提示符，导航到Igor目录（路径在本页顶部给出） <ul><li><span class="inline2">cd &lt;igor dir&gt;</span></li></ul></li>
    <li>使用Igor生成许可证文件 <ul><li><span class="inline2">igor runtime FetchLicences -ak=&lt;KeyFromSite&gt; -of=&lt;OutputFileName&gt;</span></li> </ul> </li>
    <li>生成到<span class="inline2">-of</span>路径的<span class="inline2">licence.plist</span>文件现在可以在<span class="inline2">/lf</span>选项中使用。</li>
  </ul>
  <h2>Hello World</h2>
  <p>下面是一个在Windows上运行游戏的步骤示例：</p>
  <ul class="colour">
    <li>打开一个命令提示窗口<ul> <li>Win+R，写上<span class="inline2">cmd</span>，按Enter</li> </ul></li>
    <li>导航到本页顶部给出的Igor目录 <ul> <li><span class="inline2">cd &lt;igor dir&gt;</span></li> </ul> </li>
    <li>写下<span class="inline2">igor</span>，然后按回车键，确认你在正确的位置。这样做应该会给你一个Igor的命令列表。如果你得到一个不同的结果，请确保你在正确的目录中。</li>
    <li>通过提供项目文件、运行时目录、许可证文件、平台和构建类型来运行一个游戏。用双引号（<span class="inline2">""</span>）括住每个目录，以确保空间得到正确处理。<ul> <li><span class="inline2">igor /project="&lt;yourProjectDir&gt;\projectname.yyp" /rp="&lt;runtime dir&gt;" /lf="&lt;plist dir&gt;\licence.plist" Windows Run</span></li> </ul> </li>
    <li>你的游戏现在应该运行了!</li>
  </ul>
  <h2>平台实例</h2>
  <p>下面您可以找到所有平台的构建命令示例:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#"><span data-open-text="true" data-skip-index="true">GX.games</span><span data-close-text="true">GX.games</span></a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p>清理 GX.games 项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Clean</p>
    <p>运行 GX.game:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Run</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Windows</span><span data-close-text="true">Windows</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p>清理 Windows 项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p>
    <p>为 Windows 进行 VM 构建 —— <span class="inline">Run</span>、<span class="inline"> PackageZip </span>和<span class="inline"> PackageNsis</span> :</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Run</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Windows PackageZip</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Windows PackageNsis</p>
    <p>为 Windows 进行 YYC 构建 ——<span class="inline">Run</span>、<span class="inline">PackageZip</span>和<span class="inline">PackageNsis</span> :</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /platform=YYC -- Windows Run</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Windows PackageZip</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Windows PackageNsis</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">macOS</span><span data-close-text="true">macOS</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p>清理 MacOS 项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Mac Clean</p>
    <p>在 Mac 上为 macOS VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Mac Package</p>
    <p><strong>注意</strong>，在 Mac 上需要使用 mono 来运行 Igor，所以在所有命令之前需要编写<span class="inline"><strong> mono </strong></span> ，例如: <span class="inline">mono Igor.exe [options]</span></p>
    <p>在 PC 上为 macOS VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Mac Package</p>
    <p>在 Mac 上为 macOS YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Mac Package</p>
    <p>在 PC 上为 macOS YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Mac Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Linux / Ubuntu</span><span data-close-text="true">Linux / Ubuntu</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p>清理 Linux 项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Linux Clean</p>
    <p>在 PC 上为 Linux VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Linux Package</p>
    <p>在 PC 上为 Linux YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Linux Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">HTML5</span><span data-close-text="true">HTML5</span></a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p>清理 HTML5项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- HTML5 Clean</p>
    <p>构建 HTML5文件夹(确保用<span class="inline">/tf 指定目标文件夹)</span> :</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_folder] -- HTML5 folder</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">iOS</span><span data-close-text="true">iOS</span></a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p>在 Mac 上为 iOS VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- ios Package</p>
    <p>在 PC 上为 iOS VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ios Package</p>
    <p>在 Mac 上为 iOS YYC构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- ios Package</p>
    <p>在PC上为 iOS YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ios Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Android</span><span data-close-text="true">Android</span></a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p>清理 Android 项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p>
    <p>使用 VM 构建 Android APK:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- Android Package</p>
    <p>使用 YYC 构建 Android APK:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- Android Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">tvOS</span><span data-close-text="true">tvOS</span></a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p>清理 tvOS 工程:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- tvos Clean</p>
    <p>在 Mac 上为 tvOS VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] -- tvos Package</p>
    <p>在 PC 上为 tvOS VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- tvos Package</p>
    <p>在 Mac 上为 tvOS YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC -- tvos Package</p>
    <p>在PC上为 tvOS YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- tvos Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">PS4</span><span data-close-text="true">PS4</span></a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p>清理 PS4 工程:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps4 Clean</p>
    <p>在 PC 上为 PS4 VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps4 Package</p>
    <p>在PC上为 PS4 YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ps4 Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#"><span data-open-text="true" data-skip-index="true">PS5</span><span data-close-text="true">PS5</span></a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p>清理 PS5 工程:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps5 Clean</p>
    <p>在 PC 上为 PS5 VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps5 Package</p>
    <p>在PC上为 PS5 YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- ps5 Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">Xbox One</span><span data-close-text="true">Xbox One</span></a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p>清理 Xbox One 项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOne Clean</p>
    <p>在 PC 上为 Xbox One VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOne Package</p>
    <p>在PC上为 Xbox One YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- XBoxOne Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">Xbox Series X/S</span><span data-close-text="true">Xbox Series X/S</span></a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p>清理 Xbox X/S 系列项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOneSeriesXS Clean</p>
    <p>为 Xbox X/S 系列 VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p>
    <p>为 Xbox X/S 系列 YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">Switch</span><span data-close-text="true">Switch</span></a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p>清理Switch项目:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Switch Clean</p>
    <p>在 PC 上为 Switch VM 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /device=[device_IDE_Name] -- Switch Package</p>
    <p>在 PC 上为 Switch YYC 构建:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_folder_filename] /tf=[target_file] /platform=YYC /device=[device_IDE_Name] -- Switch Package</p>
  </div>
  <p>&nbsp;</p>
  <h1>Igor 运行时</h1>
  <p>下面是可以与 Igor 运行时一起使用的选项:</p>
  <table>
    <tbody>
      <tr>
        <th style="">Option</th>
        <th style="">描述</th>
      </tr>
      <tr>
        <td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td>
        <td style="">Set the user folder used for retrieving licence information so <span data-keyref="GameMaker Name">GameMaker</span> knows which modules can be installed</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/lf=[license_file]</span></td>
        <td style="">Set the direct path to a licence file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/ru=[runtime_url]</span></td>
        <td style="">Set the URL to fetch runtime information from (defaults to the stable release)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/rp=[runtime_root]</span></td>
        <td style="">Set the local runtime install folder to list the installed runtimes or install new runtimes</td>
      </tr>
    </tbody>
  </table>
  <p>下面是可以与 Igor 运行时一起使用的命令:</p>
  <h4>语法:</h4>
  <p class="code">Igor.exe [command]</p>
  <table>
    <colgroup>
      <col style="width: 237px;">
      <col style="width: 537px;">
    </colgroup>
    <tbody>
      <tr>
        <th style="">Command</th>
        <th style="">描述</th>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime List</span></td>
        <td style="">Lists the runtimes available on a feed (version number, date/time of build)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime ListInstalled [-directory]</span></td>
        <td style="">Lists the runtimes available in the current folder (<span class="inline">directory</span>=full path to the folder)<br>
          <br>
          You can specify a directory to look in, but if it's not specified it will default to the current directory<br>
          <br>
          This also checks whether there is a <span class="inline">receipt.json</span> file and a <span class="inline">manifest</span> folder inside the directory (making sure that it's actually a runtime)
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime&nbsp;Info [-version]</span></td>
        <td style="">Prints out information about the most recent runtime on the given feed; also needs a licence file to show information regarding the modules available for the user<br>
          <br>
          <span class="inline">version</span> can either by a string used to search through the feed titles (e.g.: <span class="inline">"739"</span> would show information for all builds containing 739 in their version numbers), or it can be <span class="inline">all</span> to show information for all feeds<br>
          <br>
          It will list the modules with the <span class="inline">.zip</span> file names for each module
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime Install [-version]</span></td>
        <td style="">Installs the latest runtime from the given feed using the given <span class="inline">version</span> as a search filter; if that is not specified, it defaults to the latest version. It will get all the modules that the user has on their licence.</td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime Verify [-folder=.]</span></td>
        <td style="">Calculates the checksums for all the installed files and compares them to the checksums written into the manifest <span class="inline">folder</span>. You can specify a folder to check, however if that is not specified it will default to the current directory.<br>
          <br>
          This will flag any files where the checksums don't match, files that are missing and files that should not be there.<br>
          <br>
          Do note that the manifest files themselves are not verified and a user can alter the manifest files to match the installed ones.
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime FetchLicences [-ak] [-of]</span></td>
        <td style="">Generates a licence.plist file (<span class="inline2">-of</span>) from an access key (<span class="inline2">-ak</span>), see <a href="#access_key">Access Key</a></td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p>
  <h1>Igor 测试</h1>
  <p>下面是用 Igor 测试构建的选项:</p>
  <table>
    <tbody>
      <tr>
        <th style="">Option</th>
        <th style="">描述</th>
      </tr>
      <tr>
        <td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td>
        <td style="">Set the user folder used for retrieving licence information so <span data-keyref="GameMaker Name">GameMaker</span> knows which modules can be installed</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/lf=[license_file]</span></td>
        <td style="">Set a direct path to a licence file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/df=[device_file]</span></td>
        <td style="">Set a direct path to a <span class="inline">devices.json</span> file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/timeout=[number_of_seconds_to_wait]</span></td>
        <td style="">The timeout to use for the test in seconds, defaults to 120 seconds; the test will be stopped after this timeout is over and will be marked as failed</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/waittime=[number_of_seconds_to_wait]</span></td>
        <td style="">Number of seconds to wait in the main loop before declaring the test as passed, defaults to 30 seconds</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/device=[device_name]</span></td>
        <td style="">Used to look up the device name in the user folder's <span class="inline">devices.json</span> file</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/target=[list_of_targets]</span></td>
        <td style="">Comma-separated list of targets in the <span class="inline">PLATFORM|DEVICE</span> format, e.g.: <span class="inline">/target="Windows|Local,HTML|Firefox"</span><br>
          <br>
          If you specify&nbsp;<strong>all</strong>, the tests will attempt to run for every device in the <span class="inline">devices.json</span> file
        </td>
      </tr>
    </tbody>
  </table>
  <p>有一个命令可以用来对 Igor 运行测试:</p>
  <p class="code">Igor.exe Tests RunTests [test_directory/test_filename]</p>
  <p>必须指定测试目录或测试文件名。</p>
  <ul class="colour">
    <li>注意<li>如果是一个目录，Igor 将在目录中查找名为<span class="inline"> tests.json </span>的文件。<ul><li>如果<strong>没有找到</strong>文件 ，Igor 将递归地搜索在目录中的<span class="inline">.yyz</span>和<span class="inline">.yyp</span>文件。<ul><li>每个被找到的项目都将被构建并在 Windows 上运行它，直到运行程序到达主循环<ul><li>如果运行程序在等待时间之后仍在运行，则测试通过</li><li>如果项目在超时期间内没有编译，或者在等待时间超过之前崩溃，则测试失败</li></ul></li></ul></li><li>如果<strong>找到</strong><span class="inline">tests.json</span>文件 ，Igor 将运行文件中描述的测试(参见下面的示例)</li></ul></li></li>
    <li>或者，您可以提供到<span class="inline"> tests.json </span>文件的直接路径，而不是目录</li>
  </ul>
  <p>&nbsp;</p>
  <h1>Tests.json 文件</h1>
  <h2>格式</h2>
  <p><span class="inline">tests.json</span>文件必须具有以下格式:</p>
  <ul class="colour">
    <li>JSON 文件应该包含一个对象数组</li>
    <li>每个对象应该描述一个测试<ul><li>测试对象必须包含以下键:<ul><li><span class="inline">name</span> : 用于报告测试是否通过或失败的名称</li><li><span class="inline">path</span> : 一个指向<span class="inline">.yyp</span>,<span class="inline">.yyz</span>,<span class="inline">.gml</span>,<span class="inline">.js</span>的测试文件或文件夹路径。</li><li><span class="inline">command</span>: 测试的 Igor 命令(<span class="inline">Run</span> ，<span class="inline">CreatePackage</span>等，如上所述)</li></ul></li><li>测试对象还可以包含以下键:<ul><li><span class="inline">platform</span> : 直接传递给 Igor 以执行测试</li><li><span class="inline">device</span> : 来自<span class="inline">devices.json</span>的设备名称</li><li><span class="inline">target</span> : 类似"<span class="inline">平台|目标"</span>格式，例如: "<span class="inline">Windows|Local"</span></li><li><span class="inline">timeout</span> : 包括编译和运行在内的总测试的允许时长; 如果超时，将停止测试并标记为失败</li><li><span class="inline">waittime</span> : 在进入主循环之后等待的时间长度，然后再决定测试已通过</li><li><span class="inline">owner</span> : 如果此测试失败，将通过电子邮件发送的用户的电子邮件地址</li></ul></li></ul></li>
  </ul>
  <h2>例子</h2>
  <p>下面是<span class="inline">tests.json</span>文件的一个示例:</p>
  <p class="code">[<br>
    &nbsp;{<br>
    &nbsp; "name" : "Game Idea Windows",<br>
    &nbsp; "path" : "C:/scratch/GameIdea.yyz",<br>
    &nbsp; "platform" : "Windows",<br>
    &nbsp; "command" : "Run",<br>
    &nbsp; "timeout" : "500",<br>
    &nbsp; "waittime" : "30"<br>
    &nbsp;},<br>
    &nbsp;{<br>
    &nbsp; "name" : "Platformer Game Windows",<br>
    &nbsp; "path" : "C:/Users/&lt;MY USERNAME&gt;/Documents/GameMaker/Platformer Game/PlatformerGame.yyp",<br>
    &nbsp; "target" : "Windows|Local,HTML5|selenium:firefox,PS4|Default",<br>
    &nbsp; "command" : "Run"<br>
    &nbsp;},<br>
    &nbsp;{<br>
    &nbsp; "name" : "Puzzle Game Windows",<br>
    &nbsp; "path" : "C:/Users/&lt;MY USERNAME&gt;/Documents/GameMaker/Puzzle Game/PuzzleGame.yyp",<br>
    &nbsp; "platform" : "HTML5",<br>
    &nbsp; "command" : "Run",<br>
    &nbsp; "device" : "selenium:chrome"<br>
    &nbsp;}<br>
    ]</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:&nbsp;<a href="Runner_Details/Runner_Details.htm">运行器和编译器</a></div>
        <div style="float:right">Next:&nbsp;<a href="Runner_Details/Compiler_Batch_Files.htm">编译器批处理文件/脚本</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Building via Command Line
CLI
Command Line Interface
CI
Continuous Integration
-->
  <!-- TAGS
building_via_command_line
-->

</body></html>