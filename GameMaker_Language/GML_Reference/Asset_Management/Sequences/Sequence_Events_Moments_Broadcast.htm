<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="../../../..",gTopicId="8.2.2.3.9.0_10"</script><script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script><script type="text/javascript" src="../../../../template/scripts/common.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script><script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Sequence Events, Moments and Broadcast Messages</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"><script src="../../../../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequence Events, Moments and Broadcast Messages"><meta name="rh-index-keywords" content=""><meta name="search-keywords" content="Sequence Events,Sequence Momements,Sequence Messages,broadcast messages,event_create,event_destroy,event_clean_up,event_step,event_step_begin,event_step_end,event_async_system,event_broadcast_message"><meta name="brsnext" value="GameMaker_Language/GML_Reference/Asset_Management/Sequences/in_sequence.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_instance_override_object.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Sequence Events, Moments and Broadcast Messages"><span>Sequence Events, Moments and Broadcast Messages</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1>事件、时刻和广播消息的序列</h1><p>除了<a href="Sequences.htm">这里</a>为序列结构列出的所有属性之外，还可以在序列中添加特殊的"动作"属性。有三种不同类型的这些"动作"属性可以添加到序列对象-<b>事件</b>。<b>时刻</b>和<b>广播消息</b>，以下各节将更详细地解释这些属性。</p><h2>序列事件</h2><p>序列对象可以添加<b>事件</b>，这些事件类似于对象资源使用的事件。分配给序列对象的事件将以特定顺序发生，或在序列生命周期中定义的时刻发生一次，或序列正在运行的每个帧发生。在本节中，我们讨论如何使用代码处理这些事件，但也可以使用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>添加这些事件。 请注意，此处列出的事件顺序不受<a class="tooltip" title="序列文件或精灵编辑器帧视图中时间轴内的当前“播放”位置。在序列(和精灵)中，这将随着动画预览而移动，你可以将其放置在特定的帧上以查看和编辑该位置的键和关键帧。">播放头</a>方向的影响，即使序列正在反向播放，事件仍将按以下顺序运行。</p><p>可用的事件包括：<b></b></p><ul class="colour"><li><b>创建</b>：在层上创建序列实例时触发。</li><li><b>销毁</b>：当层上的序列实例被破坏时触发。</li><li><b>清除</b>：当序列实例被垃圾回收时触发。</li><li><b>步</b>：在通常的对象步骤事件之前触发。<b>重要！</b>如果序列暂停，则在序列再次开始播放后的下一步骤之前，不会触发此事件。</li><li><b>步开始</b>：在对象开始步骤事件之前触发。<b>重要！</b>如果序列暂停，则在序列再次开始播放后的下一步骤之前，不会触发此事件。</li><li><b>步结束</b>：在对象结束步骤事件之前触发。<b>重要！</b>如果序列暂停，则在序列再次开始播放后的下一步骤之前，不会触发此事件。</li><li><b>异步系统</b>： 触发的对象与任何对象<a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/System.htm">异步系统事件</a>处理程序相同。<em><b>重要！</b>如果序列暂停，则不会触发此事件。</em></li><li><b>广播消息</b>：遇到广播消息关键帧，序列更新时触发。</li></ul><p>所有事件都需要与在脚本中定义的函数相关联，因此要设置事件，必须将<a href="../../../GML_Overview/Method_Variables.htm">方法变量</a>分配给具有正确名称的属性，该属性告诉事件调用该函数的顺序。其语法如下：</p><p class="code">&lt;sequence_struct&gt;.&lt;event_property&gt; = method(&lt;sequence_struct&gt;, &lt;function_name&gt;);</p><p>不同事件的序列结构属性如下：<span class="inline"></span></p><ul class="colour"><li><span class="inline">event_create</span><span class="inline"></span></li><li><span class="inline">event_destroy</span><span class="inline"></span></li><li><span class="inline">event_clean_up</span><span class="inline"></span></li><li><span class="inline">event_step</span><span class="inline"></span></li><li><span class="inline">event_step_begin</span><span class="inline"></span></li><li><span class="inline">event_step_end</span></li><li><span class="inline">event_async_system</span><span class="inline"></span></li><li><span class="inline">event_broadcast_message</span></li></ul><p>举一个使用的例子，假设我们想要序列在检测到鼠标左键单击时反转方向。我们首先需要创建一个脚本，其中包含我们想要调用的函数，如下所示：</p><p class="code">/// @function seq_reverse();<br><br>function seq_reverse()<br>{<br>&nbsp; &nbsp; if (mouse_check_button_pressed(mb_left))<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; if (self.headDirection == seqdir_right)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.headDirection = seqdir_left;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp; &nbsp; &nbsp; &nbsp; else self.headDirection = seqdir_right;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</p><p>在这个函数中，我们所做的就是听鼠标按一下，然后反转方法绑定到的序列的播放方向。您会注意到，当前您无法向链接到这些属性的函数传递任何参数，并且在所有情况下，函数范围内的<a href="../../../GML_Overview/Instance_Keywords.htm"><span class="inline">self</span></a>变量都被指定为序列实例。</p><p class="note"><b><span data-conref="../../../../assets/snippets/Tag_note.hts"><span class="note">注意</span></span></b> 值得注意的是，在上述脚本中，<span class="inline">self</span> 标识符可以省略，仅用于显式显示本示例中使用的方法变量的范围。</p><p>要将其分配给序列，您需要执行以下操作：</p><p class="code">var _seq = sequence_get(Sequence1);<br>_seq.event_step = method(_seq, seq_reverse);</p><p>现在，我们已经为序列<i>对象</i>分配了一个步骤事件，该事件具有一个函数，用于检测何时按下鼠标，然后在房间中创建序列<i>实例</i>后更改其播放头方向。</p><h2><label for="2">时刻</label></h2><p>序列<b>时刻</b>是在播放序列时在一个或多个指定帧上触发的唯一代码操作。这些代码矩类似于在给定帧上触发的事件(上面解释的)简单预定义的<a href="../../../GML_Overview/Method_Variables.htm">方法变量</a>。例如，假设您想要在动画的特定帧上创建"项目符号"实例的序列首先需要创建用于此操作的函数，如下所示：</p><p class="code">/// @function seq_shoot();<br><br>seq_shoot = function()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;instance_create_layer(sequence.xorigin, sequence.yorigin, "Instances", obj_Bullet);<br>}</p><p>然后，您可以将此添加到序列结构的<span class="inline">momentKeyframes</span>属性中的帧中。这本质上是一个"特殊"轨迹，仅用于此目的，因此只能获取与您希望序列具有的瞬间操作相关联的关键帧数据。通过创建关键帧结构并填充关键帧数据(通道 0 是唯一可以使用的通道，轨迹类型为<span class="inline">seqtracktype_moment</span>)，创建此轨迹的方式与创建任何其他轨迹的方式基本相同。 下面是如何使用我们上面定义的函数在给定时刻(帧)上激发该值的示例：</p><p class="code">var _seq = sequence_get(my_Seq);<br>var _k = array_create(3);<br>_k[0] = sequence_keyframe_new(seqtracktype_moment);<br>_k[0].frame = 60;<br>_k[1] = sequence_keyframe_new(seqtracktype_moment);<br>_k[1].frame = 120;<br>_k[2] = sequence_keyframe_new(seqtracktype_moment);<br>_k[2].frame = 180;<br>var _d = array_create(1);<br>_d[0] = sequence_keyframedata_new(seqtracktype_moment);<br>_d[0].channel = 0;<br>_d[0].event = method(_d[0], seq_shoot);<br>_k[0].channels = _d;<br>_k[1].channels = _d;<br>_k[2].channels = _d;<br>_seq.momentKeyframes = _k;</p><p>上述代码将简单地设置"时刻"轨道的帧60、120和180，以调用方法<span class="inline">seq_shoot</span>。 您会注意到，当前您无法将任何参数传递给用于每个时刻的函数，并且在所有情况下，函数范围内的<span class="inline">self</span>变量都被指定为序列实例(通常不需要使用<span class="inline">self</span>，但在某些特殊情况下，它可能很有用)。</p><h2><label for="3">广播消息</label></h2><p>序列可以生成<b>广播消息</b>，这些简单字符串沿动画时间线添加到特定帧，当到达时间线中的该点时，该字符串将被广播到监听该消息的所有对象实例。您可以使用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>将这些消息添加到 IDE 中，但也可以使用代码创建和编辑这些消息。</p><p>要使用GML在序列上创建广播消息，需要将它们添加到序列结构的<span class="inline">messageEventKeyframes</span>属性中的帧中。这本质上是一个"特殊"轨迹，仅用于此目的，因此只能获取与您希望序列具有的广播消息相关联的关键帧数据。通过创建关键帧结构并用关键帧数据填充关键帧数据，创建此轨迹的方式与创建任何其他轨迹的方法基本相同，其中通道 0 是唯一可以使用的通道，轨迹类型为<span class="inline">seqtracktype_message</span>。 下面是如何创建示例：</p><p class="code">var _seq = sequence_get(my_Seq);<br>var _k = array_create(2);<br>_k[0] = sequence_keyframe_new(seqtracktype_message);<br>_k[0].frame = 60;<br>_k[1] = sequence_keyframe_new(seqtracktype_message);<br>_k[1].frame = 120;<br>var _m1 = array_create(2);<br>_m1[0] = "Hello";<br>_m1[1] = "World";<br>var _m2 = array_create(1);<br>_m2[0] = "This is a Broadcast Message";<br>var _d1 = array_create(1);<br>_d1[0] = sequence_keyframedata_new(seqtracktype_message);<br>_d1[0].channel = 0;<br>_d1[0].events = _m1;<br>var _d2 = array_create(1);<br>_d2[0] = sequence_keyframedata_new(seqtracktype_message);<br>_d2[0].channel = 0;<br>_d2[0].events = _m2;<br>_k[0].channels = _d1;<br>_k[1].channels = _d2;<br>_seq.messageEventKeyframes = _k;</p><p>您将注意到，消息文本作为数组传递到关键帧数据通道。这是因为您可以在同一帧上广播多条消息，并让不同的对象实例侦听它们，并根据它们实际期望的消息做出不同的反应。</p><p>序列发出广播消息后，您可以使用对象实例中的<i>Other</i>&gt;<i>广播消息</i>事件对其进行解析，此处<a href="../../../../The_Asset_Editors/Sequence_Properties/Broadcast_Messages.htm">将对此进行详细说明</a>。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Sequences.htm">序列</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>