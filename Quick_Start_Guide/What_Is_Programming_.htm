<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="..",gTopicId="2.0_1"</script><script type="text/javascript" src="../template/scripts/rh.min.js"></script><script type="text/javascript" src="../template/scripts/common.min.js"></script><script type="text/javascript" src="../template/scripts/topic.min.js"></script><script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>What Is Programming?</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../assets/css/default.css" type="text/css"><script src="../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker."><meta name="rh-index-keywords" content="Quick Start - What Is Programming?"><meta name="search-keywords" content="programming"><meta name="robots" content="NOODP"><meta name="brsnext" value="Quick_Start_Guide/Creating_Sprites.htm"><meta name="brsprev" value="Quick_Start_Guide/Quick_Start_Guide.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="What Is Programming?"><span>What Is Programming?</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1>什么是编程</h1><p>在<a href="Quick_Start_Guide.htm">前一节</a>中，我们概述了如何使用 <span data-keyref="GameMaker Name">GameMaker</span> 来创建您的游戏，但无论您添加了什么精灵、物体或房间，除非您已将其设置为<strong>程序</strong>，否则什么都不会发生。但是，什么是程序呢？</p><p>在一般意义上，程序只是一组指令(或<strong><a class="tooltip" title="在编程中，语句是用编程语言合法编写的单行代码，表示要执行的操作。语句可能具有自己的内部组件，包括表达式，运算符和函数。语句的一个示例是A = B +5。GameMakerStudio 2程序不过是一系列一起执行任务（如移动玩家）的一个或多个语句的序列。">语句</a></strong><span class="glossextra"></span>)，您向计算机发出指令，告诉它执行某些任务。这些任务可能有很大的不同，从简单地告诉计算机在屏幕上画一些东西，到根据一些用户输入计算一个值，然后对它做出反应，但在所有情况下，它都是一个逻辑结构，会给出一些结果。在上一页中，我们讨论了将对象的实例向右移动2个像素，因此让我们来看看实现这一点的实际程序：</p><p>在 <span data-keyref="GML_Visual">GML 可视化</span>中，它将如下所示：</p><p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png"></p><p>使用 <span data-keyref="GML_Code">GML 代码</span>，它将如下所示：</p><p class="code">x = x + 2;</p><p>为了理解上面所发生的事情，我们必须首先讨论<strong>变量</strong>，然后我们将继续讨论<strong>函数</strong>，最后是<strong>条件</strong>，因为这三件事通常构成任何程序的主体。</p><p>&nbsp;</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#"><span data-open-text="true" data-skip-index="true">变量</span><span data-close-text="true">变量</span></a></p><div class="droptext" data-targetname="drop_down"><p class="dropspot">变量是编程的基石，还有<strong>函数</strong>(我们稍后将简要介绍)。变量只是一个名为 <em>Value</em> 的值，在上面的例子中，变量称为 "<span class="inline">x</span>"。现在，"<span class="inline">x</span>" 可以是任何值，如 -126、583、甚至 1.56378，但 "<span class="inline">x</span>" 的实际值是不相关的，因为它可以变化 (因此称为 " 变量 ")。重要的是，我们取 "<span class="inline">x</span>" 并将其加 2。值得注意的是，在本例中 "<span class="inline">x</span>" 是一个 <strong>内置变量</strong> ，这意味着它是由 <span data-keyref="GameMaker Name">GameMaker</span> 为所有对象创建的变量，但您也可以创建自己的变量。</p><p class="dropspot">要创建变量，必须先将其<strong>声明</strong>，然后才能使用。声明一个变量就是告诉 <span data-keyref="GameMaker Name">GameMaker</span> 这个新变量存在，并且它有一个初始值。要取消变量的取值，只需执行如下操作：</p><p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png"></p><p class="dropspot">或:</p><p class="code">points = 0;</p><p class="dropspot">一旦声明了变量，就可以在进一步的编程代码或操作中使用它。变量的伟大之处在于，它允许您在多个位置 " 重用 " 一个值，而不必真正担心值是什么。例如，假设你有一个 "<span class="inline">damage</span>" 变量，你在不同的地方使用它来告诉 <span data-keyref="GameMaker Name">GameMaker</span> 对游戏中的其他物体造成一定数量的伤害。我们可能会将 "<span class="inline">damage</span>" 声明为 20，但稍后会认为这个值太大，并希望将其更改为 10。如果我们使用值 20 而不是变量，则需要遍历所有代码或操作并将 20 更改为 10，这既耗时又容易出错。然而，使用变量意味着我们只需在声明它时将<em>其</em>更改为 10，并且其余的代码或操作将使用这个新值。</p><p class="dropspot">值得注意的是，有许多不同类型的变量，每一种变量的使用方法都略有不同。我们不会在这里讨论这一点，但你可以在手册的 <a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">GameMaker 语言概述</a> 部分找到更多信息。</p><p class="dropspot">然而，变量只是故事的第一部分。下一部分是函数的使用。</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#"><span data-open-text="true" data-skip-index="true">函数</span><span data-close-text="true">函数</span></a></p><div class="droptext" data-targetname="drop_down1"><p class="dropspot">编程的下一个主要重要部分是使用<strong>函数</strong>和变量。函数只是一条指令，让计算机做一些事情，它既可以有输入值，也可以有输出值(即：你可以给它一个值，它会进行一些操作，然后返回一个不同的值)，尽管并不是所有的函数都需要输入，也不是所有的函数都有输出。为了更好地理解这一点，让我们来看看 <span data-keyref="GameMaker Name">GameMaker</span> 中的一个内置函数。</p><p class="dropspot">我们将看到的函数是 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>，它在 GML 可视化中是<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">获取实例计数</a>&nbsp;操作。此函数/操作将检索游戏室中给定对象的实例数，您可以这样使用它：</p><p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png"></p><p class="dropspot">或:</p><p class="code">number = instance_number(obj_Enemy);</p><p class="dropspot">在上述两个示例中，该函数将对象 ID 作为其输入值(<strong><a class="tooltip" title="An argument&nbsp;(also known as a parameter) is a value that is passed into a function. For example, the GameMaker Language function 'sqr(num)' is a function that will give you the square of a number that you provide as the argument, eg: 'a = sqr(4);' Here the argument is 4, and the function will return 16, which is stored in the variable 'a'.">参数</a></strong>或<strong>范围</strong>)，并将提供输出值(<strong>返回</strong>值)，这是调用函数/操作时给定对象在房间中存在的实例数。请注意，我们使用一个变量来存储返回值，即变量 "<span class="inline">number</span>"。可以在运行此代码之前声明此变量，也可以将其视为在代码运行时声明的变量，并将函数/操作的返回值分配给它。</p><p class="dropspot">值得注意的是，您不仅可以使用内置的 GameMaker 语言或 GML 可视化操作，您还可以构造自己的函数来扩展编程时可能的功能 (您可以在<a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">这里</a>可以找到更多关于 GML 的信息，<a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">这里</a>可以找到 GML 可视化的更多信息)。</p><p class="dropspot">您可以使用函数和变量做很多事情，但是，如果没有编程故事的最后一个重要部分，<strong>条件</strong>，它们将几乎毫无用处。</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#"><span data-open-text="true" data-skip-index="true">条件</span><span data-close-text="true">条件</span></a></p><div class="droptext" data-targetname="drop_down2"><p class="dropspot">编程的很大一部分是由提问组成的。这些问题通常都很简单，可以计算为 true 或 false，它们被称为 <strong>条件</strong> ( 而 <span class="inline">true</span> 和 <span class="inline">false</span> 的值被称为 <strong>布尔</strong> 值)。最常见和使用最广泛的条件是问题“<span class="inline">if</span>”，它用于检查某事是 <span class="inline">true</span> 还是 <span class="inline">false</span>，然后采取相应的行动。一个简单的例子是，如果一个角色的健康低于零，就将其从游戏中移除，这在通俗的语言中表达为：</p><p class="code">if the character variable "hp" is less than or equal to zero, then destroy it.</p><p class="dropspot">要将上述代码转换为代码，我们需要以下代码：</p><p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png"></p><p class="dropspot">或:</p><p class="code">if (hp &lt;= 0)<br>{<br><br>&nbsp; &nbsp; instance_destroy();<br><br>}</p><p class="dropspot">因此，上面我们问了 " 如果 hp 变量小于或等于 0" 的问题，然后如果计算结果为真，我们调用函数 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a> 或操作 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">销毁对象实例</a> 。注意，" <span class="inline">然后</span> "( 如果有什么.。然后发生了一些事情 ...)。是 <em>隐式的</em> ，您不需要添加它，还要注意，在 GML 代码中，当 "if<span class="inline">" 的计算结果为</span> true <em>时，我们使用大括号 { } 来 " 阻止 " 我们想要执行的代码 (在 GML 可视化中，这是通过将操作放到 "if<span class="inline">" 操作的</span></em> 右侧 <span class="inline">来表示的)。只有当 "</span>if<span class="inline">" 的计算结果为</span> true <span class="inline">时，大括号之间添加的任何内容才会运行，因此您可以在一个 " 块 " 中运行多条语句。<span class="inline"></span></span></p><p class="dropspot">在使用 "<span class="inline">if</span>" 条件时需要注意的另一件事是，我们还可以向它添加 "<span class="inline">else</span>" 语句，这样条件就会变成 " 如果某件事的计算结果为 <span class="inline">true</span> 则做一些事情，<em>else</em> 做一些不同的事情"。通过这种方式可以处理返回 <span class="inline">true</span> <em>或</em> <span class="inline">false</span> 的条件表达式。让我们也举一个例子：</p><p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png"></p><p class="dropspot">或:</p><p class="code">if (countdown &lt;= 0)<br>{<br><br>&nbsp; &nbsp; instance_create_layer(x, y, "Instances", obj_Bullet);<br><br>&nbsp; &nbsp; countdown = 30;<br><br>}<br>else<br>{<br><br>&nbsp; &nbsp; countdown = countdown - 1;<br><br>}</p><p class="dropspot">上述代码转换为纯语言，如下所示：</p><p class="code">if the countdown variable is less than or equal to zero then:<br><br>&nbsp; &nbsp; create an instance of the object "obj_Bullet" at the current x/y position on the layer "instances",<br><br>&nbsp; &nbsp; reset the countdown variable to 30.<br><br>else:<br><br>&nbsp; &nbsp; subtract one from the countdown variable.</p><p class="dropspot">不要太担心上面代码的实际实例创建部分，因为我们将在下面的小节中更详细地讨论这一点。这里需要理解的重要一点是，您可以创建条件表达式来检查某件事是 <span class="inline">true</span> 还是 <span class="inline">false</span>，并让程序以不同的方式响应。这似乎是一件非常简单的事情，但它实际上是令人难以置信的强大，并将构成您在 <span data-keyref="GameMaker Name">GameMaker</span> 编程时所做的几乎所有事情的基础。</p></div><p>&nbsp;</p><p>因此，为了回答"什么是编程？"的问题，我们可以说，<strong>编程</strong>是使用<strong>语句</strong>的组合 - 可以使用<strong><a class="tooltip" title="变量是程序中的命名值，可以在需要时对其进行修改，存储和显示。例如，如果我们有一个名为XYZ的整数变量，并且它存储的值为10，则可以执行A = XYZ + 10之类的操作，这将把变量A的值设置为20，因为XYZ为10，我们正在添加10。您还可以使用运算符更改变量值，因此XYZ = XYZ + 100会将XYZ变量的值修改为等于110。变量也可以用于存储标识符和对不同资源的引用。">变量</a></strong><span class="glossextra"></span><strong></strong> 来形成<strong><a class="tooltip" title="表达式是一个或多个常量，变量，运算符和/或函数的组合，这些常量根据特定的优先级和关联规则进行解释以返回另一个值。一个简单的表达式是（5 + 5），它返回10。">表达式</a></strong><span class="glossextra"></span>，使用<strong>函数</strong>来执行任务，使用<strong><a class="tooltip" title="条件，条件语句和条件表达式是通用编程语言的功能，它们可以帮助代码在结果为真或假的情况下做出选择。它们可以根据程序员的需要执行不同的操作，并且可以将多个条件组合为一个条件，只要条件的最终值为true或false。条件语句的示例是 if”和“ while”。">条件</a></strong><span class="glossextra"></span>来提出问题-然后同时运行这些语句来实现一个目标。下面您可以看到一个用 GML 可视化和 GML 编写的稍微复杂一点的程序。你能猜到它是做什么的吗？</p><p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png"></p><p>或:</p><p class="code">if (mouse_check_button_pressed(mb_left) == true)<br>{<br><br>&nbsp; &nbsp; x = mouse_x<br><br>&nbsp; &nbsp; y = mouse_y<br><br>&nbsp; &nbsp; image_blend = c_red;<br><br>}<br>else<br>{<br><br>&nbsp; &nbsp; if (mouse_check_button_released(mb_left) == true)<br>&nbsp; &nbsp; {<br><br>&nbsp; &nbsp; &nbsp; &nbsp; image_blend = c_white;<br><br>&nbsp; &nbsp; }<br><br>}</p><p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#"><span data-open-text="true" data-skip-index="true">剧透</span><span data-close-text="true">剧透</span></a><span class="expandtext" data-targetname="expanding">上述代码首先检查鼠标按键是否被按下(鼠标<strong>左键</strong>是使用常量"<span class="inline">mb_left</span>"定义的)，如果按下了鼠标按键，则将运行代码的实例移动到当前鼠标位置(使用内置变量"<span class="inline">mouse_x</span>"和"<span class="inline">mouse_y</span>"定义)，并将实例混合颜色设置为<strong>red</strong>。如果没有按下鼠标按键，则它会检查鼠标按键是否已被<strong>释放</strong>，如果松开了，它会将实例混合颜色重置为白色(请再次注意，我们使用一些内置的<strong>常量</strong>-"<span class="inline">c_red</span>"和"<span class="inline">c_white</span>"-来轻松定义颜色)。</span></p><p>&nbsp;</p><p>希望您现在对编程有了更多的了解，所以让我们继续探索 <span data-keyref="GameMaker Name">GameMaker</span> <a class="tooltip" title="IDE，或集成开发环境，是一个软件应用程序，为计算机程序员提供软件开发的全面设施。在这种情况下，GameMaker Studio 2的整个前端都被认为是 IDE，包括创建图形、添加声音和添加代码以制作游戏的部分。">IDE</a>，看看如何添加像<em>精灵</em>和<em>对象</em>这样的资源，以及您的游戏将需要的其他重要资源。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="../Content.htm">索引</a></div><div style="float:right">Next: <a href="Creating_Sprites.htm">创建精灵</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>