<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "..";
    gCommonRootRelPath = "..";
    gTopicId = "7.0_8";
  
//]]></script>

  <script type="text/javascript" src="../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Guide To Using Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css">
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page that explains how to set up and use shaders">
  <meta name="rh-index-keywords" content="Guide To Using Shaders">
  <meta name="search-keywords" content="shaders,shader,use shaders,shader guide,shader setup,shader examples,shader example">
<meta name="brsnext" value="Additional_Information/Guide_To_Primitives_And_Vertex_Building.htm"><meta name="brsprev" value="Additional_Information/Guide_To_Using_Particles.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Guide To Using Shaders">
        <span>Guide To Using Shaders</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>着色器使用指南</h1>
  <p>着色器通常用于在游戏中创造漂亮的图像效果。它们也是<span data-keyref="GameMaker Name">GameMaker</span>提供的最高级功能之一，所以在开始使用它们之前，有必要对编程以及<span data-keyref="GameMaker Name">GameMaker</span>的工作原理有一个基本的了解。</p>
  <p>最初，它们被创造出来是为了给照明提供阴影(因此得名)，但现在它们被用来产生各种各样的效果。Shader代码类似于常规代码，但它(几乎总是)由GPU而不是CPU执行。这种差异有它自己的一组规则和限制，但我们将在后面讨论这些。</p>
  <p>每个着色器都由两个独立的组件组成:<strong>顶点着色器</strong>和<strong>片段着色器</strong>(也称为<strong>像素着色器</strong>)。让我们从顶点着色器开始。每个精灵都由一个矩形组成，但计算机喜欢绘制三角形，所以这些矩形被分成两个三角形(有时称为<em>quad</em>)。这样每个精灵就有6个顶点(角)，但其中有两个是相同的，所以我们只需要关心4个。现在，假设我们有一个for循环，它遍历每个顶点并为每个顶点着色器执行内部的代码。这允许我们在将顶点位置和颜色传递给片段着色器之前更改它，因为顶点着色器会在更早的时候执行。</p>
  <p>看起来是这样的:</p>
  <p><img alt="Shader Vertices" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Vertices.gif">对于片段着色器，你可以想象与之前相同的循环，但这一次它会遍历你的精灵中的每一个像素，为你提供像素的位置和颜色等信息。在片段着色器代码中，您可以执行操作和计算来确定像素的颜色，以获得您想要的效果。例如，如果你想要一个着色器将你的精灵变成黑色和白色，那么你就需要计算每个像素所需要的灰色阴影来创建效果。</p>
  <p>它看起来像这样:</p>
  <p><img alt="Shader Fragments" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Fragments.gif">着色器代码通常由GPU执行的原因是它在这方面效率更高。现代的cpu通常有2到8个核。每个核心一次可以执行一个任务，所以通过利用多个核心，我们可以同时执行这么多任务。相比之下，现代gpu可以同时执行数千甚至数万个任务。这对着色器很有帮助，因为我们可以同时执行数千像素的着色器代码。限制在于我们只能访问精灵的初始状态，所以我们不知道对其他像素所做的任何修改，因为我们不能确定代码是否在它们上运行。</p>
  <p class="note"><strong>注意</strong>:<span data-keyref="GameMaker Name">GameMaker</span>允许用户使用<strong>GLSL</strong> (OpenGL Shader语言)、<strong>HLSL</strong>(高级Shader语言，在使用DirectX时使用)和<strong>GLSL ES</strong> (GLSL的一个子集，在移动设备中很常见)编写着色器。这里我们使用&nbsp;<strong>GLSL ES</strong>作为着色器语言，因为它是一个跨目标平台提供最佳兼容性的语言。一般来说，除非你有非常特殊的需求，并且了解其他着色器语言的局限性，否则这是你总是想要使用的。这三种语言之间的数学和技术应该是相似的，除了一些语法差异。</p>
  <p>顶点着色器首先被执行，正如我们上面解释的，它处理<strong>顶点</strong>。它用于计算位置、法线和纹理坐标。这些着色器在2D中并不是特别有用，因为每个精灵通常都是一个正方形，但它可以用来做一些倾斜，缩放等……它在3D中对照明计算和网格变形更加有用。片段着色器更有趣，也是我们将在这里讨论的主要内容，因为片段着色器是我们获取纹理信息的地方，可以调整图像中每个像素的最终颜色。</p>
  <p>&nbsp;</p>
  <h2>着色器变量</h2>
  <p>如果您已经在<span data-keyref="GameMaker Name"> GameMaker </span>中创建了一个着色器，那么您可能已经在默认的<strong>直通</strong>着色器中注意到了以下关键字。这些关键字帮助着色器理解每个变量的用途和范围:</p>
  <ul class="colour">
    <li><strong>Attribute 属性</strong> : 这些是 OpenGL 传递给<strong>顶点</strong>着色器的变量。它们可以改变每个顶点，并且是只读的。这些信息包括顶点位置、纹理坐标、顶点颜色和顶点法线。</li>
    <li><strong>Varying 变量</strong> : 这些变量用于在<strong>顶点</strong>和<strong>片段</strong>着色器之间传递数据。它们可以在顶点着色器中写入，但是在片段着色器中是只读的。</li>
    <li><strong>Uniform 统一</strong>: 这些变量会根据对象而变化，并由用户传递给着色器。 这些可以在顶点和片段着色器中使用，但是是只读的。</li>
  </ul>
  <p>您还会看到使用 <strong>vec</strong> 作为关键字。 这用于识别着色器中的向量变量，您很快就会发现向量在使用着色器时非常重要。 这就是它们在 GLSL 中作为基本类型实现的原因。 如果您不熟悉它们，它们是一个数学术语，表示为只有一列的矩阵。 在编程中，我们通常将它们表示为一个数组，其中组件的数量对应于维度。 二维和三维向量通常用于没有 alpha 通道的位置、纹理坐标或颜色，而四维向量用于具有 alpha 通道的颜色。 我们还可以指定它们是否包含布尔值、整数或浮点值。 声明向量的语法是这样的：</p>
  <p class="code">vec2 firstVec; &nbsp;// Two-dimensional vector of floats<br>
    vec3 secondVec; // Three-dimensional vector of floats<br>
    vec4 thirdVec; &nbsp;// Four-dimensional vector of floats<br>
    <br>
    bvec3 boolVec; &nbsp;// Three-dimensional vector of booleans<br>
    ivec4 intVec; &nbsp; // Four-dimensional vector of integers
  </p>
  <p>为了初始化它们，我们可以使用构造函数来创建向量。您需要提供与向量长度相同数量的值，但是您可以混合和匹配标量和更小的向量以达到目标长度。以下是一些例子:</p>
  <p class="code">// Simple 2D vector with 2 scalar values<br>
    vec2 firstVec &nbsp;= vec2(2.0, 1.0);<br>
    // A 4D vector using 2 scalars and a vec2 create the 4 values<br>
    vec4 secondVec = vec4(1.0, firstVec, 0.0);<br>
    // A 3D vector using 1 component of a vec4 plus a vec2 to create the 3 values<br>
    vec3 thirdVec &nbsp;= vec3(secondVec.x, firstVec);</p>
  <p>我们也可以给它们指定另一个相同长度的向量(或者<em>旋转</em>这个向量直到它有合适的长度，但是我们稍后会解释) :</p>
  <p class="code">vec3 firstVec;<br>
    vec3 secondVec = firstVec;<br>
    vec4 thirdVec &nbsp;= secondVec.xyz;<br>
    vec2 fourthVec = thirdVec.zx;</p>
  <p>在访问GLSL中的向量组件时，我们有几个选项。最基本的一个是将vector作为数组，并使用方括号访问组件，像这样:</p>
  <p class="code">vec4 myVec;<br>
    myVec[0] = 1.0;<br>
    myVec[1] = 0.0;<br>
    myVec[2] = 2.0;<br>
    myVec[3] = 1.0;</p>
  <p>但是，还有另一种方法可以使用以下语法访问组件:</p>
  <p class="code">vec4 myVec;<br>
    myVec.x = 1.0;<br>
    myVec.y = 2.0;</p>
  <p>这将使用向量内的组件名称来访问它们。您可以使用x、y、z或w分别得到第一、第二、第三或第四个分量。我们把这个方法称为<strong>swizzling</strong>，因为下面的语法也是有效的:</p>
  <p class="code">vec4 firstVec;<br>
    vec3 secondVec = firstVec.xyz;<br>
    vec2 thirdVec &nbsp;= secondVec.zy;<br>
    vec4 fourthVec = thirdVec.yxxy;</p>
  <p>正如你所看到的，我们可以使用最多四个字母的任意组合来创建这个长度的向量。我们不能尝试访问超出界限的组件(例如，尝试访问<span class="inline"> 二维 Vec </span>或<span class="inline"> 三维 Vec </span>中的 w，因为它们没有第四个分量)。此外，我们可以重复使用字母，并以任何顺序使用它们，只要向量变量被赋值的大小与使用的字母数量相同。</p>
  <p>出于显而易见的原因，在使用 swizzle 设置组件值时，不能两次使用同一个组件。例如，下面的内容是无效的，因为您试图将同一个组件设置为两个不同的值:</p>
  <p class="code">myVec.xx = vec2(2.0, 3.0);</p>
  <p>最后，我们可使用<span class="inline">xyzw</span>作为我们的混合蒙版，这通常是在处理位置时的情况。你还可以使用另外两组蒙版:<span class="inline">rgba</span>(用于颜色)或<span class="inline">stpq</span>(用于纹理坐标)。在内部，这些蒙版之间没有区别，我们使用它们只是为了使代码更清楚地知道向量在该实例中表示什么。此外，我们不能在同一个操作中合并混合蒙版，所以这是无效的:</p>
  <p class="code"><span class="inline"></span>myVec = otherVec.ybp;</p>
  <p>这些都是很多的定义和信息，但知道这些事情是必要的理解着色器本身。</p>
  <p>&nbsp;</p>
  <h2>创建着色器</h2>
  <p>当您在 <span data-keyref="GameMaker Name">GameMaker</span> 中创建着色器时，它会为您打开两个文件：顶点着色器 (<span class="inline">.vsh</span>) 和片段着色器 (<span class="inline">.fsh</span>)。 这是您可以制作的最基本的着色器，它获取精灵、读取纹理并使用该颜色为每个像素着色。 如果在绘制时指定顶点颜色，这些颜色将与纹理混合。</p>
  <p>让我们浏览一下新创建的着色器资源的代码并分析它，从顶点着色器开始。</p>
  <p class="code">// Passthrough Vertex Shader<br>
    attribute vec3 in_Position; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// (x,y,z)<br>
    //attribute vec3 in_Normal; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// (x,y,z) &nbsp; &nbsp; unused in this shader.<br>
    attribute vec4 in_Colour; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// (r,g,b,a)<br>
    attribute vec2 in_TextureCoord; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// (u,v)<br>
    <br>
    varying vec2 v_vTexcoord;<br>
    varying vec4 v_vColour;<br>
    <br>
    void main()<br>
    {<br>
    &nbsp; &nbsp; vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);<br>
    &nbsp; &nbsp; gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;<br>
    &nbsp; &nbsp;&nbsp;<br>
    &nbsp; &nbsp; v_vColour = in_Colour;<br>
    &nbsp; &nbsp; v_vTexcoord = in_TextureCoord;<br>
    }
  </p>
  <p>在主函数之外，我们看到一些变量声明及其限定符。 这些属性由 GameMaker 提供给我们。 不同的是由用户创建的，以将该信息传递给片段着色器。 在 main 函数中，我们进行计算以找到顶点的屏幕位置：</p>
  <ul class="colour">
    <li>首先，我们创建一个 <span class="inline">vec4</span> 并使用位置的向量对其进行初始化，添加一个作为第四个向量。 在线性代数中，惯例是如果向量表示一个点，我们在第四个分量上加一个 1，如果它表示一个实际向量，则在第四个分量上加一个零。</li>
    <li>接下来，我们需要添加这第四个分量以将其与 <span class="inline">MATRIX_WORLD_VIEW_PROJECTION</span> 矩阵相乘，后者是一个 4x4 矩阵。 此乘法会将顶点的世界位置投影到屏幕坐标中。</li>
    <li>最后，我们通过 varying 变量将顶点颜色和纹理坐标传递给片段着色器。</li>
  </ul>
  <p>如果您不打算使用顶点位置，则应单独放置此着色器，并且不会在下面给出的任何示例中使用它，因为显示的所有效果都将使用片段着色器创建。</p>
  <p>现在让我们快速浏览一下片段着色器:</p>
  <p class="code">// Passthrough Fragment Shader<br>
    varying vec2 v_vTexcoord;<br>
    varying vec4 v_vColour;<br>
    <br>
    void main()<br>
    {<br>
    &nbsp; &nbsp; gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );<br>
    }
  </p>
  <p>如前所述，片段着色器背后的想法是返回当前像素的颜色。 这是通过为变量 <span class="inline">gl_FragColor</span> 分配最终颜色值来完成的。 <span class="inline">texture2D</span> 函数采用一个纹理和一个 <span class="inline">vec2</span>，其中包含您要在该纹理中检查的 UV 坐标，它返回一个带有颜色的 <span class="inline">vec4</span>。 在 直通着色器 中，我们所做的就是获取该像素坐标中的纹理颜色，并将其乘以与该像素关联的顶点的颜色。</p>
  <p>现在我们已经有了第一个着色器，我们要做的就是测试它创建一个对象并分配一个精灵，然后在对象的<strong>画事件</strong>中像这样设置着色器:</p>
  <p class="code">// Draw Event<br>
    shader_set(shdrColorOverlay);<br>
    draw_self();<br>
    shader_reset();</p>
  <p>我们在 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set.htm"><span class="inline">shader_set()</span></a>&nbsp;和 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_reset.htm"><span class="inline">shader_reset()</span></a>&nbsp;之间进行的每个绘制调用都会应用着色器。 在这里，我们使用直通着色器绘制对象精灵：</p>
  <p><img alt="Drawing Sprite Using Passthough Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_PassThrough.gif">您可能已经猜到了，这不会在视觉上改变任何东西，因为这是一个简单的直通着色器。 然而，以下部分概述了一些简单的步骤，您可以采取这些步骤来修改它并更改绘制精灵的方式。 每个部分都展示了一个不同的着色器，您可以在项目中创建和使用它们，解释创建它们所需的步骤以及我们为什么按照我们的方式做事。</p>
  <p>&nbsp;</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">颜色叠加着色器</span><span data-close-text="true">颜色叠加着色器</span></a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">我们现在可以编辑基础着色器来做一些不同的事情。我们将不接触顶点着色器部分，只编辑片段着色器，开始时我们将执行一个非常简单的操作，即让着色器使用红色绘制精灵。我们将通过简单地将<span class="inline">gl_FragColor</span>更改为红色来做到这一点。，像这样:</p>
    <p class="code">// Color Overlay Fragment Shader<br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);<br>
      }</p>
    <p class="dropspot">这将给我们带来以下结果:</p>
    <p class="dropspot"><img alt="Initial Colour Overlay Block" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_ColourOverlay_Block.gif">我们需要记住的是，每个精灵最终都是一个矩形，所以除非我们考虑透明度 -我们还没有考虑 -这是我们将得到的结果。</p>
    <p class="note"><strong>注意</strong>: 在上图中，矩形的大小发生了变化，因为当基本精灵被GameMaker放在纹理页面上时，它周围的“空”空间被自动裁剪了，所以组成它的每个动画帧的三角形是不同的大小，以适应帧的裁剪大小。如果你禁用了这个选项，那么你只会在屏幕上看到一个静止的红色方块。</p>
    <p class="dropspot">上面我们提到了 <span class="inline">texture2D</span> 函数，我们将使用它来获取我们正在处理的像素的颜色并从中获取透明度。 <span class="inline">texture2D</span> 的返回值是一个 <span class="inline">vec4</span>，其中组件按顺序为红色、绿色、蓝色和 透明度。 我们可以通过在变量名称后放置一个句点后跟 <span class="inline">a</span> 或 <span class="inline">w</span> 来访问 alpha 通道。 这分别对应于 RGBA 和 XYZW。</p>
    <p class="dropspot">这是更新后的代码:</p>
    <p class="code">// Color Overlay Fragment Shader<br>
      varying vec2 v_vTexcoord;<br>
      <br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br>
      &nbsp; &nbsp; gl_FragColor = vec4(1.0, 0.0, 0.0, texColor.a);<br>
      }
    </p>
    <p class="dropspot">我们现在将新的 <span class="inline">vec4</span> 分配给 <span class="inline">gl_FragColor</span>，其中红色通道最大化，绿色和蓝色通道为零，Alpha 通道与原始纹理相同。 输出如下所示：</p>
    <p class="dropspot"><img alt="Overlay Shader Making Sprite Red" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_ColourOverlay.gif">这才是我们想要的！我们已经用红色替换了每个像素的颜色，但是仍然保持了 alpha 通道的完整性。</p>
    <p class="dropspot">每次我们想使用不同的颜色时都必须更改着色器不是一个好主意，特别是因为我们需要为我们想要的每种颜色都有一个单独的着色器。 相反，我们将使用<strong>uniform </strong>将颜色信息传递给着色器。 为此，我们首先需要获取指向uniform的<strong>指针</strong>。 我们将在具有精灵的对象的 <strong> 创建事件 </strong> 中执行此操作，方法是添加：</p>
    <p class="code">// Create Event<br>
      _uniColor = shader_get_uniform(shdrColorOverlay, "u_colour");<br>
      _color&nbsp; &nbsp; = [1.0, 1.0, 0.0, 1.0];</p>
    <p class="dropspot">我们需要做的就是调用 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a> 获取指向 uniform 的指针。 我们需要传递的参数是着色器资源名称（没有引号，因为我们想传递 GameMaker 为我们生成的 ID）和着色器内部统一变量的名称，这次是一个字符串。 此名称需要与着色器代码中的名称完全匹配才能正常工作。 我们还添加了一个颜色变量，以便我们可以在运行时更改它并让它记住我们的更改。</p>
    <p class="dropspot">现在，在我们的绘制事件中的代码将稍微改变以传递uniform变量。</p>
    <p class="code">// Draw Event<br>
      shader_set(shdrColorOverlay);<br>
      shader_set_uniform_f_array(_uniColor, _color);<br>
      draw_self();<br>
      shader_reset();</p>
    <p class="dropspot">它和之前的代码相同，但是在我们绘制任何东西之前，我们需要将所有的uniform值传递给着色器。在本例中，我们将颜色作为浮点数组传递。至于着色器，我们将改变它包括uniform和使用它，所以它成为:</p>
    <p class="code">// Color Overlay Fragment Shader<br>
      varying vec2 v_vTexcoord;<br>
      uniform vec4 u_colour;<br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br>
      &nbsp; &nbsp; gl_FragColor = vec4(u_colour.rgb, texColor.a);<br>
      }</p>
    <p class="dropspot">我们声明一个与创建着色器 (<span class="inline">u_colour</span>) 中同名的变量，并将其作为 <span class="inline">gl_FragColor</span> 向量的前三个组件传递，利用方法混写。如果我们再次编译，我们应该看到以下内容：</p>
    <p class="dropspot"><img alt="Overlay Shader Making Sprite Yellow" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_ColourOverlay_Yellow.gif">现在，着色器变得更加有用和可重用。 如果您需要在运行时设置颜色（使用变量 <span class="inline">_color</span>），您可以添加更多功能。</p>
    <p>&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">黑白着色器</span><span data-close-text="true">黑白着色器</span></a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">制作黑白着色器是了解更多有关着色器工作原理的好方法，许多初学者都是从尝试这样做开始的，因为从概念上讲它非常简单：获取每个像素并为其分配一个灰色阴影。 但这简单吗？ 不完全的...</p>
    <p class="dropspot">当使用 RGB 颜色时，如果所有三个分量都具有相同的值，那么我们会得到灰色调。 使用此想法创建着色器的天真的方法是添加所有三个颜色通道（红色、绿色和蓝色），然后将其除以三。 之后，您将值分配给所有三个通道，从而创建灰色调。 这是片段着色器的样子：</p>
    <p class="code">// Black and white fragment shader<br>
      varying vec2 v_vTexcoord;<br>
      varying vec4 v_vColour;<br>
      <br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br>
      &nbsp; &nbsp; float gray = (texColor.r + texColor.g + texColor.b) / 3.0;<br>
      &nbsp; &nbsp; gl_FragColor = v_vColour * vec4(gray, gray, gray, texColor.a);<br>
      }
    </p>
    <p class="dropspot">您可能已经注意到，在 <span class="inline">gl_FragColor</span> 代码中，我们将 <span class="inline">vec4</span> 与称为 <span class="inline">v_vColour</span> 的东西相乘。 这是一个由顶点着色器传递的变量，它告诉我们与该像素相关联的顶点的颜色。 将最终计算出的颜色与顶点颜色相乘总是一个好主意。 在大多数情况下，它不会执行任何操作，但如果您在 GML 中更改了顶点颜色，这将反映出来（通过使用 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_ext.htm"><span class="inline">draw_sprite_ext()</span></a> 或 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_general.htm"><span class="inline">draw_sprite_general()</span></a> 等函数更改<a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_blend.htm"><span class="inline">image_blend</span></a>)。</p>
    <p class="dropspot">至于绘制事件，它很简单，因为我们没有要传入的 uniform ：</p>
    <p class="code">// Draw Event<br>
      shader_set(shdrBlackAndWhite);<br>
      draw_self();<br>
      shader_reset();</p>
    <p class="dropspot">我们来编译一下，看看有什么发现。</p>
    <p class="dropspot"><img alt="Black And White Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_BlackAndWhite.gif">这看起来已经很棒了，对吧?有一个更“正确”的解决方案，因为我们不是将组件相加并除以3，而是将每个组件乘以黑白的标准NTSC值。下面是修改后的片段着色器代码:</p>
    <p class="code">// Black and white fragment shader<br>
      varying vec2 v_vTexcoord;<br>
      <br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br>
      &nbsp; &nbsp; float gray = dot(texColor.rgb, vec3(0.299, 0.587, 0.114));<br>
      &nbsp; &nbsp; gl_FragColor = vec4(gray, gray, gray, texColor.a);<br>
      }
    </p>
    <p class="dropspot">我们使用点积作为缩写，将<span class="inline">texColor</span>的每个组件与正确的权重相乘，然后将它们相加。如果你对点积不熟悉，这就是它的本质:</p>
    <p class="code">float gray = (texColor.r * 0.299) + (texColor.g * 0.587) + (texColor.b * 0.114);</p>
    <p class="dropspot">最后，它看起来非常相似，但在技术上更正确。</p>
    <p class="dropspot"><img alt="Corrected Black And White Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_BlackAndWhite_Improved.gif"></p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">彩虹着色器</span><span data-close-text="true">彩虹着色器</span></a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">我们的最后一个着色器例子是一个有趣的例子，可以用来为文本、按钮和其他东西添加生命。我们将从简单开始，逐渐添加功能，因为这个着色器是高度可定制的。这里有很多内容要介绍，所以如果你觉得有点迷路或困惑，请返回并重新阅读上面的部分。</p>
    <p class="dropspot">我们要做的第一件事是根据像素的水平位置，用每种色调给像素上色。方法是将x位置设置为色相，然后将HSV(色相、饱和度、亮度)格式转换为RGB(红、绿、蓝)格式。为此，我们需要在片段着色器中编写一个辅助函数，它接受HSV值并返回一个RGB向量。我们将使用一个单独的函数来完成这个任务，而不需要任何<span class="inline">if</span>&nbsp;语句，因为在着色器代码中使用条件会使着色器<em>非常</em>慢，应该避免。</p>
    <p class="dropspot">下面是着色器在这个阶段的样子:</p>
    <p class="code">// Fragment Shader<br>
      varying vec2 v_vTexcoord;<br>
      varying vec4 v_vColour;<br>
      <br>
      vec3 hsv2rgb(vec3 c)&nbsp;<br>
      {<br>
      &nbsp; &nbsp; vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br>
      &nbsp; &nbsp; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br>
      &nbsp; &nbsp; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br>
      }<br>
      <br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; vec3 col = vec3(v_vTexcoord.x, 1.0, 1.0);<br>
      &nbsp; &nbsp; float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br>
      &nbsp; &nbsp; gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br>
      }
    </p>
    <p class="dropspot">这里的内容比前面的示例要多一些，但大部分内容现在应该已经相当明显了。首先，是我们的<span class="inline">hsv2rgb</span>函数，它接受带有HSV颜色的<span class="inline">vec3</span>，并使用RGB转换返回另一个<span class="inline">vec3</span>。在主函数中，我们从创建HSV颜色开始，其中色调是我们的x位置，我们现在将饱和度和亮度保留为1.0。然后，我们从纹理中获得alpha，所以它只给我们的精灵角色着色，而不是整个精灵矩形(就像我们在上面的颜色覆盖例子中所做的那样)。最后，我们设置我们的片段颜色为我们的HSV颜色转换为带有alpha的RGB颜色，乘以顶点颜色(总是这样做的好做法)。</p>
    <p class="dropspot">至于我们的绘制代码，目前它是微不足道的:</p>
    <p class="code">// Draw Event<br>
      shader_set(shdrRainbow);<br>
      draw_self();<br>
      shader_reset();</p>
    <p class="dropspot">让我们看看我们得到了什么:</p>
    <p class="dropspot"><img alt="Initial Rainbow Shader" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Overlay.gif">我们已经接近我们想要的效果，但存在一个问题：我们没有在动画的每一帧中同时看到所有颜色，而且颜色似乎随机变化。 原因是我们假设 <span class="inline">v_vTexcoord</span> 为我们提供了精灵的坐标，从左上角 (0,0) 开始到右下角 (1,1) 结束，这在着色器中是标准的 . 然而，为了优化，GameMaker 将尽可能多的纹理填充在一起，以适应所谓的<a href="../Settings/Texture_Information/Texture_Pages.htm">纹理页面</a>&nbsp;正因为如此，这就是我们纹理的实际外观：</p>
    <p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Texture.png">如上所述，<span class="inline">v_vTexcoord</span> 为我们提供了精灵在整个纹理页面中的绝对坐标，但我们想要的是一个介于 0.0 到 1.0 之间的值，它只覆盖我们当前的精灵。 此过程称为<strong>规一化</strong>（获取一个值并将其转换为 0 到 1 的范围）。 为了规一化我们的水平值，我们需要知道上图中 x0 和 x1 的值。 幸运的是，GameMaker 有一个函数可以为我们提供纹理页面中精灵中每个角的位置。 首先，我们需要转到 创建事件 并创建一个 uniform 以将此数据传递给着色器：</p>
    <p class="code">// Create Event<br>
      _uniUV = shader_get_uniform(shdrRainbow, "u_uv");</p>
    <p class="dropspot">我们修改绘制事件来获取值，然后将它们传递给着色器:</p>
    <p class="code">// Draw Event<br>
      shader_set(shdrRainbow);<br>
      var uv = sprite_get_uvs(sprite_index, image_index);<br>
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br>
      draw_self();<br>
      shader_reset();</p>
    <p class="dropspot">函数<a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a>&nbsp;接受一个精灵和一个索引，它返回一个包含大量信息的数组，例如每个角落的坐标，为优化它裁剪了多少像素，等等。我们对其中的两个值感兴趣:精灵的左右坐标，它们分别存储在<span class="inline">uv[0]</span>和<span class="inline">uv[2]</span>中。在片段着色器中，我们将使用这些值来计算归一化水平位置，如下所示:</p>
    <p class="code">// Fragment Shader<br>
      varying vec2 v_vTexcoord;<br>
      varying vec4 v_vColour;<br>
      <br>
      uniform vec2 u_uv;<br>
      <br>
      vec3 hsv2rgb(vec3 c)&nbsp;<br>
      {<br>
      &nbsp; &nbsp; vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br>
      &nbsp; &nbsp; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br>
      &nbsp; &nbsp; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br>
      }<br>
      <br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br>
      &nbsp; &nbsp; vec3 col = vec3(pos, 1.0, 1.0);<br>
      &nbsp; &nbsp; float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br>
      &nbsp; &nbsp; gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br>
      }
    </p>
    <p class="dropspot">这里，我们在文件顶部添加了与创建事件中使用的名称相同的uniform变量。接下来，通过将当前<span class="inline">x</span>坐标转换为原点(<span class="inline">v_vTexcoord.x - u_uv[0]</span>)计算归一化的水平位置，然后我们用它除以精灵的宽度，使范围从0到1 (<span class="inline">u_uv[] - u_uv[]</span>)。</p>
    <p class="dropspot">结果是:</p>
    <p class="dropspot"><img alt="Rainbow Overlay Shader Improved" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Overlay_Improved.gif">我们开始了！ 这正是我们想要的。 我们可以在精灵中看到光谱的每种颜色。</p>
    <p class="dropspot">您可能对此感到满意，但我们可以使用此着色器获得更多乐趣。 如果我们根据时间为颜色添加偏移量以产生运动会怎么样？ 为此，我们需要两个额外的变量，分别用于<strong>速度</strong>和<strong>时间</strong>。 我们还需要两个uniform，每个新变量一个，所以 创建事件 变成：</p>
    <p class="code">// Create Event<br>
      _uniUV &nbsp; &nbsp;= shader_get_uniform(shdrRainbow, "u_uv");<br>
      _uniTime &nbsp;= shader_get_uniform(shdrRainbow, "u_time");<br>
      _uniSpeed = shader_get_uniform(shdrRainbow, "u_speed");<br>
      _time &nbsp;= 0;<br>
      _speed = 1.0;</p>
    <p class="dropspot">我们还需要每帧增加时间，所以在步事件中我们添加:</p>
    <p class="code">// Step Event<br>
      _time += 1 / room_speed;</p>
    <p class="dropspot">我们现在去绘制事件把这些uniform送到着色器:</p>
    <p class="code">// Draw Event<br>
      shader_set(shdrRainbow);<br>
      var uv = sprite_get_uvs(sprite_index, image_index);<br>
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br>
      shader_set_uniform_f(_uniSpeed, _speed);<br>
      shader_set_uniform_f(_uniTime, _time);<br>
      draw_self();<br>
      shader_reset();</p>
    <p class="dropspot">最后，我们将回到我们的着色器来实际使用这些变量。我们要做的是将速度与时间相乘，并将其与位置相加，就像这样:</p>
    <p class="code">// Fragment Shader<br>
      varying vec2 v_vTexcoord;<br>
      varying vec4 v_vColour;<br>
      <br>
      uniform vec2 u_uv;<br>
      uniform float u_speed;<br>
      uniform float u_time;<br>
      <br>
      vec3 hsv2rgb(vec3 c)&nbsp;<br>
      {<br>
      &nbsp; &nbsp; vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br>
      &nbsp; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br>
      &nbsp; &nbsp; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br>
      }<br>
      <br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br>
      &nbsp; &nbsp; vec3 col = vec3((u_time * u_speed) + pos, 1.0, 1.0);<br>
      &nbsp; &nbsp; float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br>
      &nbsp; &nbsp; gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br>
      }
    </p>
    <p class="dropspot">如果你做的一切都正确，你应该会看到如下内容:</p>
    <p class="dropspot"><img alt="Rainbow Shader Overlay Moving With Time" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Overlay_Final.gif">为了完成这个着色器，我们将添加更多的uniform来进一步定制它。前两个是控制饱和度和亮度。下一个我们称之为section，它的功能是允许用户传递一个0到1之间的数字，以确定我们一次看到的整个光谱的百分比。最后，我们将添加一个名为“mix”的变量，它将指定我们想将着色器颜色与原始纹理颜色混合的程度(1.0是全部彩虹颜色，0.0是全部纹理颜色)。和往常一样，让我们从添加变量到创建事件开始:</p>
    <p class="code">// Create Event<br>
      _uniUV &nbsp; &nbsp; &nbsp; &nbsp; = shader_get_uniform(shdrRainbow, "u_uv");<br>
      _uniTime &nbsp; &nbsp; &nbsp; = shader_get_uniform(shdrRainbow, "u_time");<br>
      _uniSpeed &nbsp; &nbsp; &nbsp;= shader_get_uniform(shdrRainbow, "u_speed");<br>
      _uniSection &nbsp; &nbsp;= shader_get_uniform(shdrRainbow, "u_section");<br>
      _uniSaturation = shader_get_uniform(shdrRainbow, "u_saturation");&nbsp;<br>
      _uniBrightness = shader_get_uniform(shdrRainbow, "u_brightness");<br>
      _uniMix &nbsp; &nbsp; &nbsp; &nbsp;= shader_get_uniform(shdrRainbow, "u_mix");<br>
      <br>
      _time &nbsp;= 0;<br>
      _speed = 1.0;<br>
      _section = 0.5;<br>
      _saturation = 0.7;<br>
      _brightness = 0.8;<br>
      _mix = 0.5;
    </p>
    <p class="dropspot">我们的绘制事件更改为包括这些uniform，如下所示：</p>
    <p class="code">// Draw Event<br>
      shader_set(shdrRainbow);<br>
      var uv = sprite_get_uvs(sprite_index, image_index);<br>
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br>
      shader_set_uniform_f(_uniSpeed, _speed);<br>
      shader_set_uniform_f(_uniTime, _time);<br>
      shader_set_uniform_f(_uniSaturation, _saturation);<br>
      shader_set_uniform_f(_uniBrightness, _brightness);<br>
      shader_set_uniform_f(_uniSection, _section);<br>
      shader_set_uniform_f(_uniMix, _mix);<br>
      draw_self();<br>
      shader_reset();</p>
    <p class="dropspot">至于着色器，我们需要将饱和度和亮度传递给颜色，这将影响我们的辅助函数生成的颜色。section需要乘以我们的位置来缩小范围。我们还将获取整个纹理颜色，所以我们可以通过混合纹理颜色和我们的颜色的RGB转换来计算我们的最终颜色。mix函数的最后一个参数决定了我们想要添加多少第二个颜色。这是我们最终的着色器代码:</p>
    <p class="code">// Fragment Shader<br>
      varying vec2 v_vTexcoord;<br>
      varying vec4 v_vColour;<br>
      <br>
      uniform vec2 u_uv;<br>
      uniform float u_speed;<br>
      uniform float u_time;<br>
      uniform float u_saturation;<br>
      uniform float u_brightness;<br>
      uniform float u_section;<br>
      Uniform float u_mix;<br>
      <br>
      vec3 hsv2rgb(vec3 c)&nbsp;<br>
      {<br>
      &nbsp; &nbsp; vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br>
      &nbsp; &nbsp; vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br>
      &nbsp; &nbsp; return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br>
      }<br>
      <br>
      void main()<br>
      {<br>
      &nbsp; &nbsp; float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br>
      &nbsp; &nbsp; vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br>
      &nbsp; &nbsp;&nbsp;<br>
      &nbsp; &nbsp; vec3 col = vec3(u_section * ((u_time * u_speed) + pos), u_saturation, u_brightness);<br>
      &nbsp; vec4 finalCol = mix(texColor, vec4(hsv2rgb(col), texColor.a), u_mix);<br>
      &nbsp; &nbsp;&nbsp;<br>
      &nbsp; &nbsp; gl_FragColor = v_vColour * finalCol;<br>
      }
    </p>
    <p class="dropspot">我们的最终结果是这样的！</p>
    <p class="dropspot"><img alt="Rainbow Shader Final" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Rainbow_Final.gif"></p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p>&nbsp;</p>
  <p>以上就是本简短指南的全部内容，现在你应该对着色器的工作原理以及它们的一些用途有了更好的理解。你应该花时间来玩你已经按照本指南创建的着色器，并尝试用它们做其他的事情-如何创建一个模糊着色器，或一个着色器，使一个游戏机风格的单色屏幕? -因为着色器是一个非常强大的工具，可以为你的游戏添加视觉复杂性和风格。</p>
  <p class="note">我们要感谢 <a href="https://twitter.com/AleHitti">Alejandro Hitti</a> 和<strong>Amazon</strong>允许我们复制本指南。您可以在 <a href="https://developer.amazon.com/es/blogs/appstore/post/acefafad-29ba-4f31-8dae-00805fda3f58/intro-to-shaders-and-surfaces-with-gamemaker-studio-2">Amazon开发者博客</a>上找到原始版本。</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">额外的信息</a></div>
        <div style="float:right">Next:&nbsp;<a href="Guide_To_Primitives_And_Vertex_Building.htm">图元和顶点构建指南</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
Using Shaders
Shader Guide
Guide To Using Shaders
-->
  <!-- TAGS
using_shaders
-->

</body></html>