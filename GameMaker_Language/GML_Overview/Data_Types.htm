<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../..";
    gCommonRootRelPath = "../..";
    gTopicId = "8.2.1.1_1";
  
//]]></script>

  <script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Data Types</title>
  <meta name="generator" content="Adobe RoboHelp 2020">
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css">
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining Data Types">
  <meta name="rh-index-keywords" content="Data Types">
  <meta name="search-keywords" content="Data Types">
<meta name="brsnext" value="GameMaker_Language/GML_Overview/Language_Features/If_Else_and_Conditional_Operators.htm"><meta name="brsprev" value="GameMaker_Language/GML_Overview/Variables/Constants.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Data Types">
        <span>Data Types</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>数据类型</h1>
  <p>在前面的章节中，我们介绍了<a href="Variables_And_Variable_Scope.htm">变量及其范围规则</a>，但对于变量可以存储的不同<b>数据类型</b>却鲜有说明。因此，本节将说明不同的类型以及它们可用于哪些目的。</p>
  <p>在继续之前，我们先简单解释一下"数据类型"是什么意思。创建变量时，它可用于保存信息，调用函数时，它还可以存储返回的信息。但是，此信息可以有多种"风格"-例如，它可以是<em>实数</em>或者可以是<em>字符串</em>。使用的这些不同类型的值称为<b>数据类型</b>，当使用GameMaker语言时，它们可以是以下任意值：</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">Real Numbers</span><span data-close-text="true">Real Numbers</span> 实数</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">实数是任何不是字符串，也不是任何其他可能的数据类型的值。因此，124, 45639.566546456,0,-45.5等...都是实数的例子。所有实数都存储为64位双精度浮点值(或整数值)，编译器将在可能的情况下进行优化(例如，0.0将被优化为0的整数值)。</p>
    <p class="dropspot">处理任何非整数值时，由于浮点数学的性质，您可能会遇到轻微的舍入错误。有关此函数和其它与数字相关的函数的详细信息，请参阅：<a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">GML 参考-数字函数</a>。</p>
    <p class="note"><span class="note">注意</span>在<b>HTML5</b>目标上，所有实数都是双精度的。</p>
    <p class="dropspot">请注意，虽然<span data-keyref="GameMaker Name">GameMaker</span>中创建的变量全部存储为双精度浮点数或整数，但在处理扩展时仍可使用其他格式。这些信息可以从扩展名传递到<span data-keyref="GameMaker Name">GameMaker</span>，然后使用相应的<span class="inline">is_*()</span>函数进行检查，<a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">此处可以找到列表</a>。</p>
    <p class="dropspot">&nbsp;</p>
    <p>&nbsp;</p>
  </div>
  <p id="p"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">Boolean</span><span data-close-text="true">Boolean</span> 布尔</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">布尔值可以是&nbsp;<span class="inline">true</span>&nbsp;或&nbsp;<span class="inline">false</span>。注意，当前&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>&nbsp;将等于或低于0.5的实数解释为&nbsp;<span class="inline">false</span>&nbsp;值，而任何大于0.5的实数将解释为&nbsp;<span class="inline">true</span>。但是&nbsp;<i>不是</i>&nbsp;意味着你应该检查1和0(或任何其他实数)是否为真和假，因为你还提供了&nbsp;<b> 常量</b>&nbsp;<span class="inline">true</span>&nbsp;和&nbsp;<span class="inline">false</span>&nbsp;这应该总是在你的代码中使用在将来的更新中添加真实的布尔数据类型，以防止出现任何问题。</p>
    <p class="dropspot">您可以使用以下函数将任何实数转换为隐式布尔值：</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm">bool 布尔</a></li>
    </ul>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">Strings</span><span data-close-text="true">Strings</span> 字符串</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><label for="one">字符串只是放在引号"..."中的任何文本。您可以对字符串执行某些操作，如将两个字符串添加到一起以创建更长的字符串(连接)，还可以更改字符串属性，甚至从中提取实数。有关字符串和字符串函数的详细信息，请参阅：<a href="../GML_Reference/Strings/Strings.htm">GML 参考-字符串</a>。</label></p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">Arrays</span><span data-close-text="true">Arrays</span> 数组</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><label for="three">数组是一种特殊的数据类型，可用于保存多个值。将数组指定给变量，然后使用值"填充"数组的不同索引。然后，可以在逐个引用的基础上将此数组传递给脚本和函数。但是，如果修改传递的数组，它将成为原始数组的副本，因此需要返回到原始变量以更新数组。有关阵列的详细信息，请参阅：<a href="Arrays.htm">GML 概述-阵列</a>。</label></p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#"><span data-open-text="true" data-skip-index="true">Structs</span><span data-close-text="true">Structs</span> 结构</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><label for="eleven">结构(有时称为"轻量级对象")是一种原始数据结构，用作所有数据类型变量的容器。将结构指定给变量，然后在结构中定义进一步的变量，然后可以根据需要读取或写入这些变量。有关结构的详细信息，请参阅<a href="Structs.htm">GML 概述-结构</a>一节。</label></p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">Method Variables</span><span data-close-text="true">Method Variables</span> 方法变量</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><label for="twelve">方法变量是已分配函数的变量，可以使用与使用GML 运行时函数完全相同的变量。有关详细信息，请参阅<a href="Method_Variables.htm">方法变量</a>一节。</label></p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#"><span data-open-text="true" data-skip-index="true">int64</span><span data-close-text="true">int64</span></a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">"int64"是一个64位整数，可以使用<span class="inline"><a href="../GML_Reference/Variable_Functions/int64.htm">int64()</a></span>(通过输入非64位实数)或从<span class="inline">缓冲区</span>读取<a href="../GML_Reference/Buffers/buffer_read.htm">buffer_u64</a>值来创建。</p>
    <p class="dropspot">这可用于严格要求64位整数的位置，也可用于要使用<a href="../../Additional_Information/Bitwise_Operators.htm">位移</a>并需要这些64位位置的位置。</p>
    <p class="dropspot">任何按位操作，即使在非64位值上运行，也将始终返回64位整数。</p>
    <p class="dropspot">int 64值的除法也将返回整数(例如：<span class="inline2">int 64(5 )/ int 64(2 )= 2</span>。</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#"><span data-open-text="true" data-skip-index="true">Hexadecimal Literals 十六进制文字</span><span data-close-text="true">Hexadecimal Literals 十六进制文字</span></a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span>将接受<b>十六进制文字</b>作为合法值。使用颜色时，十六进制值尤其常见，但可以在需要正整数值的任何地方使用。十六进制值可以通过以下两种方式进行格式化，其中<span class="inline"><em>abcd</em></span>将是实际的十六进制值：</p>
    <p class="code"><span style="background-color: transparent;"><strong>$</strong><em>abcd</em></span><br>
      <strong>0x</strong><em>abcd</em>
    </p>
    <p class="dropspot">例如，以下十进制值可以表示为十六进制，如图所示：</p>
    <p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br>
      <strong>16777215</strong>&nbsp;-&gt; $ffffff, 0xffffff
    </p>
    <hr>
    <p class="dropspot">十六进制值也可以以哈希/磅符号(<span class="inline2">#</span>)开头，但是，以这种方式写入时，其值将不等于使用先前显示的格式(<span class="inline2">$</span>或<span class="inline2">0x</span>)写入的类似十六进制值。这是由于GML 中解释颜色的方式，这要求更改哈希/磅十六进制值的格式，以便可以以<span class="inline2">#Rrggbb</span>格式写入CSS颜色。有关详细信息，请阅读<a href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#h">十六进制颜色</a>。</p>
    <p class="dropspot">例如，以下两项不相等：</p>
    <p class="code">$2c8edd <strong>!=</strong> #2c8edd</p>
    <p class="dropspot">要使它们引用相同的十进制值，必须交换前两个和最后两个字符：</p>
    <p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p>
    <p>&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down15" href="#"><span data-open-text="true" data-skip-index="true">Binary Literals 二进制文字</span><span data-close-text="true">Binary Literals 二进制文字</span></a></p>
  <div class="droptext" data-targetname="drop-down15">
    <p class="dropspot">您可以编写带有前缀 <span class="inline2">0b</span> 的二进制文字：</p>
    <p class="code">var _six = 0b0010 | 0b0100; // produces 0b0110, or 6</p>
    <p class="dropspot">上面的代码显示了两个二进制值，<span class="inline2">0010</span> 和 <span class="inline2">0100</span>，用于<a href="../../Additional_Information/Bitwise_Operators.htm">逐位"或"运算</a>。</p>
    <p class="dropspot"><br></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#"><span data-open-text="true" data-skip-index="true">Pointer</span><span data-close-text="true">Pointer</span> 指针</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">指针是一种“指向”内存位置的数据类型。你不能对指针进行操作，它只用于一些非常特定的函数，比如为另一个函数从内存中获取纹理或缓冲区地址。对于返回指针的函数示例，您可以看到&nbsp;<a href="../GML_Reference/Buffers/buffer_get_address.htm"><span class="inline">buffer_get_address()</span></a>&nbsp;或&nbsp;<a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><span class="inline">sprite_get_texture()</span></a>。</p>
    <p class="dropspot">还有一个函数用于检查值是否为指针(请参阅下面的"<b>检查数据类型</b>")，以及一个函数用于将值转换为指针：</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;">ptr</a></li>
    </ul>
    <p class="dropspot">使用指针时，还可以使用(并返回)以下内置常量：</p>
    <table class=" cke_show_border">
      <tbody>
        <tr>
          <th>常量</th>
          <th>描述</th>
        </tr>
        <tr>
          <td><span class="inline">pointer_null</span></td>
          <td>This constant indicates that the pointer is not pointing to anything meaningful (the same as <span class="inline">NULL</span> in C++ or <span class="inline">null</span> in C#). This value is <a class="tooltip" title="当用作布尔值时被认为是“false”的值，例如在if()条件中。">falsy</a>.</td>
        </tr>
        <tr>
          <td><span class="inline">pointer_invalid</span></td>
          <td>This constant simply means that the value is not a valid pointer</td>
        </tr>
      </tbody>
    </table>
    <p>&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">Enum</span><span data-close-text="true">Enum</span> 枚举</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">枚举是"枚举器(enumerator)"，它基本上允许您使用常量值列表创建自己的有限数据类型。<a href="Variables/Constants.htm">常量</a>的页面上详细说明了枚举。</p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">Undefined</span><span data-close-text="true">Undefined</span> 未定义</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot"><label for="seven">未定义值（也称为“空”值）是指表达式没有正确值的值，尽管它在语法上是正确的，因此必须返回<i>某些内容</i>。例如，假设您有一个 <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS map</a>并使用函数 <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><span class="inline">ds_map_find_value()</span></a>。现在，当地图没有要查找的值时会发生什么？那么，由于函数格式正确，问题是不存在这样的值，那么它会返回常量 <span class="inline">undefined</span>，您可以像检查 <span class="inline">true</span> 或其他值一样检查这个常量。<br></label></p>
    <p class="code"><label for="seven">var _value = ds_map_find_value(my_map, "key");<br><br>if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br>&nbsp; &nbsp; show_debug_message("The key does not exist!");<br>}</label><br></p>
    <p class="dropspot">&nbsp;<br></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#"><span data-open-text="true" data-skip-index="true">NaN</span><span data-close-text="true">NaN</span> 非数字</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><label for="nine"><span class="inline">NaN</span>代表"非数字"，是一个常量，当编译器无法将操作结果作为数字计算时，可以返回该常量。例如，0/0不能定义为实数，因此用<span class="inline">NaN</span>表示，或者负数的平方根(被认为是"想象的"数)不能用实数表示，因此用<span class="inline">NaN</span>表示。</label></p>
    <p class="dropspot">请注意，由于<span class="inline">NaN</span>不是数字，因此无法将其与自身进行比较，因此比较(例如<span class="inline">NaN==NaN</span>)将返回<span class="inline">false</span>。对于数组比较(例如：</p>
    <p class="code">show_debug_message(array_equals([NaN], [NaN]));<br>
      <br>
      // Output: 0 (false)
    </p>
    <p class="dropspot">&nbsp;</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#"><span data-open-text="true" data-skip-index="true">Infinity</span><span data-close-text="true">Infinity</span> 无穷大</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">常数 <span class="inline">无穷大</span> 指的是一个被认为是无穷大的数字，例如，将任何浮点值除以零时得到的结果，例如：1.0/0。</p>
    <p class="dropspot">请注意，<span class="inline">无穷</span>常量等于其自身，因此<span class="inline">infinity==infinity</span>将返回<span class="inline">true</span>。</p>
  </div>
  <p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#"><span data-open-text="true" data-skip-index="true">Any</span><span data-close-text="true">Any</span> 任何</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">“<strong>Any</strong>”数据类型可以在手册的许多页面上找到，例如<a href="../GML_Reference/Variable_Functions/is_string.htm">在参数中</a>，或作为<a href="../GML_Reference/Variable_Functions/array_get.htm">返回值</a>。它表示接受或返回<em>任何类型的值</em>。</p>
  </div>
  <h2>按原义加下划线</h2>
  <p>您可以在数字文字中使用下划线 (<span class="inline2">_</span>)，例如实数、十六进制值和二进制值。它们在编译过程中被忽略，仅用作视觉分隔符。以下是几个例子：</p>
  <p class="code">var _integer = 100_000_000; // same as 100000000<br>
    var _float &nbsp; = 3_141.59; // same as 3141.59<br>
    var _hexadec = 0xDEAD_BEEF; // same as 0xDEADBEEF<br>
    var _binary &nbsp;= 0b01101000_01101001; // same as 0b0110100001101001</p>
  <p>上面显示的文字中使用的所有下划线只会使它们更易于阅读，并且不会更改其功能的任何内容。</p>
  <h2>相关内容</h2>
  <p>可以使用以下页面中列出的函数检查任何变量的数据类型：</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">变量函数</a></li>
  </ul>
  <p>您还可以在此处找到显示使用混合变量数据类型的不同操作结果的算术类型表格：</p>
  <ul class="colour">
    <li><a href="../../Additional_Information/Type_Tables.htm">类型表</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML&nbsp;Overview</a></div>
        <div style="float:right">Next:&nbsp;<a href="Language_Features/If_Else_and_Conditional_Operators.htm">If/else 和条件运算符</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->

</body></html>