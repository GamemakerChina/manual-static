<!--?xml version="1.0" encoding="utf-8" ?--><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "8.2.2.3.9";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css">
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css">
  <meta name="topic-status" content="Draft">

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Sequences</title>
  <meta name="generator" content="Adobe RoboHelp 2022">
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css">
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander">
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequences">
  <meta name="rh-index-keywords" content="Sequences">
  <meta name="search-keywords" content="Sequences">
<meta name="brsnext" value="GameMaker_Language/GML_Reference/Asset_Management/Sequences/sequence_exists.htm"><meta name="brsprev" value="GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm"></head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Sequences">
        <span>Sequences</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default"> 序列 </span></h1>
  <p>序列通常使用 <a href="../../../../The_Asset_Editors/Sequences.htm"> 序列编辑器 </a> 在 IDE 中创建，但也可以使用代码创建和编辑。不过，在查看可用函数之前，了解 <span data-keyref="GameMaker Name">GameMaker</span> 中定义序列的方式以及将使用的不同术语非常重要。</p>
  <p>首先，在顶层，您有一个 <b> 序列元素 </b>。这是您通过 <a href="../../../../The_Asset_Editors/Rooms.htm"> 房间编辑器 </a> 或使用适当的 <a href="../Rooms/Sequence_Layers/Sequence_Layers.htm"> 层函数 </a> 在代码中放置在房间层上的内容。除了元素 ID 值之外，图层元素没有任何实际属性，但是需要此 ID 才能使用上述图层功能来更改序列播放或访问序列数据。</p>
  <p>接下来，您有 <b> 序列对象 </b> 和 <b> 序列实例 </b>，就像一般对象和实例一样。序列 <i> 对象 </i> 是您在 <a href="../../../../Introduction/The_Asset_Browser.htm"> 资源浏览器 </a> 中或使用函数 <span class="inline3_func"><a href="sequence_create.htm">sequence_create</a></span> 创建的基础资源，序列 <i> 实例 </i> 是 " 副本 " 该序列对象已作为图层上的元素放置在房间中。将序列对象视为蓝图，将序列实例视为根据这些蓝图进行的创建。序列对象和实例是 <a href="../../../GML_Overview/Structs.htm"> 结构体 </a>，与常规对象不同，序列对象结构体可以在运行时进行编辑，当您将它们创建为元素时，这将影响该序列的所有其他实例 (以及对序列对象进行的任何编辑 )<b> 不会 </b> 通过使用 <span class="inline3_func"><a href="../Rooms/room_restart.htm">room_restart</a></span> 或 <span class="inline3_func"><a href="../../General_Game_Control/game_restart.htm">game_restart</a></span> 函数重新启动游戏或房间来重置)。序列实例结构包含一些用于控制播放和事物的参数 (下文将对此进行更详细的解释) 以及 <b> 序列数据 </b> 结构。</p>
  <p>最后，如上所述，您拥有 <b> 序列数据 </b>，它是另一个结构体。该结构包含有关序列的 <i> 所有 </i> 数据。它包含的曲目、这些曲目具有的属性、播放速度等等。下面概述了该结构内容的具体细节，但基本上由 <b> 资产轨道 </b> 结构和 <b> 参数轨道 </b> 结构组成，它们使用 <b> 关键帧数据 </b> 在序列播放时实际执行操作。</p>
  <p>序列元素使用房间 <a href="../Rooms/Sequence_Layers/Sequence_Layers.htm"> 层函数 </a> 进行处理，但对于序列对象、实例和数据，我们有以下函数：</p>
  <p>&nbsp;</p>
  <ul class="colour">
    <li><a href="sequence_exists.htm">sequence_exists</a></li>
    <li><a href="sequence_create.htm">sequence_create</a></li>
    <li><a href="sequence_destroy.htm">sequence_destroy</a></li>
    <li><a href="sequence_get.htm">sequence_get</a></li>
    <li><a href="sequence_track_new.htm">sequence_track_new</a></li>
    <li><a href="sequence_keyframe_new.htm">sequence_keyframe_new</a></li>
    <li><a href="sequence_keyframedata_new.htm">sequence_keyframedata_new</a></li>
    <li><a href="sequence_get_objects.htm">sequence_get_objects</a></li>
    <li><a href="sequence_instance_override_object.htm">sequence_instance_override_object</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>There is also a&nbsp;<strong>built-in variable</strong>&nbsp;associated with instances that can be used to determine of the instance has been used in a sequence or not:</p>
  <p>&nbsp;</p>
  <ul class="colour">
    <li><a href="in_sequence.htm">in_sequence</a></li>
  </ul>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_important.hts"><span class="important"> 重要提示</span></span> 如果您的序列中有任何实例，这些实例不应更改其 <span class="inline2"><a href="../Sprites/Sprite_Instance_Variables/image_xscale.htm">image_xscale</a></span>/<span class="inline2"><a href="../Sprites/Sprite_Instance_Variables/image_yscale.htm">image_yscale</a></span>/<span class="inline2"><a href="../Sprites/Sprite_Instance_Variables/image_angle.htm">image_angle</a></span>/<span class="inline2">x</span>/<span class="inline2">y</span> 变量，因为当序列开始播放后更新每个步骤时，它们将被覆盖。</p>
  <p>&nbsp;</p>
  <p>在使用这些函数创建或编辑序列之前，我们建议您阅读下面给出的结构体属性的详细说明。如何创建新序列的一般概述是：</p>
  <ul class="colour">
    <li>使用函数 <span class="inline3_func"><a href="sequence_create.htm">sequence_create</a></span> 创建新的序列对象，并将序列对象索引存储在变量中。该索引使您可以访问序列对象结构。</li>
  </ul>
  <p class="code">myseq = sequence_create();</p>
  <ul class="colour">
    <li>设置序列对象顶级值，如长度、播放模式、播放速度等。例如：</li>
  </ul>
  <p class="code">myseq.length = 120;<br>
    myseq.loopmode = seqplay_pingpong</p>
  <ul class="colour">
    <li>在将轨道添加到序列对象之前，您需要创建它们，因此您现在需要创建一个已使用函数 <span class="inline3_func"><a href="sequence_track_new.htm">sequence_track_new</a></span> 定义的 <i>asset</i> 轨道数组。请注意，在代码中，资产轨道和参数轨道之间实际上没有区别 - 它们都是简单的轨道，它们的行为方式将取决于您创建的轨道类型以及它们是否被分配为顶级轨道的子轨道或不是。因此，您可以为资产创建一条轨道，然后为其分配不同参数的子轨道，这些子轨道将充当资产的 <i> 参数 </i> 轨道。下面的示例创建一个图形资源轨道，稍后将其添加到序列中：</li>
  </ul>
  <p class="code">var mytracks = array_create(1);<br>
    mytracks[0] = sequence_track_new(seqtracktype_graphic);</p>
  <ul class="colour">
    <li>每个资产轨道都需要一些数据来告诉序列它的外观、位置等 ...... 并且这些数据以 <i> 关键帧 </i> 的形式添加。在资产轨道的顶层，您可以为各种内容设置关键帧 (在下面的轨道结构部分中列出)，但请注意，由于这些是资产轨道关键帧，因此它们不会被插值，只会更改当到达给定帧时它们引用的值。每个关键帧都是一个添加到数组中的结构，然后将该数组分配给资源轨道。要创建关键帧结构，我们将调用函数 <span class="inline3_func"><a href="sequence_keyframe_new.htm">sequence_keyframe_new</a></span>，并使用函数 <span class="inline3_func"><a href="sequence_keyframedata_new.htm">sequence_keyframedata_new</a></span> 填充关键帧：</li>
  </ul>
  <p class="code">// Create a new keyframe struct for a graphics asset track and add it to an array (as you can have multiple keys in a frame)<br>
    var graphickeys = array_create(1);<br>
    graphickeys[0] = sequence_keyframe_new(seqtracktype_graphic);<br>
    // Set the graphics keyframe top level data for the keyframe position and length, etc...<br>
    graphickeys[0].frame = 0;<br>
    graphickeys[0].length = 1;<br>
    graphickeys[0].stretch = true;<br>
    graphickeys[0].disabled = false;<br>
    // Create the channel data that will go into this keyframe (again an array, as each key can have multiple channels of keyframe data)<br>
    var graphickeydata = array_create(1);<br>
    graphickeydata[0] = sequence_keyframedata_new(seqtracktype_graphic);<br>
    graphickeydata[0].spriteIndex = spr_Platform;<br>
    graphickeydata[0].channel = 0;<br>
    // Add the keyframe data channels to the graphics track keyframe<br>
    graphickeys[0].channels = graphickeydata;<br>
    // Add the definied keyframes to the track<br>
    mytracks[0].name = "TestGraphicTrack";<br>
    mytracks[0].keyframes = graphickeys;</p>
  <ul class="colour">
    <li>现在，我们需要创建一个参数轨道，将其作为子轨道分配给刚刚创建的图形轨道。这将以与上面所示类似的方式完成，只是现在我们需要为轨道指定一个显示其用途的名称，在本例中为 " 位置"，因为我们将使用此轨道在路线上移动图形轨道序列动画帧的数量：</li>
  </ul>
  <p class="code">// Create a new parameter track struct for the position of the graphic<br>
    var paramtracks = array_create(1);<br>
    paramtracks[0] = sequence_track_new(seqtracktype_real);<br>
    paramtracks[0].name = "position";<br>
    paramtracks[0].interpolation = seqinterpolation_lerp;<br>
    // Create the keyframe struct to hold the parameter channel data and set the frame position for the keyframe<br>
    var paramkeys = array_create(2);<br>
    paramkeys[0] = sequence_keyframe_new(seqtracktype_real);<br>
    paramkeys[0].frame = 0;<br>
    paramkeys[1] = sequence_keyframe_new(seqtracktype_real);<br>
    paramkeys[1].frame = 120;<br>
    // Create the keyframe data structs<br>
    var paramkeydata1 = array_create(2);<br>
    paramkeydata1[0] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata1[0].channel = 0; // Channel 0 for a position track is the X position<br>
    paramkeydata1[0].value = 0;<br>
    paramkeydata1[1] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata1[1].channel = 1; // Channel 1 for a position track is the Y position<br>
    paramkeydata1[1].value = 0;<br>
    var paramkeydata2 = array_create(2);<br>
    paramkeydata2[0] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata2[0].channel = 0;<br>
    paramkeydata2[0].value = room_width;<br>
    paramkeydata2[1] = sequence_keyframedata_new(seqtracktype_real);<br>
    paramkeydata2[1].channel = 1;<br>
    paramkeydata2[1].value = room_height;<br>
    // Assign the keyframe data structs to the channels for each key<br>
    paramkeys[0].channels = paramkeydata1;<br>
    paramkeys[1].channels = paramkeydata2;<br>
    // Assign the keys to the parameter track<br>
    paramtracks[0].keyframes = paramkeys;</p>
  <ul class="colour">
    <li>完成后，最后要做的是将参数轨道作为子轨道分配给我们在开始时创建的主图形资源轨道，然后将这些轨道分配给序列，然后我们可以在房间中创建一个实例:</li>
  </ul>
  <p class="code">mytracks[0].tracks = paramtracks;<br>
    myseq.tracks = mytracks;<br>
    layer_sequence_create("Assets_1", 0, 0, myseq);</p>
  <p>上述指令创建了一个非常简单的序列对象，该对象在序列的 (0, 0) 位置 <i> 绘制一个精灵，然后将其移动到右下角并循环返回。如前所述，有很多地方需要访问不同的结构来提供或获取有关序列的数据，下面的部分列出了这些结构包含的所有不同属性：</i></p>
  <ul class="colour">
    <li><a name="object"></a><a href="Sequence_Structs/The_Sequence_Object_Struct.htm"><label for="1"> 序列对象结构 </label></a></li>
    <li><a name="instance"></a><a href="Sequence_Structs/The_Sequence_Instance_Struct.htm"><label for="2"> 序列实例结构 </label></a></li>
    <li><a name="track"></a><a href="Sequence_Structs/The_Track_Struct.htm"><label for="3"> 轨道结构 </label></a></li>
    <li><a name="keyframe"></a><a href="Sequence_Structs/The_Keyframe_Struct.htm"><label for="4"> 关键帧结构 </label></a></li>
    <li><a name="keyframe_data"></a><a href="Sequence_Structs/The_Keyframe_Data_Struct.htm"><label for="5"> 关键帧数据结构 </label></a></li>
  </ul>
  <p>&nbsp;</p>
  <p>最后，可以向序列添加代码，这些代码可以作为 <strong> 事件 </strong>、<strong> 时刻 </strong> 或作为 <strong> 广播消息 </strong> 触发。下页对此进行了完整解释：</p>
  <ul class="colour">
    <li><a href="Sequence_Events_Moments_Broadcast.htm">事件、时刻和广播消息</a></li>
  </ul>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Asset_Management.htm">资源管理</a></div>
        <div style="float:right">Next: <a href="../Fonts/Fonts.htm">字体</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Sequences
-->
  <!-- TAGS
sequence_functions
-->

</body></html>