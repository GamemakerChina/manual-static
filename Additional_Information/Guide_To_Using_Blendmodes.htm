<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><script type="text/javascript" language="JavaScript">function reDo(){innerWidth==origWidth&&innerHeight==origHeight||location.reload()}4==parseInt(navigator.appVersion)&&"Netscape"==navigator.appName&&(origWidth=innerWidth,origHeight=innerHeight,onresize=reDo),onerror=null</script><style type="text/css">p.WebHelpNavBar{text-align:right}</style><script type="text/javascript">gCommonRootRelPath=gRootRelPath="..",gTopicId="7.0_10"</script><script type="text/javascript" src="../template/scripts/rh.min.js"></script><script type="text/javascript" src="../template/scripts/common.min.js"></script><script type="text/javascript" src="../template/scripts/topic.min.js"></script><script type="text/javascript" src="../template/scripts/topicwidgets.min.js"></script><script type="text/javascript" src="../whxdata/projectsettings.js"></script><link rel="stylesheet" type="text/css" href="../template/styles/topic.min.css"><link rel="stylesheet" type="text/css" href="../template/Charcoal_Grey/topicheader.css"><meta name="topic-status" content="Draft"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Guide To Using Blendmodes</title><meta name="generator" content="Adobe RoboHelp 2022"><link rel="stylesheet" href="../assets/css/default.css" type="text/css"><script src="../assets/scripts/main_script.js" type="module"></script><meta name="rh-authors" content="Mark Alexander"><meta name="topic-comment" content="Page that explains how blendmodes work."><meta name="rh-index-keywords" content="blendmodes,Guide To Using Blendmodes"><meta name="search-keywords" content="blendmodes,blending,blend modes"><meta name="brsnext" value="Additional_Information/Project_Format.htm"><meta name="brsprev" value="Additional_Information/Guide_To_Primitives_And_Vertex_Building.htm"></head><body><div class="topic-header rh-hide" id="rh-topic-header"><div class="logo"></div><div class="nav"><div class="title" title="Guide To Using Blendmodes"><span>Guide To Using Blendmodes</span></div><div class="gotohome" title="Click here to see this page in full context"><a href="#" onclick="rh._.goToFullLayout()">Click here to see this page in full context</a></div></div></div><div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div><h1>混合模式使用指南</h1><p>如果您已经使用<span data-keyref="GameMaker Name">GameMaker</span>一段时间，您几乎肯定会遇到<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">混合模式</a>，甚至可能在游戏中使用它们。混合模式是更改绘制方式以提供给予有趣和特定图形效果的好方法，但您知道它们的工作原理以及如何使用它们吗？这是一个可能会让人们感到困惑的主题，因此在本节中，我们希望消除一些围绕混合模式的神秘感，并使您能够在游戏中最大限度地使用它们。</p><h2>概述</h2><p>混合模式基本上告诉你的游戏绘制某些东西与任何其他已经事先绘制的东西混合。你绘制到屏幕上的所有东西都由四个组成部分组成-红色，绿色，蓝色和alpha -默认情况下，它们是使用混合模式<strong>bm_normal</strong>绘制到屏幕上的。</p><p>这种混合模式绘制的所有像素的颜色和alpha值基本不变(虽然，稍后在本节中你会看到，这不是<em>完全</em>正确...)，但<span data-keyref="GameMaker Name">GameMaker</span>有许多<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">内置的混合模式</a>，可以设置来改变这种行为。</p><h2>事物是如何绘制的</h2><p>当<span data-keyref="GameMaker Name">GameMaker</span>去绘制一个像素时，有一个<strong>源颜色</strong>(要绘制的像素的颜色)和<strong>目标颜色</strong>(我们要绘制的像素中已经存在的颜色)。例如，如果在同一像素上绘制了黄色之后，又绘制了粉色，则粉色是<strong>源</strong>(您正在绘制的内容)，黄色是<strong>目的地</strong>(因为它已经在那里)。</p><p>当确定像素的最终颜色时，GameMaker 将根据<strong>混合模式</strong>将源颜色和目标颜色进行组合--基本上是在问"我应该如何将粉红色和黄色组合？"。</p><h2>计算最终颜色</h2><p>源颜色和目标颜色都包含RGBA(<strong>红色</strong>、<strong>绿色</strong>、<strong>蓝色</strong>和 <strong>Alpha</strong>) 分量，每个分量都是 0 和 1 之间的浮点值。</p><p>像素的最终颜色是通过将源和目标的每个分量乘以<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">因子</a>，然后根据集合<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">等式</a>将它们放在一起来计算的。</p><p>这意味着最终像素颜色的计算方式如下：<span class="inline2">(源*因子)+(目标*因子)|(source * factor) + (destination * factor)</span>。</p><p>在这里，两个值最终<strong>相加</strong>，因为默认公式是 <span class="inline2">bm_add</span>，但是您可以将其更改为减去或使用其他公式(稍后将在本页中介绍)。</p><h2>基本混合模式</h2><p>使用函数 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode</a></span> 同时<strong>应用一组混合因子和公式</strong>，作为"预设"混合模式。</p><p>你可以在(例如)绘制精灵之前调用它，然后重置它，类似于这样：</p><p class="code">gpu_set_blendmode(bm_add);<br>draw_self();<br>gpu_set_blendmode(bm_normal);</p><p>该代码使用<strong>添加</strong>混合模式绘制实例精灵。添加混合模式使用可用的 GML 常量之一设置，其中有六个用于基本模式：</p><div data-conref="../assets/snippets/Table_Gpu_blend_modes.hts"><table><colgroup><col><col><col><col></colgroup><tbody><tr><th colspan="4"><span data-keyref="Type_Constant_Draw_Blend_Mode"><a target="_blank" href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode.htm">混合模式常数</a></span></th></tr><tr><th>常量</th><th>描述</th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">扩展混合模式</a></th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">混合方程</a></th></tr><tr><td><span class="inline">bm_normal</span></td><td>Normal blending (the default blend mode).</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_inv_src_alpha</span>)</td><td><span class="inline">bm_eq_add</span></td></tr><tr><td><span class="inline">bm_add</span></td><td>Additive blending. Luminosity values of light areas are added.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_eq_add</span></td></tr><tr><td><span class="inline">bm_subtract</span></td><td>Subtractive blending. Source is subtracted from the destination.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_eq_subtract</span></td></tr><tr><td><span class="inline">bm_reverse_subtract</span></td><td>Reverse subtractive blending. Destination is subtracted from the source.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_eq_reverse_subtract</span></td></tr><tr><td><span class="inline">bm_min</span></td><td>Smaller value from source and destination is selected.</td><td>(<span class="inline">bm_one</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_eq_min</span></td></tr><tr><td><span class="inline">bm_max</span></td><td>Max blending. Similar to additive blending.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_inv_src_colour</span>)</td><td><span class="inline">bm_eq_add</span></td></tr></tbody></table></div><p>"扩展混合模式"列显示分别应用于源和目标的因子，"混合方程"列显示用于将这两个值结合在一起的方程。</p><p>现在让我们来看看每个基本的混合模式是如何工作的。</p><p class="note"><span data-conref="../assets/snippets/Tag_note.hts"><span class="note">注意</span></span> 这些示例演示了使用绿色背景的混合模式，并在其上绘制一个蓝色正方形，这两个背景均视为目标。使用每种混合模式，绘制一个灰色正方形作为源。</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#"><span data-open-text="true" data-skip-index="true">bm_normal</span><span data-close-text="true">bm_normal</span></a></p><div class="droptext" data-targetname="drop-down9"><table class="cke_show_border"><tbody><tr><th>常量</th><th>描述</th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">扩展混合模式</a></th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">混合方程</a></th></tr><tr><td><span class="inline">bm_normal</span></td><td>Normal blending (the default blend mode).</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_inv_src_alpha</span>)</td><td><span class="inline">bm_add</span></td></tr></tbody></table><p class="dropspot"><span class="inline2">bm_normal</span> 是默认的混合模式，它将源颜色与其alpha相乘，并将目标颜色与源alpha的<em>逆</em>相乘(为源颜色留出空间)。最后它将两者相加(公式为 <span class="inline2">bm_add</span>)：</p><p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/guide_blend_modes/bm_normal.png"></p><p class="dropspot">本例中的背景色为 <span class="inline2">(50, 100, 0, 255)</span>。</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#"><span data-open-text="true" data-skip-index="true">bm_add</span><span data-close-text="true">bm_add</span></a></p><div class="droptext" data-targetname="drop-down"><table class="cke_show_border"><tbody><tr><th>常量</th><th>描述</th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">扩展混合模式</a></th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">混合方程</a></th></tr><tr><td><span class="inline">bm_add</span></td><td>Additive blending. Luminosity values of light areas are added.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_add</span></td></tr></tbody></table><p class="dropspot">这种混合模式将源颜色与其alpha相乘，就像 <span class="inline2">bm_normal</span> 一样，但它会保持目标颜色不变 (<span class="inline2">bm_one</span>)。然后将两者相加，得到较浅的颜色。请注意，颜色值不能超过 255 (或低于 0)，因此任何加起来超过 255 的颜色都会被箝位为 255。</p><p class="dropspot"><img alt="bm_add example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/guide_blend_modes/bm_add.png">本例中的背景色为 <span class="inline2">(50, 100, 0, 255)</span>。</p><p class="dropspot">使用这种混合模式是一个伟大的方式来获得"氖发光"的外观，最常用的照明效果，激光或只是任何你想看起来有光晕或有发光。</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#"><span data-open-text="true" data-skip-index="true">bm_subtract</span><span data-close-text="true">bm_subtract</span></a></p><div class="droptext" data-targetname="drop-down1"><table class="cke_show_border"><tbody><tr><th>常量</th><th>描述</th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">扩展混合模式</a></th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">混合方程</a></th></tr><tr><td><span class="inline">bm_subtract</span></td><td>Subtractive blending. Source is subtracted from the destination.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_subtract</span></td></tr></tbody></table><p class="dropspot">此模式使用与 <span class="inline2">bm_add</span> 相同的因子，但它使用减法公式，因此源颜色从目标颜色中减去(即前景从背景中删除)。</p><p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/guide_blend_modes/bm_subtract.png">本例中的背景色为 <span class="inline2">(50, 100, 0, 255)</span>。</p><p class="dropspot">这对于使用遮罩移除图像的某些部分非常有用，如本页后面"<strong>混合方程</strong>"下的示例所示。</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#"><span data-open-text="true" data-skip-index="true">bm_reverse_subtract</span><span data-close-text="true">bm_reverse_subtract</span></a></p><div class="droptext" data-targetname="drop-down2"><table class="cke_show_border"><tbody><tr><th>常量</th><th>描述</th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">扩展混合模式</a></th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">混合方程</a></th></tr><tr><td><span class="inline">bm_reverse_subtract</span></td><td>Reverse subtractive blending. Destination is subtracted from the source.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_reverse_subtract</span></td></tr></tbody></table><p class="dropspot">这再次使用与 <span class="inline2">bm_add</span> 和 <span class="inline2">bm_subtract</span> 相同的因子，但使用反向减法方程，因此从源颜色中减去目标颜色(即从前景中去除背景)。</p><p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/guide_blend_modes/bm_reverse_subtract.png">本例中的背景色为 <span class="inline2">(50, 100, 0, 255)</span>。</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-open-text="" data-rhwidget="DropSpot" data-target="drop-down6" href="#"><span data-open-text="true" data-skip-index="true">bm_min</span><span data-close-text="true">bm_min</span></a></p><div class="droptext" data-targetname="drop-down6"><table class="cke_show_border"><tbody><tr><th>常量</th><th>描述</th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">扩展混合模式</a></th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">混合方程</a></th></tr><tr><td><span class="inline">bm_min</span></td><td>Smaller value from source and destination is selected.</td><td>(<span class="inline">bm_one</span>, <span class="inline">bm_one</span>)</td><td><span class="inline">bm_min</span></td></tr></tbody></table><p class="dropspot">它对源颜色和目标颜色都使用 <span class="inline2">bm_one</span> 因子，因此它们根本不会改变。然后它使用最小值方程，因此源和目标颜色 (对于 R、G、B 和 A 中的每一个) 之间的任何分量值都较小，用于最终像素。</p><p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/guide_blend_modes/bm_min.png">本例中的背景色为 <span class="inline2">(50, 100, 0, 255)</span>。</p><p class="dropspot">&nbsp;</p></div><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#"><span data-open-text="true" data-skip-index="true">bm_max</span><span data-close-text="true">bm_max</span></a></p><div class="droptext" data-targetname="drop-down8"><table><tbody><tr><th>常量</th><th>描述</th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">扩展混合模式</a></th><th><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">混合方程</a></th></tr><tr><td><span class="inline">bm_max</span></td><td>Max blending. Similar to additive blending.</td><td>(<span class="inline">bm_src_alpha</span>, <span class="inline">bm_inv_src_colour</span>)</td><td><span class="inline">bm_eq_add</span></td></tr></tbody></table><p class="dropspot"><span>这种混合模式解释起来比较复杂，但它基本上是将源颜色与源 Alpha 相乘，然后将它们与目标颜色值相加，再乘以反相源颜色值。我们将在文章的第二部分介绍 <span class="inline2">bm_max</span> (以及其他混合模式) 背后的实际数学原理，但您所需要知道的是，结果将是更"饱和"和更明亮的颜色，而不会产生使用<span></span></span> <span class="inline2">bm_add</span><span><span></span> 将产生的纯白色光泽。</span></p><p class="dropspot"><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/guide_blend_modes/bm_max.png">本例中的背景色为 <span class="inline2">(50, 100, 0, 255)</span>。</p><p class="dropspot">&nbsp;</p></div><p>&nbsp;</p><p>现在你知道了在 <span data-keyref="GameMaker Name">GameMaker</span> 中使用混合模式的基本原理。它获取源图像 (正在绘制的图像) 的 RGBA 值，然后将这些值与目标图像 (正在绘制的图像) 的 RGBA 值混合。</p><p>这种混合是通过将每个像素颜色和 alpha 的各个分量乘以不同的量来完成的，这取决于我们希望实现的效果，然后使用集合方程从两者计算最终的像素值。</p><p>有了这些知识，你可以开始在游戏中使用混合模式来获得发光的激光，逼真的阴影或饱和的过渡效果，但这里还有更多的东西要学！下面我们看看<strong>扩展混合模式</strong>(因素)，以及探索它们背后的一些数学，以便您可以创建自己的混合效果，如相乘或叠加。</p><h2>扩展混合模式(因子)</h2><p>上面我们已经讨论了函数 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode</a></span>，但现在我们要看看 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">gpu_set_blendmode_ext</a></span>。</p><p>我们看到，每个内置混合模式都将<strong>因子</strong>应用于<strong>源</strong>和<strong>目标</strong>颜色。例如，<span class="inline2">bm_add</span> 将源与其alpha相乘，并将目标与1相乘。</p><p>使用 <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">gpu_set_blendmode_ext</a></span>，您可以分别<strong>手动设置源颜色和目标颜色的因子</strong>。这为您提供了更多的选项来绘制像素，因为您现在可以手动选择源颜色与之相乘，然后选择目标颜色与之相乘。</p><h3>表示组件</h3><p>正如你已经知道的，源颜色和目标颜色都有 RGBA 分量。每个分量的值都在 0 和 1 之间。</p><p>我们将源 RGBA 表示为 <span class="inline2">(Rs, Gs, Bs, As)</span> 并且将目标 RGBA 表示为 <span class="inline2">(Rd, Gd, Bd, Ad)</span>。</p><p>了解这些将有助于您了解每个因子的工作原理，因为一个因子可能使用<span class="inline2">Rs</span>值(源红色)，但另一个因子可能使用<span class="inline2">Rd</span>(目标红色)，等等。</p><h3>计算最终像素</h3><p>当你去画一些东西时，GPU 会得到这个：</p><ul class="colour"><li><span class="inline2">(Rs，Gs，Bs，As)</span> = 您要绘制的颜色的 RGB 和 Alpha。</li><li><span class="inline2">(Rd，Gd，Bd，Ad)</span> = 像素位置处已经存在的颜色的 RGB 和 Alpha。</li></ul><p>然后它对每个像素执行以下操作：</p><p class="code">final_pixel_colour = &nbsp;(Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p><p>如您所见，它将源 RGBA 和目标 RGB乘以它们的设置因子。然后按照默认的<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">公式</a>将它们相加。</p><p>混合因子在 <span data-keyref="GameMaker Name">GameMaker</span> 中由多个 GML 常量定义。每个常量都是可用于源或目标 (或两者) 的因子。以下因子可用：</p><div data-conref="../assets/snippets/Table_Gpu_blend_modes_ext.hts"><table><colgroup><col><col></colgroup><tbody><tr><th colspan="2"><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a target="_blank" href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_get_blendmode_ext.htm">混合模式因子常量</a></span></th></tr><tr><th>常量</th><th>混合因子(红色、绿色、蓝色、透明度)</th></tr><tr><td><span class="inline">bm_zero</span></td><td>(0, 0, 0, 0)</td></tr><tr><td><span class="inline">bm_one</span></td><td>(1, 1, 1, 1)</td></tr><tr><td><span class="inline">bm_src_colour</span></td><td>(Rs, Gs, Bs, As)</td></tr><tr><td><span class="inline">bm_inv_src_colour</span></td><td>(1-Rs, 1-Gs, 1-Bs, 1-As)</td></tr><tr><td><span class="inline">bm_src_alpha</span></td><td>(As, As, As, As)</td></tr><tr><td><span class="inline">bm_inv_src_alpha</span></td><td>(1-As, 1-As, 1-As, 1-As)</td></tr><tr><td><span class="inline">bm_dest_alpha</span></td><td>(Ad, Ad, Ad, Ad)</td></tr><tr><td><span class="inline">bm_inv_dest_alpha</span></td><td>(1-Ad, 1-Ad, 1-Ad, 1-Ad)</td></tr><tr><td><span class="inline">bm_dest_colour</span></td><td>(Rd, Gd, Bd, Ad)</td></tr><tr><td><span class="inline">bm_inv_dest_colour</span></td><td>(1-Rd, 1-Gd, 1-Bd, 1-Ad)</td></tr><tr><td><span class="inline">bm_src_alpha_sat</span></td><td>(f, f, f, 1) where f = min(As, 1-Ad)</td></tr></tbody></table></div><p>第二列显示使用该因子时，R、G、B、A 分量中的每个分量乘以的值。</p><p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#"><span data-open-text="true" data-skip-index="true">bm_normal 工作原理示例</span> <span data-close-text="true">bm_normal 工作原理示例</span></a></p><div class="droptext" data-targetname="drop-down4"><p class="dropspot">Time to look at a practical example of how this comes together for drawing in <span data-keyref="GameMaker Name">GameMaker</span>. For this, we are going to look at the&nbsp;<span class="inline2">bm_normal</span>&nbsp;blend mode, which is simply:</p><p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);<br>gpu_set_blendequation(bm_add);</p><p class="dropspot">One of the problems people have with blend modes is visualising the results, so to show the maths behind them, we'll use this blend mode as our test subject since it's the blend mode that everyone uses the most and we know exactly what to expect from it. Imagine we are drawing a rectangle with the colour <span class="inline2">(128, 255, 64, 255)</span> over a background with the colour <span class="inline2">(64, 128, 255, 255)</span>:</p><p class="dropspot"><img alt="Example of bm_normal" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example1.png">So, our blending calculations look like this:</p><p class="code_plain"><strong>Colours:</strong><br>Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br>Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br><br><strong>Factors:</strong><br>bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br>bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = &nbsp;(0, 0, 0, 0)<br><br><strong>Formula:</strong><br>(Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br><br><strong>Apply factors</strong>:<br>(0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br><br><strong>Apply equation</strong>:<br>(0.5, 1, 0.25, 1) + (0, 0, 0, 0)<br><br><strong>Final pixel</strong>:<br>(0.5, 1, 0.25, 1) = (128, 255, 64, 255)</p><p class="dropspot">As you can see, we multiply the destination values by 0, which gives them a value of 0 too, meaning that the source colours are unchanged, so our final colour value is&nbsp;<span class="inline2">(128, 255, 64, 255)</span>.</p><p class="dropspot">You can see how the inclusion of a lower alpha affects this calculation:</p><p class="code_plain"><strong>Colours:</strong><br>Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br>Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br><br><strong>Factors:</strong><br>bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br>bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5, 0.5)<br><br><strong>Formula:</strong><br>(Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br><br><strong>Apply factors</strong>:<br>(0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br><br><strong>Apply equation</strong>:<br>(0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5)<br><br><strong>Final pixel</strong>:<br>(0.375, 0.75, 0.625, 0.75) = (96, 192, 159, 192)</p><p class="dropspot">This gives a final pixel colour <span class="inline2">(96, 192, 159, 192)</span>, and will give an image like that shown below:</p><p class="dropspot"><img alt="Example Of bm_normal With Alpha" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Example2.png"></p><p class="dropspot">Hopefully you can see clearly now what the blend mode factors do, and how combining them can change what is drawn to create some interesting effects.</p></div><p>We will now look at a practical example of how to combine these factors to create your own custom blend modes.</p><h2>Creating Your Own Blend Modes</h2><p>使用不同的可用因子，您可以创建自己的混合模式，以实现通常不可用的混合选项。在这个例子中，我们将创建一个类似于Photoshop中使用的<strong>乘</strong>效果。我们可以使用上面提到的两个混合模式因子常量来模拟这种混合模式，如下所示：</p><p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p><p>在我们实际使用这种混合模式绘制东西之前，让我们看看它在Photoshop中应该是什么样子：</p><p><img alt="The &quot;Multiply&quot; Blend Mode In Photoshop" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Multiply.png">使用我们的扩展混合模式，我们得到以下结果：</p><p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br>Source colour * dest colour + dest colour * zero = source colour * dest colour</p><p>混合因子<span class="inline2">bm_zero</span>有效地将目标颜色从等式中移除(因为零乘以任何东西都是零)，所以我们剩下的是源颜色乘以目标颜色的混合因子，因此该模式的名称为"乘"。要在<span data-keyref="GameMaker Name">GameMaker</span>中使用此模式，您只需在<strong>Draw Event</strong>中设置如下内容：</p><p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br>draw_self();<br>gpu_set_blendmode(bm_normal);</p><p>下一张图片是使用以下代码从GameMaker的测试项目中拍摄的：</p><p><img alt="The &quot;Multiply&quot; Blend Mode In GameMaker" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_MultiplyGMS.png">Can you spot the difference? Probably not! There will, however, be some deviation between the two due to differences between the render tools used, but it's almost exactly as you would expect.</p><p>Note though that not all the blend modes used by art programs are available to you within <span data-keyref="GameMaker Name">GameMaker</span> due to the fact some of them can actually force the colour values to go over 255 and so create special effects, but that doesn't mean you can't create passable imitations of these effects, or even brand new effects, using them.</p><p>It's worth mentioning that with <span data-keyref="GameMaker Name">GameMaker</span> you can take this one step further using the function <span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha</a></span>. This permits you to separate out the alpha component of the different blend mode factors and use them individually to create even more possible combinations. We won't cover this function here as it's explained in depth already in the manual, but it's worth mentioning just so you know it's available for use.</p><h2>Blend Equations</h2><p>Through reading this guide, you should already have a basic understanding of what a blend equation is. It controls how the source and destination colours are mixed together, after the factors have been applied.</p><p>By default, both the source and destination values are <strong>added</strong> together, as the default equation is <span class="inline2">bm_eq_add</span>.</p><p>The following equations are available in&nbsp;<span data-keyref="GameMaker Name">GameMaker</span>, which can be set using&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">gpu_set_blendequation</a></span>:</p><div data-conref="../assets/snippets/Table_Gpu_blend_equations.hts"><table><colgroup><col><col><col></colgroup><tbody><tr><th colspan="3"><span data-keyref="Type_Constant_Draw_Blend_Mode_Equation"><a target="_blank" href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation.htm">Blend Mode Equation Constant</a></span></th></tr><tr><th>常量</th><th>描述</th><th>Equation</th></tr><tr><td><span class="inline">bm_eq_add</span></td><td>Add both together (the default equation).</td><td>source + destination</td></tr><tr><td><span class="inline">bm_eq_subtract</span></td><td>Subtract source from destination.</td><td>destination - source</td></tr><tr><td><span class="inline">bm_eq_reverse_subtract</span></td><td>Subtract destination from source.</td><td>source - destination</td></tr><tr><td><span class="inline">bm_eq_min</span></td><td>Use whichever value is smaller.</td><td>min(source, destination)</td></tr><tr><td><span class="inline">bm_eq_max</span></td><td>Use whichever value is larger.</td><td>max(source, destination)</td></tr></tbody></table><p class="note"><span data-conref="../assets/snippets/Tag_important.hts"><span class="important">重要</span></span>&nbsp;<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm">Blend factors</a> are not applied when <span class="inline2">bm_eq_min</span> or <span class="inline2">bm_eq_max</span> is used as the blend equation, which is effectively the same as using&nbsp;<span class="inline2">bm_one</span>&nbsp;as the factors.</p></div><p>You can also set the equation used for RGB and Alpha separately using&nbsp;<span class="inline3_func"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendequation_sepalpha.htm">gpu_set_blendequation_sepalpha</a></span>.</p><h3>Using Equations</h3><p>You can use the <span class="inline2">bm_eq_subtract</span> equation to achieve the following effect:</p><p><video class="center" src="../assets/Images/Scripting_Reference/GML/Reference/Drawing/bm_eq_subtract.mp4" width="480" height="320" controls=""></video></p><p>Here, we're drawing a sprite to a <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">surface</a>, and then drawing a circle that subtracts whatever is in the surface. The surface is then drawn to the screen.</p><p>This can be achieved with the following <strong>Create</strong> and <strong>Draw</strong> event code:</p><p class="code_heading">Create Event</p><p class="code">surf = surface_create(128, 128);<br>surf_x = 175;<br>surf_y = 90;</p><p class="code_heading">Draw Event</p><p class="code">if (!surface_exists(surf))<br>{<br>&nbsp;&nbsp; &nbsp;surf = surface_create(128, 128);<br>}<br><br>// Draw to surface<br>surface_set_target(surf);<br>&nbsp;&nbsp; &nbsp;<br>draw_sprite(spr_box, 0, 0, 0);<br>&nbsp;&nbsp; &nbsp;<br>gpu_set_blendequation(bm_eq_subtract);<br>draw_circle(mouse_x - surf_x, mouse_y - surf_y, 32, 0);<br>gpu_set_blendequation(bm_add);<br>&nbsp;&nbsp; &nbsp;<br>surface_reset_target();<br>&nbsp;&nbsp; &nbsp;<br>// Draw surface to screen<br>draw_surface(surf, surf_x, surf_y);</p><p>First we create a surface and define its room position. Then in the Draw event, we check if the surface doesn't exist, and then recreate it.</p><p>Then we draw the following to that surface:</p><ul class="colour"><li>A sprite, drawn normally. Parts of this will be "removed" so we can see through it.</li><li>A <a href="../GameMaker_Language/GML_Reference/Drawing/Basic_Forms/draw_circle.htm">circle</a>, drawn at the mouse position, using the <span class="inline2">bm_eq_subtract</span> equation.</li></ul><p>The circle will subtract its alpha value from whatever is already in the surface, allowing us to see through it.</p><p>The surface is then drawn in the room at its defined position.</p><h2>Surfaces And Alpha</h2><p>关于混合模式，最后一件事值得注意，那就是它们如何影响颜色的 <strong>Alpha</strong> 分量。 当仅绘制到<a class="tooltip" title="应用程序表面是一种特殊的内置表面，GameMaker Studio 2将在游戏的“绘制事件”中将所有内容绘制到该表面（表面实际上是为图形保留的内存区域）。然后这个表面被绘制到每个游戏帧末尾的显示缓冲区，向玩家显示它的内容。">应用程序表面</a>或<a class="tooltip" title="显示缓冲区是最终绘制所有内容的“画布”。一些事件直接针对此事件（例如Pre Draw事件），而另一些事件将首先绘制到应用程序表面，然后将其绘制到显示缓冲区。">显示缓冲区</a>时，您实际上不需要考虑目标 Alpha 值，因为它<em>始终</em>为 1。 然而，您自己制作的表面是不同的，因为您可以清除表面以使其具有您希望的从零到一的任何 alpha 值。 这会导致一些有趣的效果，与大多数人的预期相反。</p><p>为了说明这一点，我们将使用基本的默认值<span class="inline">bm_normal</span>进行绘制。大多数人认为将表面清除为alpha 0，然后绘制alpha为0.5的东西将给予结果alpha值也为0.5.<strong>但事实并非如此</strong>，许多人认为这是<span data-keyref="GameMaker Name">GameMaker</span>渲染事物的"错误"。然而，正如你所看到的，这根本不是一个bug！</p><p>假设你有一个表面，每个像素的alpha都是0，然后你用<span class="inline">bm_normal</span>混合模式在上面画一个alpha为0.5的圆。整个表面仍然是alpha 0，但是在圆中alpha实际上是0.25，因为：</p><p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p><p>如果你在现有的圆上再画一个alpha值为0.5的圆，那么在圆外的alpha值为0，在圆间的alpha值为0.25，在较小的圆内的alpha值为0.375：</p><p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p><p>如果你继续在一个alpha值为0的曲面上画一些alpha值为0.5的圆，然后把这个曲面画到房间上，你可以清楚地看到：</p><p><img alt="Surface Alpha Illustration" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_Surface.png">如果您对 Alpha 仍然有点困惑，请尝试将其想象为另一种颜色。 它的行为就像一种颜色，所有关于它的计算都以类似的方式完成。 它只是不太明显，尽管它对其他颜色的影响是可见的。 这就是我们在使用曲面和混合模式（甚至是 <span class="inline">bm_normal</span>）时需要注意的最后一点...</p><p>Even if the alpha of the surface is 0, <em><strong>the colour components are still there and exist and will influence in all blending operations</strong></em>. So drawing to a zero alpha cleared surface that has been cleared using the colour red (for example) will blend the source colours with the destination colours and give different effects to what you may think. The above image was created on a surface cleared to black, but if we clear the surface to red, we get this instead:</p><p><img class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes2_SurfaceRed.png">Hopefully you can now work out why this happens for yourself using the formulas we've outlined above and applying the appropriate figures for <span class="inline">bm_normal</span>.</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><div class="footer"><div class="buttons"><div class="clear"><div style="float:left">Back: <a href="Additional_Information.htm">额外的信息</a></div><div style="float:right">Next:&nbsp;<a href="Guide_To_Using_JSON.htm">JSON 使用指南</a></div></div></div><h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5></div></body></html>